
ControlMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba68  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  0800bc08  0800bc08  0000cc08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfd8  0800bfd8  0000d2c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bfd8  0800bfd8  0000cfd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bfe0  0800bfe0  0000d2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bfe0  0800bfe0  0000cfe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bfe4  0800bfe4  0000cfe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c4  20000000  0800bfe8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e6c  200002c4  0800c2ac  0000d2c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002130  0800c2ac  0000e130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d2c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013515  00000000  00000000  0000d2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033e2  00000000  00000000  00020809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  00023bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d73  00000000  00000000  00024da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199f4  00000000  00000000  00025b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a53  00000000  00000000  0003f50f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091990  00000000  00000000  00054f62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e68f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005adc  00000000  00000000  000e6938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000ec414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c4 	.word	0x200002c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bbf0 	.word	0x0800bbf0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c8 	.word	0x200002c8
 80001dc:	0800bbf0 	.word	0x0800bbf0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <HAL_TIM_IC_CaptureCallback>:
	    for (j=0; j < 4; j++) {
	        _avgSpeed[i] += speed[i][j] / 4;
	    }
	}
}
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	counter=__HAL_TIM_GetCounter(htim);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eb6:	4a10      	ldr	r2, [pc, #64]	@ (8000ef8 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000eb8:	6013      	str	r3, [r2, #0]
	count = (int16_t)counter; // To have + and - values (ccw and cw)
 8000eba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef8 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	b21a      	sxth	r2, r3
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8000efc <HAL_TIM_IC_CaptureCallback+0x54>)
 8000ec2:	801a      	strh	r2, [r3, #0]
	if (htim==&htim2)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a0e      	ldr	r2, [pc, #56]	@ (8000f00 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d105      	bne.n	8000ed8 <HAL_TIM_IC_CaptureCallback+0x30>
	{
		position[0] = count;
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8000efc <HAL_TIM_IC_CaptureCallback+0x54>)
 8000ece:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000ed4:	801a      	strh	r2, [r3, #0]
	{
		position[1] = count;
	}


}
 8000ed6:	e008      	b.n	8000eea <HAL_TIM_IC_CaptureCallback+0x42>
	else if(htim==&htim3)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a0b      	ldr	r2, [pc, #44]	@ (8000f08 <HAL_TIM_IC_CaptureCallback+0x60>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d104      	bne.n	8000eea <HAL_TIM_IC_CaptureCallback+0x42>
		position[1] = count;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <HAL_TIM_IC_CaptureCallback+0x54>)
 8000ee2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ee6:	4b07      	ldr	r3, [pc, #28]	@ (8000f04 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000ee8:	805a      	strh	r2, [r3, #2]
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	200003b8 	.word	0x200003b8
 8000efc:	200003bc 	.word	0x200003bc
 8000f00:	200002e0 	.word	0x200002e0
 8000f04:	200003c0 	.word	0x200003c0
 8000f08:	20000328 	.word	0x20000328

08000f0c <setTimers>:


void setTimers(int _velocityOutput[2])
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	//Important to set between 0 and ARR=3599
	//We asume that _velocityOutput[0] TIM24 is the left motor and
	//_velocityOutput[1] the right motor TIM13. If the value is positive
	//the motor drives forward
	if (velocityOutput[0]==0)
 8000f14:	4b2e      	ldr	r3, [pc, #184]	@ (8000fd0 <setTimers+0xc4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d108      	bne.n	8000f2e <setTimers+0x22>
	{
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8000f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd4 <setTimers+0xc8>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2200      	movs	r2, #0
 8000f22:	641a      	str	r2, [r3, #64]	@ 0x40
	    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8000f24:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd4 <setTimers+0xc8>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f2c:	e01e      	b.n	8000f6c <setTimers+0x60>

	}
	else
	{
		if (velocityOutput[0]>0) //Forward
 8000f2e:	4b28      	ldr	r3, [pc, #160]	@ (8000fd0 <setTimers+0xc4>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	dd0d      	ble.n	8000f52 <setTimers+0x46>
		{
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8000f36:	4b27      	ldr	r3, [pc, #156]	@ (8000fd4 <setTimers+0xc8>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	641a      	str	r2, [r3, #64]	@ 0x40
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, abs(velocityOutput[0]));
 8000f3e:	4b24      	ldr	r3, [pc, #144]	@ (8000fd0 <setTimers+0xc4>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000f46:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000f4a:	4b22      	ldr	r3, [pc, #136]	@ (8000fd4 <setTimers+0xc8>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f50:	e00c      	b.n	8000f6c <setTimers+0x60>
		}
		else //Backward
		{
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,abs(velocityOutput[0]));
 8000f52:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <setTimers+0xc4>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000f5a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd4 <setTimers+0xc8>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	641a      	str	r2, [r3, #64]	@ 0x40
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8000f64:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd4 <setTimers+0xc8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}

	if (velocityOutput[1]==0)
 8000f6c:	4b18      	ldr	r3, [pc, #96]	@ (8000fd0 <setTimers+0xc4>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d108      	bne.n	8000f86 <setTimers+0x7a>
		{
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8000f74:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <setTimers+0xc8>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	63da      	str	r2, [r3, #60]	@ 0x3c
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8000f7c:	4b15      	ldr	r3, [pc, #84]	@ (8000fd4 <setTimers+0xc8>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2200      	movs	r2, #0
 8000f82:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}



}
 8000f84:	e01e      	b.n	8000fc4 <setTimers+0xb8>
		if (velocityOutput[1]>0) //Forward
 8000f86:	4b12      	ldr	r3, [pc, #72]	@ (8000fd0 <setTimers+0xc4>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	dd0d      	ble.n	8000faa <setTimers+0x9e>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8000f8e:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <setTimers+0xc8>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2200      	movs	r2, #0
 8000f94:	63da      	str	r2, [r3, #60]	@ 0x3c
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, abs(velocityOutput[1]));
 8000f96:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd0 <setTimers+0xc4>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000f9e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <setTimers+0xc8>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000fa8:	e00c      	b.n	8000fc4 <setTimers+0xb8>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, abs(velocityOutput[1]));
 8000faa:	4b09      	ldr	r3, [pc, #36]	@ (8000fd0 <setTimers+0xc4>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000fb2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000fb6:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <setTimers+0xc8>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	63da      	str	r2, [r3, #60]	@ 0x3c
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8000fbc:	4b05      	ldr	r3, [pc, #20]	@ (8000fd4 <setTimers+0xc8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	200003e8 	.word	0x200003e8
 8000fd4:	20000370 	.word	0x20000370

08000fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08c      	sub	sp, #48	@ 0x30
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fde:	f000 fd01 	bl	80019e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe2:	f000 f859 	bl	8001098 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe6:	f000 f9ff 	bl	80013e8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fea:	f000 f8bd 	bl	8001168 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fee:	f000 f90f 	bl	8001210 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ff2:	f000 f961 	bl	80012b8 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000ff6:	f007 faa5 	bl	8008544 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000ffa:	213c      	movs	r1, #60	@ 0x3c
 8000ffc:	481e      	ldr	r0, [pc, #120]	@ (8001078 <main+0xa0>)
 8000ffe:	f003 f8dd 	bl	80041bc <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001002:	213c      	movs	r1, #60	@ 0x3c
 8001004:	481d      	ldr	r0, [pc, #116]	@ (800107c <main+0xa4>)
 8001006:	f003 f8d9 	bl	80041bc <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800100a:	2100      	movs	r1, #0
 800100c:	481c      	ldr	r0, [pc, #112]	@ (8001080 <main+0xa8>)
 800100e:	f002 ff7f 	bl	8003f10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001012:	2104      	movs	r1, #4
 8001014:	481a      	ldr	r0, [pc, #104]	@ (8001080 <main+0xa8>)
 8001016:	f002 ff7b 	bl	8003f10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800101a:	2108      	movs	r1, #8
 800101c:	4818      	ldr	r0, [pc, #96]	@ (8001080 <main+0xa8>)
 800101e:	f002 ff77 	bl	8003f10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001022:	210c      	movs	r1, #12
 8001024:	4816      	ldr	r0, [pc, #88]	@ (8001080 <main+0xa8>)
 8001026:	f002 ff73 	bl	8003f10 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //***************************//
	  velocityOutput[0]=0;
 800102a:	4b16      	ldr	r3, [pc, #88]	@ (8001084 <main+0xac>)
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
	  velocityOutput[1]=3400;
 8001030:	4b14      	ldr	r3, [pc, #80]	@ (8001084 <main+0xac>)
 8001032:	f640 5248 	movw	r2, #3400	@ 0xd48
 8001036:	605a      	str	r2, [r3, #4]
	//***************************//
	setTimers(velocityOutput);
 8001038:	4812      	ldr	r0, [pc, #72]	@ (8001084 <main+0xac>)
 800103a:	f7ff ff67 	bl	8000f0c <setTimers>

	if (velocidadActualizada)
 800103e:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <main+0xb0>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0f1      	beq.n	800102a <main+0x52>
//		if (actualSpeed[1][iteradorIndice] >= 0)
//			sprintf(msg_dch, "%s%s", "d+", valor_dch);
//		else
//			sprintf(msg_dch, "%s%s", "d", valor_dch);

		sprintf(msg, "d+%.3f\n", actualSpeed[1][iteradorIndice]);
 8001046:	4b11      	ldr	r3, [pc, #68]	@ (800108c <main+0xb4>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	4a11      	ldr	r2, [pc, #68]	@ (8001090 <main+0xb8>)
 800104c:	3304      	adds	r3, #4
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fa7f 	bl	8000558 <__aeabi_f2d>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4638      	mov	r0, r7
 8001060:	490c      	ldr	r1, [pc, #48]	@ (8001094 <main+0xbc>)
 8001062:	f008 fc99 	bl	8009998 <siprintf>

		CDC_Transmit_FS(msg, sizeof(msg));
 8001066:	463b      	mov	r3, r7
 8001068:	2110      	movs	r1, #16
 800106a:	4618      	mov	r0, r3
 800106c:	f007 fb28 	bl	80086c0 <CDC_Transmit_FS>
		velocidadActualizada = 0;
 8001070:	4b05      	ldr	r3, [pc, #20]	@ (8001088 <main+0xb0>)
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]
	  velocityOutput[0]=0;
 8001076:	e7d8      	b.n	800102a <main+0x52>
 8001078:	200002e0 	.word	0x200002e0
 800107c:	20000328 	.word	0x20000328
 8001080:	20000370 	.word	0x20000370
 8001084:	200003e8 	.word	0x200003e8
 8001088:	200003e5 	.word	0x200003e5
 800108c:	200003e4 	.word	0x200003e4
 8001090:	200003c4 	.word	0x200003c4
 8001094:	0800bc08 	.word	0x0800bc08

08001098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b094      	sub	sp, #80	@ 0x50
 800109c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109e:	f107 0320 	add.w	r3, r7, #32
 80010a2:	2230      	movs	r2, #48	@ 0x30
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f008 fcd9 	bl	8009a5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	4b27      	ldr	r3, [pc, #156]	@ (8001160 <SystemClock_Config+0xc8>)
 80010c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c4:	4a26      	ldr	r2, [pc, #152]	@ (8001160 <SystemClock_Config+0xc8>)
 80010c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80010cc:	4b24      	ldr	r3, [pc, #144]	@ (8001160 <SystemClock_Config+0xc8>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d8:	2300      	movs	r3, #0
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	4b21      	ldr	r3, [pc, #132]	@ (8001164 <SystemClock_Config+0xcc>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a20      	ldr	r2, [pc, #128]	@ (8001164 <SystemClock_Config+0xcc>)
 80010e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001164 <SystemClock_Config+0xcc>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f4:	2301      	movs	r3, #1
 80010f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fe:	2302      	movs	r3, #2
 8001100:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001102:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001106:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001108:	2304      	movs	r3, #4
 800110a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800110c:	23c0      	movs	r3, #192	@ 0xc0
 800110e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001110:	2304      	movs	r3, #4
 8001112:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001114:	2308      	movs	r3, #8
 8001116:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001118:	f107 0320 	add.w	r3, r7, #32
 800111c:	4618      	mov	r0, r3
 800111e:	f002 f9df 	bl	80034e0 <HAL_RCC_OscConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001128:	f000 f994 	bl	8001454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112c:	230f      	movs	r3, #15
 800112e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001130:	2302      	movs	r3, #2
 8001132:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001138:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800113c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001142:	f107 030c 	add.w	r3, r7, #12
 8001146:	2103      	movs	r1, #3
 8001148:	4618      	mov	r0, r3
 800114a:	f002 fc41 	bl	80039d0 <HAL_RCC_ClockConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001154:	f000 f97e 	bl	8001454 <Error_Handler>
  }
}
 8001158:	bf00      	nop
 800115a:	3750      	adds	r7, #80	@ 0x50
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40023800 	.word	0x40023800
 8001164:	40007000 	.word	0x40007000

08001168 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08c      	sub	sp, #48	@ 0x30
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	2224      	movs	r2, #36	@ 0x24
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f008 fc71 	bl	8009a5e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001184:	4b21      	ldr	r3, [pc, #132]	@ (800120c <MX_TIM2_Init+0xa4>)
 8001186:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800118a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800118c:	4b1f      	ldr	r3, [pc, #124]	@ (800120c <MX_TIM2_Init+0xa4>)
 800118e:	2200      	movs	r2, #0
 8001190:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001192:	4b1e      	ldr	r3, [pc, #120]	@ (800120c <MX_TIM2_Init+0xa4>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001198:	4b1c      	ldr	r3, [pc, #112]	@ (800120c <MX_TIM2_Init+0xa4>)
 800119a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800119e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a0:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <MX_TIM2_Init+0xa4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a6:	4b19      	ldr	r3, [pc, #100]	@ (800120c <MX_TIM2_Init+0xa4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011ac:	2303      	movs	r3, #3
 80011ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80011b0:	2302      	movs	r3, #2
 80011b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011b4:	2301      	movs	r3, #1
 80011b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80011c0:	2302      	movs	r3, #2
 80011c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011c4:	2301      	movs	r3, #1
 80011c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	4619      	mov	r1, r3
 80011d6:	480d      	ldr	r0, [pc, #52]	@ (800120c <MX_TIM2_Init+0xa4>)
 80011d8:	f002 ff4a 	bl	8004070 <HAL_TIM_Encoder_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80011e2:	f000 f937 	bl	8001454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	4619      	mov	r1, r3
 80011f2:	4806      	ldr	r0, [pc, #24]	@ (800120c <MX_TIM2_Init+0xa4>)
 80011f4:	f003 fe0a 	bl	8004e0c <HAL_TIMEx_MasterConfigSynchronization>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80011fe:	f000 f929 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	3730      	adds	r7, #48	@ 0x30
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200002e0 	.word	0x200002e0

08001210 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08c      	sub	sp, #48	@ 0x30
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001216:	f107 030c 	add.w	r3, r7, #12
 800121a:	2224      	movs	r2, #36	@ 0x24
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f008 fc1d 	bl	8009a5e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800122c:	4b20      	ldr	r3, [pc, #128]	@ (80012b0 <MX_TIM3_Init+0xa0>)
 800122e:	4a21      	ldr	r2, [pc, #132]	@ (80012b4 <MX_TIM3_Init+0xa4>)
 8001230:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001232:	4b1f      	ldr	r3, [pc, #124]	@ (80012b0 <MX_TIM3_Init+0xa0>)
 8001234:	2200      	movs	r2, #0
 8001236:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001238:	4b1d      	ldr	r3, [pc, #116]	@ (80012b0 <MX_TIM3_Init+0xa0>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800123e:	4b1c      	ldr	r3, [pc, #112]	@ (80012b0 <MX_TIM3_Init+0xa0>)
 8001240:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001244:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001246:	4b1a      	ldr	r3, [pc, #104]	@ (80012b0 <MX_TIM3_Init+0xa0>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124c:	4b18      	ldr	r3, [pc, #96]	@ (80012b0 <MX_TIM3_Init+0xa0>)
 800124e:	2200      	movs	r2, #0
 8001250:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001252:	2303      	movs	r3, #3
 8001254:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001256:	2302      	movs	r3, #2
 8001258:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800125a:	2301      	movs	r3, #1
 800125c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001266:	2302      	movs	r3, #2
 8001268:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800126a:	2301      	movs	r3, #1
 800126c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	4619      	mov	r1, r3
 800127c:	480c      	ldr	r0, [pc, #48]	@ (80012b0 <MX_TIM3_Init+0xa0>)
 800127e:	f002 fef7 	bl	8004070 <HAL_TIM_Encoder_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001288:	f000 f8e4 	bl	8001454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128c:	2300      	movs	r3, #0
 800128e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	4619      	mov	r1, r3
 8001298:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <MX_TIM3_Init+0xa0>)
 800129a:	f003 fdb7 	bl	8004e0c <HAL_TIMEx_MasterConfigSynchronization>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80012a4:	f000 f8d6 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	3730      	adds	r7, #48	@ 0x30
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000328 	.word	0x20000328
 80012b4:	40000400 	.word	0x40000400

080012b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08e      	sub	sp, #56	@ 0x38
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012cc:	f107 0320 	add.w	r3, r7, #32
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
 80012e4:	615a      	str	r2, [r3, #20]
 80012e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012e8:	4b3d      	ldr	r3, [pc, #244]	@ (80013e0 <MX_TIM4_Init+0x128>)
 80012ea:	4a3e      	ldr	r2, [pc, #248]	@ (80013e4 <MX_TIM4_Init+0x12c>)
 80012ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80012ee:	4b3c      	ldr	r3, [pc, #240]	@ (80013e0 <MX_TIM4_Init+0x128>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f4:	4b3a      	ldr	r3, [pc, #232]	@ (80013e0 <MX_TIM4_Init+0x128>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3600-1;
 80012fa:	4b39      	ldr	r3, [pc, #228]	@ (80013e0 <MX_TIM4_Init+0x128>)
 80012fc:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8001300:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001302:	4b37      	ldr	r3, [pc, #220]	@ (80013e0 <MX_TIM4_Init+0x128>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001308:	4b35      	ldr	r3, [pc, #212]	@ (80013e0 <MX_TIM4_Init+0x128>)
 800130a:	2200      	movs	r2, #0
 800130c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800130e:	4834      	ldr	r0, [pc, #208]	@ (80013e0 <MX_TIM4_Init+0x128>)
 8001310:	f002 fd56 	bl	8003dc0 <HAL_TIM_Base_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800131a:	f000 f89b 	bl	8001454 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800131e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001322:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001324:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001328:	4619      	mov	r1, r3
 800132a:	482d      	ldr	r0, [pc, #180]	@ (80013e0 <MX_TIM4_Init+0x128>)
 800132c:	f003 f9a6 	bl	800467c <HAL_TIM_ConfigClockSource>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001336:	f000 f88d 	bl	8001454 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800133a:	4829      	ldr	r0, [pc, #164]	@ (80013e0 <MX_TIM4_Init+0x128>)
 800133c:	f002 fd8f 	bl	8003e5e <HAL_TIM_PWM_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001346:	f000 f885 	bl	8001454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001352:	f107 0320 	add.w	r3, r7, #32
 8001356:	4619      	mov	r1, r3
 8001358:	4821      	ldr	r0, [pc, #132]	@ (80013e0 <MX_TIM4_Init+0x128>)
 800135a:	f003 fd57 	bl	8004e0c <HAL_TIMEx_MasterConfigSynchronization>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001364:	f000 f876 	bl	8001454 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001368:	2360      	movs	r3, #96	@ 0x60
 800136a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	2200      	movs	r2, #0
 800137c:	4619      	mov	r1, r3
 800137e:	4818      	ldr	r0, [pc, #96]	@ (80013e0 <MX_TIM4_Init+0x128>)
 8001380:	f003 f8ba 	bl	80044f8 <HAL_TIM_PWM_ConfigChannel>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800138a:	f000 f863 	bl	8001454 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	2204      	movs	r2, #4
 8001392:	4619      	mov	r1, r3
 8001394:	4812      	ldr	r0, [pc, #72]	@ (80013e0 <MX_TIM4_Init+0x128>)
 8001396:	f003 f8af 	bl	80044f8 <HAL_TIM_PWM_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80013a0:	f000 f858 	bl	8001454 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2208      	movs	r2, #8
 80013a8:	4619      	mov	r1, r3
 80013aa:	480d      	ldr	r0, [pc, #52]	@ (80013e0 <MX_TIM4_Init+0x128>)
 80013ac:	f003 f8a4 	bl	80044f8 <HAL_TIM_PWM_ConfigChannel>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80013b6:	f000 f84d 	bl	8001454 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	220c      	movs	r2, #12
 80013be:	4619      	mov	r1, r3
 80013c0:	4807      	ldr	r0, [pc, #28]	@ (80013e0 <MX_TIM4_Init+0x128>)
 80013c2:	f003 f899 	bl	80044f8 <HAL_TIM_PWM_ConfigChannel>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 80013cc:	f000 f842 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013d0:	4803      	ldr	r0, [pc, #12]	@ (80013e0 <MX_TIM4_Init+0x128>)
 80013d2:	f000 f919 	bl	8001608 <HAL_TIM_MspPostInit>

}
 80013d6:	bf00      	nop
 80013d8:	3738      	adds	r7, #56	@ 0x38
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000370 	.word	0x20000370
 80013e4:	40000800 	.word	0x40000800

080013e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	4b17      	ldr	r3, [pc, #92]	@ (8001450 <MX_GPIO_Init+0x68>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	4a16      	ldr	r2, [pc, #88]	@ (8001450 <MX_GPIO_Init+0x68>)
 80013f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fe:	4b14      	ldr	r3, [pc, #80]	@ (8001450 <MX_GPIO_Init+0x68>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	4b10      	ldr	r3, [pc, #64]	@ (8001450 <MX_GPIO_Init+0x68>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	4a0f      	ldr	r2, [pc, #60]	@ (8001450 <MX_GPIO_Init+0x68>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	@ 0x30
 800141a:	4b0d      	ldr	r3, [pc, #52]	@ (8001450 <MX_GPIO_Init+0x68>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <MX_GPIO_Init+0x68>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	4a08      	ldr	r2, [pc, #32]	@ (8001450 <MX_GPIO_Init+0x68>)
 8001430:	f043 0308 	orr.w	r3, r3, #8
 8001434:	6313      	str	r3, [r2, #48]	@ 0x30
 8001436:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <MX_GPIO_Init+0x68>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001442:	bf00      	nop
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800

08001454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001458:	b672      	cpsid	i
}
 800145a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <Error_Handler+0x8>

08001460 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	4b10      	ldr	r3, [pc, #64]	@ (80014ac <HAL_MspInit+0x4c>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146e:	4a0f      	ldr	r2, [pc, #60]	@ (80014ac <HAL_MspInit+0x4c>)
 8001470:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001474:	6453      	str	r3, [r2, #68]	@ 0x44
 8001476:	4b0d      	ldr	r3, [pc, #52]	@ (80014ac <HAL_MspInit+0x4c>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	603b      	str	r3, [r7, #0]
 8001486:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <HAL_MspInit+0x4c>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	4a08      	ldr	r2, [pc, #32]	@ (80014ac <HAL_MspInit+0x4c>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001490:	6413      	str	r3, [r2, #64]	@ 0x40
 8001492:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <HAL_MspInit+0x4c>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800149e:	2007      	movs	r0, #7
 80014a0:	f000 fc06 	bl	8001cb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40023800 	.word	0x40023800

080014b0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08c      	sub	sp, #48	@ 0x30
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 031c 	add.w	r3, r7, #28
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014d0:	d134      	bne.n	800153c <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	61bb      	str	r3, [r7, #24]
 80014d6:	4b38      	ldr	r3, [pc, #224]	@ (80015b8 <HAL_TIM_Encoder_MspInit+0x108>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014da:	4a37      	ldr	r2, [pc, #220]	@ (80015b8 <HAL_TIM_Encoder_MspInit+0x108>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e2:	4b35      	ldr	r3, [pc, #212]	@ (80015b8 <HAL_TIM_Encoder_MspInit+0x108>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	61bb      	str	r3, [r7, #24]
 80014ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	4b31      	ldr	r3, [pc, #196]	@ (80015b8 <HAL_TIM_Encoder_MspInit+0x108>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	4a30      	ldr	r2, [pc, #192]	@ (80015b8 <HAL_TIM_Encoder_MspInit+0x108>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fe:	4b2e      	ldr	r3, [pc, #184]	@ (80015b8 <HAL_TIM_Encoder_MspInit+0x108>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800150a:	2303      	movs	r3, #3
 800150c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001512:	2301      	movs	r3, #1
 8001514:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800151a:	2301      	movs	r3, #1
 800151c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151e:	f107 031c 	add.w	r3, r7, #28
 8001522:	4619      	mov	r1, r3
 8001524:	4825      	ldr	r0, [pc, #148]	@ (80015bc <HAL_TIM_Encoder_MspInit+0x10c>)
 8001526:	f000 fc05 	bl	8001d34 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	201c      	movs	r0, #28
 8001530:	f000 fbc9 	bl	8001cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001534:	201c      	movs	r0, #28
 8001536:	f000 fbe2 	bl	8001cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800153a:	e038      	b.n	80015ae <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM3)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a1f      	ldr	r2, [pc, #124]	@ (80015c0 <HAL_TIM_Encoder_MspInit+0x110>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d133      	bne.n	80015ae <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	4b1b      	ldr	r3, [pc, #108]	@ (80015b8 <HAL_TIM_Encoder_MspInit+0x108>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	4a1a      	ldr	r2, [pc, #104]	@ (80015b8 <HAL_TIM_Encoder_MspInit+0x108>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	6413      	str	r3, [r2, #64]	@ 0x40
 8001556:	4b18      	ldr	r3, [pc, #96]	@ (80015b8 <HAL_TIM_Encoder_MspInit+0x108>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <HAL_TIM_Encoder_MspInit+0x108>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	4a13      	ldr	r2, [pc, #76]	@ (80015b8 <HAL_TIM_Encoder_MspInit+0x108>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6313      	str	r3, [r2, #48]	@ 0x30
 8001572:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <HAL_TIM_Encoder_MspInit+0x108>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800157e:	23c0      	movs	r3, #192	@ 0xc0
 8001580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001586:	2301      	movs	r3, #1
 8001588:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2300      	movs	r3, #0
 800158c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800158e:	2302      	movs	r3, #2
 8001590:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001592:	f107 031c 	add.w	r3, r7, #28
 8001596:	4619      	mov	r1, r3
 8001598:	4808      	ldr	r0, [pc, #32]	@ (80015bc <HAL_TIM_Encoder_MspInit+0x10c>)
 800159a:	f000 fbcb 	bl	8001d34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2100      	movs	r1, #0
 80015a2:	201d      	movs	r0, #29
 80015a4:	f000 fb8f 	bl	8001cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015a8:	201d      	movs	r0, #29
 80015aa:	f000 fba8 	bl	8001cfe <HAL_NVIC_EnableIRQ>
}
 80015ae:	bf00      	nop
 80015b0:	3730      	adds	r7, #48	@ 0x30
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020000 	.word	0x40020000
 80015c0:	40000400 	.word	0x40000400

080015c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001600 <HAL_TIM_Base_MspInit+0x3c>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d10d      	bne.n	80015f2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b0a      	ldr	r3, [pc, #40]	@ (8001604 <HAL_TIM_Base_MspInit+0x40>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015de:	4a09      	ldr	r2, [pc, #36]	@ (8001604 <HAL_TIM_Base_MspInit+0x40>)
 80015e0:	f043 0304 	orr.w	r3, r3, #4
 80015e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e6:	4b07      	ldr	r3, [pc, #28]	@ (8001604 <HAL_TIM_Base_MspInit+0x40>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ea:	f003 0304 	and.w	r3, r3, #4
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80015f2:	bf00      	nop
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40000800 	.word	0x40000800
 8001604:	40023800 	.word	0x40023800

08001608 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a12      	ldr	r2, [pc, #72]	@ (8001670 <HAL_TIM_MspPostInit+0x68>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d11e      	bne.n	8001668 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <HAL_TIM_MspPostInit+0x6c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	4a10      	ldr	r2, [pc, #64]	@ (8001674 <HAL_TIM_MspPostInit+0x6c>)
 8001634:	f043 0308 	orr.w	r3, r3, #8
 8001638:	6313      	str	r3, [r2, #48]	@ 0x30
 800163a:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <HAL_TIM_MspPostInit+0x6c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001646:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800164a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001658:	2302      	movs	r3, #2
 800165a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	4619      	mov	r1, r3
 8001662:	4805      	ldr	r0, [pc, #20]	@ (8001678 <HAL_TIM_MspPostInit+0x70>)
 8001664:	f000 fb66 	bl	8001d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001668:	bf00      	nop
 800166a:	3720      	adds	r7, #32
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40000800 	.word	0x40000800
 8001674:	40023800 	.word	0x40023800
 8001678:	40020c00 	.word	0x40020c00

0800167c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <NMI_Handler+0x4>

08001684 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <HardFault_Handler+0x4>

0800168c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <MemManage_Handler+0x4>

08001694 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <BusFault_Handler+0x4>

0800169c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <UsageFault_Handler+0x4>

080016a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	indx++;
 80016d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001788 <SysTick_Handler+0xb8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	3301      	adds	r3, #1
 80016da:	4a2b      	ldr	r2, [pc, #172]	@ (8001788 <SysTick_Handler+0xb8>)
 80016dc:	6013      	str	r3, [r2, #0]

		if (indx == movingAvgDelay){
 80016de:	4b2a      	ldr	r3, [pc, #168]	@ (8001788 <SysTick_Handler+0xb8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2bfa      	cmp	r3, #250	@ 0xfa
 80016e4:	d14c      	bne.n	8001780 <SysTick_Handler+0xb0>
			actualSpeed[0][iteradorIndice] =(position[0] - oldpos[0]) *1000/ movingAvgDelay / clicksPerTurn;
 80016e6:	4b29      	ldr	r3, [pc, #164]	@ (800178c <SysTick_Handler+0xbc>)
 80016e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b28      	ldr	r3, [pc, #160]	@ (8001790 <SysTick_Handler+0xc0>)
 80016f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	4a27      	ldr	r2, [pc, #156]	@ (8001794 <SysTick_Handler+0xc4>)
 80016f8:	fb82 1203 	smull	r1, r2, r2, r3
 80016fc:	1052      	asrs	r2, r2, #1
 80016fe:	17db      	asrs	r3, r3, #31
 8001700:	1ad2      	subs	r2, r2, r3
 8001702:	4b25      	ldr	r3, [pc, #148]	@ (8001798 <SysTick_Handler+0xc8>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	ee07 2a90 	vmov	s15, r2
 800170a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800170e:	4a23      	ldr	r2, [pc, #140]	@ (800179c <SysTick_Handler+0xcc>)
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	edc3 7a00 	vstr	s15, [r3]
			actualSpeed[1][iteradorIndice]=(position[1] - oldpos[1]) *1000*60/ movingAvgDelay / clicksPerTurn;
 8001718:	4b1c      	ldr	r3, [pc, #112]	@ (800178c <SysTick_Handler+0xbc>)
 800171a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800171e:	461a      	mov	r2, r3
 8001720:	4b1b      	ldr	r3, [pc, #108]	@ (8001790 <SysTick_Handler+0xc0>)
 8001722:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001726:	1ad2      	subs	r2, r2, r3
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	441a      	add	r2, r3
 800172e:	4b1a      	ldr	r3, [pc, #104]	@ (8001798 <SysTick_Handler+0xc8>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	ee07 2a90 	vmov	s15, r2
 8001736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800173a:	4a18      	ldr	r2, [pc, #96]	@ (800179c <SysTick_Handler+0xcc>)
 800173c:	3304      	adds	r3, #4
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	edc3 7a00 	vstr	s15, [r3]
			oldpos[0] = position[0];
 8001746:	4b11      	ldr	r3, [pc, #68]	@ (800178c <SysTick_Handler+0xbc>)
 8001748:	f9b3 2000 	ldrsh.w	r2, [r3]
 800174c:	4b10      	ldr	r3, [pc, #64]	@ (8001790 <SysTick_Handler+0xc0>)
 800174e:	801a      	strh	r2, [r3, #0]
			oldpos[1] = position[1];
 8001750:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <SysTick_Handler+0xbc>)
 8001752:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001756:	4b0e      	ldr	r3, [pc, #56]	@ (8001790 <SysTick_Handler+0xc0>)
 8001758:	805a      	strh	r2, [r3, #2]
			iteradorIndice=(iteradorIndice+1)%4;
 800175a:	4b0f      	ldr	r3, [pc, #60]	@ (8001798 <SysTick_Handler+0xc8>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	3301      	adds	r3, #1
 8001760:	425a      	negs	r2, r3
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	f002 0203 	and.w	r2, r2, #3
 800176a:	bf58      	it	pl
 800176c:	4253      	negpl	r3, r2
 800176e:	b2da      	uxtb	r2, r3
 8001770:	4b09      	ldr	r3, [pc, #36]	@ (8001798 <SysTick_Handler+0xc8>)
 8001772:	701a      	strb	r2, [r3, #0]
			indx = 0;
 8001774:	4b04      	ldr	r3, [pc, #16]	@ (8001788 <SysTick_Handler+0xb8>)
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
			velocidadActualizada = 1;
 800177a:	4b09      	ldr	r3, [pc, #36]	@ (80017a0 <SysTick_Handler+0xd0>)
 800177c:	2201      	movs	r2, #1
 800177e:	701a      	strb	r2, [r3, #0]
		}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001780:	f000 f982 	bl	8001a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}
 8001788:	200003f0 	.word	0x200003f0
 800178c:	200003c0 	.word	0x200003c0
 8001790:	200003f4 	.word	0x200003f4
 8001794:	2aaaaaab 	.word	0x2aaaaaab
 8001798:	200003e4 	.word	0x200003e4
 800179c:	200003c4 	.word	0x200003c4
 80017a0:	200003e5 	.word	0x200003e5

080017a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017a8:	4802      	ldr	r0, [pc, #8]	@ (80017b4 <TIM2_IRQHandler+0x10>)
 80017aa:	f002 fdb5 	bl	8004318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200002e0 	.word	0x200002e0

080017b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017bc:	4802      	ldr	r0, [pc, #8]	@ (80017c8 <TIM3_IRQHandler+0x10>)
 80017be:	f002 fdab 	bl	8004318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000328 	.word	0x20000328

080017cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80017d0:	4802      	ldr	r0, [pc, #8]	@ (80017dc <OTG_FS_IRQHandler+0x10>)
 80017d2:	f000 fd77 	bl	80022c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200018e0 	.word	0x200018e0

080017e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return 1;
 80017e4:	2301      	movs	r3, #1
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <_kill>:

int _kill(int pid, int sig)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017fa:	f008 f983 	bl	8009b04 <__errno>
 80017fe:	4603      	mov	r3, r0
 8001800:	2216      	movs	r2, #22
 8001802:	601a      	str	r2, [r3, #0]
  return -1;
 8001804:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <_exit>:

void _exit (int status)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001818:	f04f 31ff 	mov.w	r1, #4294967295
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ffe7 	bl	80017f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001822:	bf00      	nop
 8001824:	e7fd      	b.n	8001822 <_exit+0x12>

08001826 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	e00a      	b.n	800184e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001838:	f3af 8000 	nop.w
 800183c:	4601      	mov	r1, r0
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	60ba      	str	r2, [r7, #8]
 8001844:	b2ca      	uxtb	r2, r1
 8001846:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	3301      	adds	r3, #1
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	429a      	cmp	r2, r3
 8001854:	dbf0      	blt.n	8001838 <_read+0x12>
  }

  return len;
 8001856:	687b      	ldr	r3, [r7, #4]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	e009      	b.n	8001886 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	1c5a      	adds	r2, r3, #1
 8001876:	60ba      	str	r2, [r7, #8]
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	3301      	adds	r3, #1
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	429a      	cmp	r2, r3
 800188c:	dbf1      	blt.n	8001872 <_write+0x12>
  }
  return len;
 800188e:	687b      	ldr	r3, [r7, #4]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <_close>:

int _close(int file)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018c0:	605a      	str	r2, [r3, #4]
  return 0;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <_isatty>:

int _isatty(int file)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018d8:	2301      	movs	r3, #1
}
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b085      	sub	sp, #20
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001908:	4a14      	ldr	r2, [pc, #80]	@ (800195c <_sbrk+0x5c>)
 800190a:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <_sbrk+0x60>)
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001914:	4b13      	ldr	r3, [pc, #76]	@ (8001964 <_sbrk+0x64>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d102      	bne.n	8001922 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800191c:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <_sbrk+0x64>)
 800191e:	4a12      	ldr	r2, [pc, #72]	@ (8001968 <_sbrk+0x68>)
 8001920:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001922:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <_sbrk+0x64>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	429a      	cmp	r2, r3
 800192e:	d207      	bcs.n	8001940 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001930:	f008 f8e8 	bl	8009b04 <__errno>
 8001934:	4603      	mov	r3, r0
 8001936:	220c      	movs	r2, #12
 8001938:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800193a:	f04f 33ff 	mov.w	r3, #4294967295
 800193e:	e009      	b.n	8001954 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001940:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <_sbrk+0x64>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001946:	4b07      	ldr	r3, [pc, #28]	@ (8001964 <_sbrk+0x64>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	4a05      	ldr	r2, [pc, #20]	@ (8001964 <_sbrk+0x64>)
 8001950:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001952:	68fb      	ldr	r3, [r7, #12]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20020000 	.word	0x20020000
 8001960:	00000400 	.word	0x00000400
 8001964:	200003f8 	.word	0x200003f8
 8001968:	20002130 	.word	0x20002130

0800196c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001970:	4b06      	ldr	r3, [pc, #24]	@ (800198c <SystemInit+0x20>)
 8001972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001976:	4a05      	ldr	r2, [pc, #20]	@ (800198c <SystemInit+0x20>)
 8001978:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800197c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001990:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001994:	f7ff ffea 	bl	800196c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001998:	480c      	ldr	r0, [pc, #48]	@ (80019cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800199a:	490d      	ldr	r1, [pc, #52]	@ (80019d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800199c:	4a0d      	ldr	r2, [pc, #52]	@ (80019d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800199e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a0:	e002      	b.n	80019a8 <LoopCopyDataInit>

080019a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019a6:	3304      	adds	r3, #4

080019a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019ac:	d3f9      	bcc.n	80019a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ae:	4a0a      	ldr	r2, [pc, #40]	@ (80019d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019b0:	4c0a      	ldr	r4, [pc, #40]	@ (80019dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80019b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b4:	e001      	b.n	80019ba <LoopFillZerobss>

080019b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b8:	3204      	adds	r2, #4

080019ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019bc:	d3fb      	bcc.n	80019b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019be:	f008 f8a7 	bl	8009b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019c2:	f7ff fb09 	bl	8000fd8 <main>
  bx  lr    
 80019c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d0:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 80019d4:	0800bfe8 	.word	0x0800bfe8
  ldr r2, =_sbss
 80019d8:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 80019dc:	20002130 	.word	0x20002130

080019e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e0:	e7fe      	b.n	80019e0 <ADC_IRQHandler>
	...

080019e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a24 <HAL_Init+0x40>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001a24 <HAL_Init+0x40>)
 80019ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a24 <HAL_Init+0x40>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001a24 <HAL_Init+0x40>)
 80019fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a00:	4b08      	ldr	r3, [pc, #32]	@ (8001a24 <HAL_Init+0x40>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a07      	ldr	r2, [pc, #28]	@ (8001a24 <HAL_Init+0x40>)
 8001a06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a0c:	2003      	movs	r0, #3
 8001a0e:	f000 f94f 	bl	8001cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a12:	2000      	movs	r0, #0
 8001a14:	f000 f808 	bl	8001a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a18:	f7ff fd22 	bl	8001460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40023c00 	.word	0x40023c00

08001a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a30:	4b12      	ldr	r3, [pc, #72]	@ (8001a7c <HAL_InitTick+0x54>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b12      	ldr	r3, [pc, #72]	@ (8001a80 <HAL_InitTick+0x58>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 f967 	bl	8001d1a <HAL_SYSTICK_Config>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e00e      	b.n	8001a74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b0f      	cmp	r3, #15
 8001a5a:	d80a      	bhi.n	8001a72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	f04f 30ff 	mov.w	r0, #4294967295
 8001a64:	f000 f92f 	bl	8001cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a68:	4a06      	ldr	r2, [pc, #24]	@ (8001a84 <HAL_InitTick+0x5c>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e000      	b.n	8001a74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	20000008 	.word	0x20000008
 8001a84:	20000004 	.word	0x20000004

08001a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <HAL_IncTick+0x20>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <HAL_IncTick+0x24>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4413      	add	r3, r2
 8001a98:	4a04      	ldr	r2, [pc, #16]	@ (8001aac <HAL_IncTick+0x24>)
 8001a9a:	6013      	str	r3, [r2, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20000008 	.word	0x20000008
 8001aac:	200003fc 	.word	0x200003fc

08001ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab4:	4b03      	ldr	r3, [pc, #12]	@ (8001ac4 <HAL_GetTick+0x14>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	200003fc 	.word	0x200003fc

08001ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad0:	f7ff ffee 	bl	8001ab0 <HAL_GetTick>
 8001ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae0:	d005      	beq.n	8001aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8001b0c <HAL_Delay+0x44>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4413      	add	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001aee:	bf00      	nop
 8001af0:	f7ff ffde 	bl	8001ab0 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d8f7      	bhi.n	8001af0 <HAL_Delay+0x28>
  {
  }
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000008 	.word	0x20000008

08001b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b20:	4b0c      	ldr	r3, [pc, #48]	@ (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b42:	4a04      	ldr	r2, [pc, #16]	@ (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	60d3      	str	r3, [r2, #12]
}
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b5c:	4b04      	ldr	r3, [pc, #16]	@ (8001b70 <__NVIC_GetPriorityGrouping+0x18>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	f003 0307 	and.w	r3, r3, #7
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	db0b      	blt.n	8001b9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	f003 021f 	and.w	r2, r3, #31
 8001b8c:	4907      	ldr	r1, [pc, #28]	@ (8001bac <__NVIC_EnableIRQ+0x38>)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	095b      	lsrs	r3, r3, #5
 8001b94:	2001      	movs	r0, #1
 8001b96:	fa00 f202 	lsl.w	r2, r0, r2
 8001b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000e100 	.word	0xe000e100

08001bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	6039      	str	r1, [r7, #0]
 8001bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	db0a      	blt.n	8001bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	490c      	ldr	r1, [pc, #48]	@ (8001bfc <__NVIC_SetPriority+0x4c>)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	0112      	lsls	r2, r2, #4
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd8:	e00a      	b.n	8001bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4908      	ldr	r1, [pc, #32]	@ (8001c00 <__NVIC_SetPriority+0x50>)
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	3b04      	subs	r3, #4
 8001be8:	0112      	lsls	r2, r2, #4
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	440b      	add	r3, r1
 8001bee:	761a      	strb	r2, [r3, #24]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000e100 	.word	0xe000e100
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b089      	sub	sp, #36	@ 0x24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f1c3 0307 	rsb	r3, r3, #7
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	bf28      	it	cs
 8001c22:	2304      	movcs	r3, #4
 8001c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	2b06      	cmp	r3, #6
 8001c2c:	d902      	bls.n	8001c34 <NVIC_EncodePriority+0x30>
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3b03      	subs	r3, #3
 8001c32:	e000      	b.n	8001c36 <NVIC_EncodePriority+0x32>
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	f04f 32ff 	mov.w	r2, #4294967295
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43da      	mvns	r2, r3
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	401a      	ands	r2, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
 8001c56:	43d9      	mvns	r1, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c5c:	4313      	orrs	r3, r2
         );
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3724      	adds	r7, #36	@ 0x24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
	...

08001c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c7c:	d301      	bcc.n	8001c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00f      	b.n	8001ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c82:	4a0a      	ldr	r2, [pc, #40]	@ (8001cac <SysTick_Config+0x40>)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8a:	210f      	movs	r1, #15
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c90:	f7ff ff8e 	bl	8001bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c94:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <SysTick_Config+0x40>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9a:	4b04      	ldr	r3, [pc, #16]	@ (8001cac <SysTick_Config+0x40>)
 8001c9c:	2207      	movs	r2, #7
 8001c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	e000e010 	.word	0xe000e010

08001cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ff29 	bl	8001b10 <__NVIC_SetPriorityGrouping>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	4603      	mov	r3, r0
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
 8001cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd8:	f7ff ff3e 	bl	8001b58 <__NVIC_GetPriorityGrouping>
 8001cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	6978      	ldr	r0, [r7, #20]
 8001ce4:	f7ff ff8e 	bl	8001c04 <NVIC_EncodePriority>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cee:	4611      	mov	r1, r2
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff5d 	bl	8001bb0 <__NVIC_SetPriority>
}
 8001cf6:	bf00      	nop
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	4603      	mov	r3, r0
 8001d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff31 	bl	8001b74 <__NVIC_EnableIRQ>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff ffa2 	bl	8001c6c <SysTick_Config>
 8001d28:	4603      	mov	r3, r0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	@ 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
 8001d4e:	e159      	b.n	8002004 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d50:	2201      	movs	r2, #1
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	4013      	ands	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	f040 8148 	bne.w	8001ffe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d005      	beq.n	8001d86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d130      	bne.n	8001de8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	2203      	movs	r2, #3
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	091b      	lsrs	r3, r3, #4
 8001dd2:	f003 0201 	and.w	r2, r3, #1
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	d017      	beq.n	8001e24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	2203      	movs	r2, #3
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d123      	bne.n	8001e78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	08da      	lsrs	r2, r3, #3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3208      	adds	r2, #8
 8001e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	220f      	movs	r2, #15
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	08da      	lsrs	r2, r3, #3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3208      	adds	r2, #8
 8001e72:	69b9      	ldr	r1, [r7, #24]
 8001e74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	2203      	movs	r2, #3
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 0203 	and.w	r2, r3, #3
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 80a2 	beq.w	8001ffe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	4b57      	ldr	r3, [pc, #348]	@ (800201c <HAL_GPIO_Init+0x2e8>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec2:	4a56      	ldr	r2, [pc, #344]	@ (800201c <HAL_GPIO_Init+0x2e8>)
 8001ec4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ec8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eca:	4b54      	ldr	r3, [pc, #336]	@ (800201c <HAL_GPIO_Init+0x2e8>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ece:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ed6:	4a52      	ldr	r2, [pc, #328]	@ (8002020 <HAL_GPIO_Init+0x2ec>)
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	089b      	lsrs	r3, r3, #2
 8001edc:	3302      	adds	r3, #2
 8001ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	220f      	movs	r2, #15
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a49      	ldr	r2, [pc, #292]	@ (8002024 <HAL_GPIO_Init+0x2f0>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d019      	beq.n	8001f36 <HAL_GPIO_Init+0x202>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a48      	ldr	r2, [pc, #288]	@ (8002028 <HAL_GPIO_Init+0x2f4>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d013      	beq.n	8001f32 <HAL_GPIO_Init+0x1fe>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a47      	ldr	r2, [pc, #284]	@ (800202c <HAL_GPIO_Init+0x2f8>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00d      	beq.n	8001f2e <HAL_GPIO_Init+0x1fa>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a46      	ldr	r2, [pc, #280]	@ (8002030 <HAL_GPIO_Init+0x2fc>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d007      	beq.n	8001f2a <HAL_GPIO_Init+0x1f6>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a45      	ldr	r2, [pc, #276]	@ (8002034 <HAL_GPIO_Init+0x300>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d101      	bne.n	8001f26 <HAL_GPIO_Init+0x1f2>
 8001f22:	2304      	movs	r3, #4
 8001f24:	e008      	b.n	8001f38 <HAL_GPIO_Init+0x204>
 8001f26:	2307      	movs	r3, #7
 8001f28:	e006      	b.n	8001f38 <HAL_GPIO_Init+0x204>
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e004      	b.n	8001f38 <HAL_GPIO_Init+0x204>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e002      	b.n	8001f38 <HAL_GPIO_Init+0x204>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <HAL_GPIO_Init+0x204>
 8001f36:	2300      	movs	r3, #0
 8001f38:	69fa      	ldr	r2, [r7, #28]
 8001f3a:	f002 0203 	and.w	r2, r2, #3
 8001f3e:	0092      	lsls	r2, r2, #2
 8001f40:	4093      	lsls	r3, r2
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f48:	4935      	ldr	r1, [pc, #212]	@ (8002020 <HAL_GPIO_Init+0x2ec>)
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	3302      	adds	r3, #2
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f56:	4b38      	ldr	r3, [pc, #224]	@ (8002038 <HAL_GPIO_Init+0x304>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4013      	ands	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f7a:	4a2f      	ldr	r2, [pc, #188]	@ (8002038 <HAL_GPIO_Init+0x304>)
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f80:	4b2d      	ldr	r3, [pc, #180]	@ (8002038 <HAL_GPIO_Init+0x304>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fa4:	4a24      	ldr	r2, [pc, #144]	@ (8002038 <HAL_GPIO_Init+0x304>)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001faa:	4b23      	ldr	r3, [pc, #140]	@ (8002038 <HAL_GPIO_Init+0x304>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fce:	4a1a      	ldr	r2, [pc, #104]	@ (8002038 <HAL_GPIO_Init+0x304>)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fd4:	4b18      	ldr	r3, [pc, #96]	@ (8002038 <HAL_GPIO_Init+0x304>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ff8:	4a0f      	ldr	r2, [pc, #60]	@ (8002038 <HAL_GPIO_Init+0x304>)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	3301      	adds	r3, #1
 8002002:	61fb      	str	r3, [r7, #28]
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	2b0f      	cmp	r3, #15
 8002008:	f67f aea2 	bls.w	8001d50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800200c:	bf00      	nop
 800200e:	bf00      	nop
 8002010:	3724      	adds	r7, #36	@ 0x24
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40023800 	.word	0x40023800
 8002020:	40013800 	.word	0x40013800
 8002024:	40020000 	.word	0x40020000
 8002028:	40020400 	.word	0x40020400
 800202c:	40020800 	.word	0x40020800
 8002030:	40020c00 	.word	0x40020c00
 8002034:	40021000 	.word	0x40021000
 8002038:	40013c00 	.word	0x40013c00

0800203c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af02      	add	r7, sp, #8
 8002042:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e101      	b.n	8002252 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	d106      	bne.n	800206e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f006 fc71 	bl	8008950 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2203      	movs	r2, #3
 8002072:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800207c:	d102      	bne.n	8002084 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f003 f858 	bl	800513e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6818      	ldr	r0, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	7c1a      	ldrb	r2, [r3, #16]
 8002096:	f88d 2000 	strb.w	r2, [sp]
 800209a:	3304      	adds	r3, #4
 800209c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800209e:	f002 ff37 	bl	8004f10 <USB_CoreInit>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2202      	movs	r2, #2
 80020ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0ce      	b.n	8002252 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f003 f850 	bl	8005160 <USB_SetCurrentMode>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d005      	beq.n	80020d2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2202      	movs	r2, #2
 80020ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e0bf      	b.n	8002252 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	73fb      	strb	r3, [r7, #15]
 80020d6:	e04a      	b.n	800216e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020d8:	7bfa      	ldrb	r2, [r7, #15]
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4413      	add	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	3315      	adds	r3, #21
 80020e8:	2201      	movs	r2, #1
 80020ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020ec:	7bfa      	ldrb	r2, [r7, #15]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	3314      	adds	r3, #20
 80020fc:	7bfa      	ldrb	r2, [r7, #15]
 80020fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002100:	7bfa      	ldrb	r2, [r7, #15]
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	b298      	uxth	r0, r3
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	332e      	adds	r3, #46	@ 0x2e
 8002114:	4602      	mov	r2, r0
 8002116:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002118:	7bfa      	ldrb	r2, [r7, #15]
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	3318      	adds	r3, #24
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800212c:	7bfa      	ldrb	r2, [r7, #15]
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	331c      	adds	r3, #28
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002140:	7bfa      	ldrb	r2, [r7, #15]
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4413      	add	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	3320      	adds	r3, #32
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002154:	7bfa      	ldrb	r2, [r7, #15]
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4413      	add	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	3324      	adds	r3, #36	@ 0x24
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	3301      	adds	r3, #1
 800216c:	73fb      	strb	r3, [r7, #15]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	791b      	ldrb	r3, [r3, #4]
 8002172:	7bfa      	ldrb	r2, [r7, #15]
 8002174:	429a      	cmp	r2, r3
 8002176:	d3af      	bcc.n	80020d8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]
 800217c:	e044      	b.n	8002208 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800217e:	7bfa      	ldrb	r2, [r7, #15]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4413      	add	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	440b      	add	r3, r1
 800218c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002194:	7bfa      	ldrb	r2, [r7, #15]
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4413      	add	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80021a6:	7bfa      	ldrb	r2, [r7, #15]
 80021a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021aa:	7bfa      	ldrb	r2, [r7, #15]
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	4413      	add	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	440b      	add	r3, r1
 80021b8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021c0:	7bfa      	ldrb	r2, [r7, #15]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021d6:	7bfa      	ldrb	r2, [r7, #15]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4413      	add	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021ec:	7bfa      	ldrb	r2, [r7, #15]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	3301      	adds	r3, #1
 8002206:	73fb      	strb	r3, [r7, #15]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	791b      	ldrb	r3, [r3, #4]
 800220c:	7bfa      	ldrb	r2, [r7, #15]
 800220e:	429a      	cmp	r2, r3
 8002210:	d3b5      	bcc.n	800217e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	7c1a      	ldrb	r2, [r3, #16]
 800221a:	f88d 2000 	strb.w	r2, [sp]
 800221e:	3304      	adds	r3, #4
 8002220:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002222:	f002 ffe9 	bl	80051f8 <USB_DevInit>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e00c      	b.n	8002252 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f004 f833 	bl	80062b6 <USB_DevDisconnect>

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b084      	sub	sp, #16
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800226e:	2b01      	cmp	r3, #1
 8002270:	d101      	bne.n	8002276 <HAL_PCD_Start+0x1c>
 8002272:	2302      	movs	r3, #2
 8002274:	e022      	b.n	80022bc <HAL_PCD_Start+0x62>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002286:	2b00      	cmp	r3, #0
 8002288:	d009      	beq.n	800229e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800228e:	2b01      	cmp	r3, #1
 8002290:	d105      	bne.n	800229e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002296:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f002 ff3a 	bl	800511c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f003 ffe1 	bl	8006274 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022c4:	b590      	push	{r4, r7, lr}
 80022c6:	b08d      	sub	sp, #52	@ 0x34
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f004 f89f 	bl	800641e <USB_GetMode>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f040 848c 	bne.w	8002c00 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f004 f803 	bl	80062f8 <USB_ReadInterrupts>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 8482 	beq.w	8002bfe <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	0a1b      	lsrs	r3, r3, #8
 8002304:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f003 fff0 	bl	80062f8 <USB_ReadInterrupts>
 8002318:	4603      	mov	r3, r0
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b02      	cmp	r3, #2
 8002320:	d107      	bne.n	8002332 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695a      	ldr	r2, [r3, #20]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f002 0202 	and.w	r2, r2, #2
 8002330:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f003 ffde 	bl	80062f8 <USB_ReadInterrupts>
 800233c:	4603      	mov	r3, r0
 800233e:	f003 0310 	and.w	r3, r3, #16
 8002342:	2b10      	cmp	r3, #16
 8002344:	d161      	bne.n	800240a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	699a      	ldr	r2, [r3, #24]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0210 	bic.w	r2, r2, #16
 8002354:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002356:	6a3b      	ldr	r3, [r7, #32]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	f003 020f 	and.w	r2, r3, #15
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	4413      	add	r3, r2
 8002372:	3304      	adds	r3, #4
 8002374:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	0c5b      	lsrs	r3, r3, #17
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	2b02      	cmp	r3, #2
 8002380:	d124      	bne.n	80023cc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002388:	4013      	ands	r3, r2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d035      	beq.n	80023fa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002398:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800239c:	b29b      	uxth	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	6a38      	ldr	r0, [r7, #32]
 80023a2:	f003 fe15 	bl	8005fd0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023b2:	441a      	add	r2, r3
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	695a      	ldr	r2, [r3, #20]
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	091b      	lsrs	r3, r3, #4
 80023c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023c4:	441a      	add	r2, r3
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	615a      	str	r2, [r3, #20]
 80023ca:	e016      	b.n	80023fa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	0c5b      	lsrs	r3, r3, #17
 80023d0:	f003 030f 	and.w	r3, r3, #15
 80023d4:	2b06      	cmp	r3, #6
 80023d6:	d110      	bne.n	80023fa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023de:	2208      	movs	r2, #8
 80023e0:	4619      	mov	r1, r3
 80023e2:	6a38      	ldr	r0, [r7, #32]
 80023e4:	f003 fdf4 	bl	8005fd0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	695a      	ldr	r2, [r3, #20]
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	091b      	lsrs	r3, r3, #4
 80023f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023f4:	441a      	add	r2, r3
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	699a      	ldr	r2, [r3, #24]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 0210 	orr.w	r2, r2, #16
 8002408:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f003 ff72 	bl	80062f8 <USB_ReadInterrupts>
 8002414:	4603      	mov	r3, r0
 8002416:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800241a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800241e:	f040 80a7 	bne.w	8002570 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f003 ff77 	bl	800631e <USB_ReadDevAllOutEpInterrupt>
 8002430:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002432:	e099      	b.n	8002568 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 808e 	beq.w	800255c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	4611      	mov	r1, r2
 800244a:	4618      	mov	r0, r3
 800244c:	f003 ff9b 	bl	8006386 <USB_ReadDevOutEPInterrupt>
 8002450:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00c      	beq.n	8002476 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800245c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245e:	015a      	lsls	r2, r3, #5
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	4413      	add	r3, r2
 8002464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002468:	461a      	mov	r2, r3
 800246a:	2301      	movs	r3, #1
 800246c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800246e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 fea3 	bl	80031bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00c      	beq.n	800249a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002482:	015a      	lsls	r2, r3, #5
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	4413      	add	r3, r2
 8002488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800248c:	461a      	mov	r2, r3
 800248e:	2308      	movs	r3, #8
 8002490:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002492:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 ff79 	bl	800338c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	f003 0310 	and.w	r3, r3, #16
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d008      	beq.n	80024b6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80024a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a6:	015a      	lsls	r2, r3, #5
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	4413      	add	r3, r2
 80024ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024b0:	461a      	mov	r2, r3
 80024b2:	2310      	movs	r3, #16
 80024b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d030      	beq.n	8002522 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024c8:	2b80      	cmp	r3, #128	@ 0x80
 80024ca:	d109      	bne.n	80024e0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	69fa      	ldr	r2, [r7, #28]
 80024d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024de:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80024e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024e2:	4613      	mov	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	4413      	add	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	4413      	add	r3, r2
 80024f2:	3304      	adds	r3, #4
 80024f4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	78db      	ldrb	r3, [r3, #3]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d108      	bne.n	8002510 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2200      	movs	r2, #0
 8002502:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002506:	b2db      	uxtb	r3, r3
 8002508:	4619      	mov	r1, r3
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f006 fb1c 	bl	8008b48 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	4413      	add	r3, r2
 8002518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800251c:	461a      	mov	r2, r3
 800251e:	2302      	movs	r3, #2
 8002520:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	f003 0320 	and.w	r3, r3, #32
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800252c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252e:	015a      	lsls	r2, r3, #5
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	4413      	add	r3, r2
 8002534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002538:	461a      	mov	r2, r3
 800253a:	2320      	movs	r3, #32
 800253c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d009      	beq.n	800255c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254a:	015a      	lsls	r2, r3, #5
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	4413      	add	r3, r2
 8002550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002554:	461a      	mov	r2, r3
 8002556:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800255a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800255c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255e:	3301      	adds	r3, #1
 8002560:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002564:	085b      	lsrs	r3, r3, #1
 8002566:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800256a:	2b00      	cmp	r3, #0
 800256c:	f47f af62 	bne.w	8002434 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f003 febf 	bl	80062f8 <USB_ReadInterrupts>
 800257a:	4603      	mov	r3, r0
 800257c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002580:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002584:	f040 80db 	bne.w	800273e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f003 fee0 	bl	8006352 <USB_ReadDevAllInEpInterrupt>
 8002592:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002598:	e0cd      	b.n	8002736 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800259a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 80c2 	beq.w	800272a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	4611      	mov	r1, r2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f003 ff06 	bl	80063c2 <USB_ReadDevInEPInterrupt>
 80025b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d057      	beq.n	8002672 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c4:	f003 030f 	and.w	r3, r3, #15
 80025c8:	2201      	movs	r2, #1
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	43db      	mvns	r3, r3
 80025dc:	69f9      	ldr	r1, [r7, #28]
 80025de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80025e2:	4013      	ands	r3, r2
 80025e4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025f2:	461a      	mov	r2, r3
 80025f4:	2301      	movs	r3, #1
 80025f6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	799b      	ldrb	r3, [r3, #6]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d132      	bne.n	8002666 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002604:	4613      	mov	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	3320      	adds	r3, #32
 8002610:	6819      	ldr	r1, [r3, #0]
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002616:	4613      	mov	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4413      	add	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4403      	add	r3, r0
 8002620:	331c      	adds	r3, #28
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4419      	add	r1, r3
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800262a:	4613      	mov	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4403      	add	r3, r0
 8002634:	3320      	adds	r3, #32
 8002636:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263a:	2b00      	cmp	r3, #0
 800263c:	d113      	bne.n	8002666 <HAL_PCD_IRQHandler+0x3a2>
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002642:	4613      	mov	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4413      	add	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	3324      	adds	r3, #36	@ 0x24
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d108      	bne.n	8002666 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800265e:	461a      	mov	r2, r3
 8002660:	2101      	movs	r1, #1
 8002662:	f003 ff0d 	bl	8006480 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002668:	b2db      	uxtb	r3, r3
 800266a:	4619      	mov	r1, r3
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f006 f9f0 	bl	8008a52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800267c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	4413      	add	r3, r2
 8002684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002688:	461a      	mov	r2, r3
 800268a:	2308      	movs	r3, #8
 800268c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	2b00      	cmp	r3, #0
 8002696:	d008      	beq.n	80026aa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026a4:	461a      	mov	r2, r3
 80026a6:	2310      	movs	r3, #16
 80026a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80026b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026c0:	461a      	mov	r2, r3
 80026c2:	2340      	movs	r3, #64	@ 0x40
 80026c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d023      	beq.n	8002718 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80026d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026d2:	6a38      	ldr	r0, [r7, #32]
 80026d4:	f002 fef4 	bl	80054c0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80026d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	4413      	add	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	3310      	adds	r3, #16
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	4413      	add	r3, r2
 80026e8:	3304      	adds	r3, #4
 80026ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	78db      	ldrb	r3, [r3, #3]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d108      	bne.n	8002706 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	2200      	movs	r2, #0
 80026f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80026fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	4619      	mov	r1, r3
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f006 fa33 	bl	8008b6c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002708:	015a      	lsls	r2, r3, #5
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	4413      	add	r3, r2
 800270e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002712:	461a      	mov	r2, r3
 8002714:	2302      	movs	r3, #2
 8002716:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002722:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 fcbd 	bl	80030a4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800272a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272c:	3301      	adds	r3, #1
 800272e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002732:	085b      	lsrs	r3, r3, #1
 8002734:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002738:	2b00      	cmp	r3, #0
 800273a:	f47f af2e 	bne.w	800259a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f003 fdd8 	bl	80062f8 <USB_ReadInterrupts>
 8002748:	4603      	mov	r3, r0
 800274a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800274e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002752:	d122      	bne.n	800279a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	69fa      	ldr	r2, [r7, #28]
 800275e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002762:	f023 0301 	bic.w	r3, r3, #1
 8002766:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800276e:	2b01      	cmp	r3, #1
 8002770:	d108      	bne.n	8002784 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800277a:	2100      	movs	r1, #0
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 fea3 	bl	80034c8 <HAL_PCDEx_LPM_Callback>
 8002782:	e002      	b.n	800278a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f006 f9d1 	bl	8008b2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695a      	ldr	r2, [r3, #20]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002798:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f003 fdaa 	bl	80062f8 <USB_ReadInterrupts>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027ae:	d112      	bne.n	80027d6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d102      	bne.n	80027c6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f006 f98d 	bl	8008ae0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695a      	ldr	r2, [r3, #20]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80027d4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f003 fd8c 	bl	80062f8 <USB_ReadInterrupts>
 80027e0:	4603      	mov	r3, r0
 80027e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027ea:	f040 80b7 	bne.w	800295c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	69fa      	ldr	r2, [r7, #28]
 80027f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027fc:	f023 0301 	bic.w	r3, r3, #1
 8002800:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2110      	movs	r1, #16
 8002808:	4618      	mov	r0, r3
 800280a:	f002 fe59 	bl	80054c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800280e:	2300      	movs	r3, #0
 8002810:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002812:	e046      	b.n	80028a2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	4413      	add	r3, r2
 800281c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002820:	461a      	mov	r2, r3
 8002822:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002826:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	4413      	add	r3, r2
 8002830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002838:	0151      	lsls	r1, r2, #5
 800283a:	69fa      	ldr	r2, [r7, #28]
 800283c:	440a      	add	r2, r1
 800283e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002842:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002846:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	4413      	add	r3, r2
 8002850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002854:	461a      	mov	r2, r3
 8002856:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800285a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800285c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	4413      	add	r3, r2
 8002864:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800286c:	0151      	lsls	r1, r2, #5
 800286e:	69fa      	ldr	r2, [r7, #28]
 8002870:	440a      	add	r2, r1
 8002872:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002876:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800287a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800287c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	4413      	add	r3, r2
 8002884:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800288c:	0151      	lsls	r1, r2, #5
 800288e:	69fa      	ldr	r2, [r7, #28]
 8002890:	440a      	add	r2, r1
 8002892:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002896:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800289a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800289c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800289e:	3301      	adds	r3, #1
 80028a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	791b      	ldrb	r3, [r3, #4]
 80028a6:	461a      	mov	r2, r3
 80028a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d3b2      	bcc.n	8002814 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	69fa      	ldr	r2, [r7, #28]
 80028b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028bc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80028c0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	7bdb      	ldrb	r3, [r3, #15]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d016      	beq.n	80028f8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028d4:	69fa      	ldr	r2, [r7, #28]
 80028d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028da:	f043 030b 	orr.w	r3, r3, #11
 80028de:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ea:	69fa      	ldr	r2, [r7, #28]
 80028ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028f0:	f043 030b 	orr.w	r3, r3, #11
 80028f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80028f6:	e015      	b.n	8002924 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	69fa      	ldr	r2, [r7, #28]
 8002902:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002906:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800290a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800290e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	69fa      	ldr	r2, [r7, #28]
 800291a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800291e:	f043 030b 	orr.w	r3, r3, #11
 8002922:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	69fa      	ldr	r2, [r7, #28]
 800292e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002932:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002936:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002946:	461a      	mov	r2, r3
 8002948:	f003 fd9a 	bl	8006480 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695a      	ldr	r2, [r3, #20]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800295a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f003 fcc9 	bl	80062f8 <USB_ReadInterrupts>
 8002966:	4603      	mov	r3, r0
 8002968:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800296c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002970:	d123      	bne.n	80029ba <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f003 fd5f 	bl	800643a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f002 fe16 	bl	80055b2 <USB_GetDevSpeed>
 8002986:	4603      	mov	r3, r0
 8002988:	461a      	mov	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681c      	ldr	r4, [r3, #0]
 8002992:	f001 fa09 	bl	8003da8 <HAL_RCC_GetHCLKFreq>
 8002996:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800299c:	461a      	mov	r2, r3
 800299e:	4620      	mov	r0, r4
 80029a0:	f002 fb1a 	bl	8004fd8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f006 f87c 	bl	8008aa2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695a      	ldr	r2, [r3, #20]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80029b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f003 fc9a 	bl	80062f8 <USB_ReadInterrupts>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b08      	cmp	r3, #8
 80029cc:	d10a      	bne.n	80029e4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f006 f859 	bl	8008a86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695a      	ldr	r2, [r3, #20]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f002 0208 	and.w	r2, r2, #8
 80029e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f003 fc85 	bl	80062f8 <USB_ReadInterrupts>
 80029ee:	4603      	mov	r3, r0
 80029f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029f4:	2b80      	cmp	r3, #128	@ 0x80
 80029f6:	d123      	bne.n	8002a40 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80029f8:	6a3b      	ldr	r3, [r7, #32]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a04:	2301      	movs	r3, #1
 8002a06:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a08:	e014      	b.n	8002a34 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a0e:	4613      	mov	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4413      	add	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d105      	bne.n	8002a2e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	4619      	mov	r1, r3
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 fb0a 	bl	8003042 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a30:	3301      	adds	r3, #1
 8002a32:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	791b      	ldrb	r3, [r3, #4]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d3e4      	bcc.n	8002a0a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f003 fc57 	bl	80062f8 <USB_ReadInterrupts>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a54:	d13c      	bne.n	8002ad0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a56:	2301      	movs	r3, #1
 8002a58:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a5a:	e02b      	b.n	8002ab4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a70:	4613      	mov	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	4413      	add	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	3318      	adds	r3, #24
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d115      	bne.n	8002aae <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a82:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	da12      	bge.n	8002aae <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	4413      	add	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	3317      	adds	r3, #23
 8002a98:	2201      	movs	r2, #1
 8002a9a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 faca 	bl	8003042 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	791b      	ldrb	r3, [r3, #4]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d3cd      	bcc.n	8002a5c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	695a      	ldr	r2, [r3, #20]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002ace:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f003 fc0f 	bl	80062f8 <USB_ReadInterrupts>
 8002ada:	4603      	mov	r3, r0
 8002adc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ae0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ae4:	d156      	bne.n	8002b94 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aea:	e045      	b.n	8002b78 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b00:	4613      	mov	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d12e      	bne.n	8002b72 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b14:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	da2b      	bge.n	8002b72 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002b26:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d121      	bne.n	8002b72 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b32:	4613      	mov	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4413      	add	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002b40:	2201      	movs	r2, #1
 8002b42:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10a      	bne.n	8002b72 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	69fa      	ldr	r2, [r7, #28]
 8002b66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b6e:	6053      	str	r3, [r2, #4]
            break;
 8002b70:	e008      	b.n	8002b84 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	3301      	adds	r3, #1
 8002b76:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	791b      	ldrb	r3, [r3, #4]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d3b3      	bcc.n	8002aec <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695a      	ldr	r2, [r3, #20]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002b92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f003 fbad 	bl	80062f8 <USB_ReadInterrupts>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ba8:	d10a      	bne.n	8002bc0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f005 fff0 	bl	8008b90 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695a      	ldr	r2, [r3, #20]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002bbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f003 fb97 	bl	80062f8 <USB_ReadInterrupts>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d115      	bne.n	8002c00 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d002      	beq.n	8002bec <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f005 ffe0 	bl	8008bac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6859      	ldr	r1, [r3, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	605a      	str	r2, [r3, #4]
 8002bfc:	e000      	b.n	8002c00 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002bfe:	bf00      	nop
    }
  }
}
 8002c00:	3734      	adds	r7, #52	@ 0x34
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd90      	pop	{r4, r7, pc}

08002c06 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_PCD_SetAddress+0x1a>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e012      	b.n	8002c46 <HAL_PCD_SetAddress+0x40>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	78fa      	ldrb	r2, [r7, #3]
 8002c2c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	78fa      	ldrb	r2, [r7, #3]
 8002c34:	4611      	mov	r1, r2
 8002c36:	4618      	mov	r0, r3
 8002c38:	f003 faf6 	bl	8006228 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b084      	sub	sp, #16
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
 8002c56:	4608      	mov	r0, r1
 8002c58:	4611      	mov	r1, r2
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	70fb      	strb	r3, [r7, #3]
 8002c60:	460b      	mov	r3, r1
 8002c62:	803b      	strh	r3, [r7, #0]
 8002c64:	4613      	mov	r3, r2
 8002c66:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	da0f      	bge.n	8002c94 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	f003 020f 	and.w	r2, r3, #15
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4413      	add	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	3310      	adds	r3, #16
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	4413      	add	r3, r2
 8002c88:	3304      	adds	r3, #4
 8002c8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	705a      	strb	r2, [r3, #1]
 8002c92:	e00f      	b.n	8002cb4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c94:	78fb      	ldrb	r3, [r7, #3]
 8002c96:	f003 020f 	and.w	r2, r3, #15
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	4413      	add	r3, r2
 8002caa:	3304      	adds	r3, #4
 8002cac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002cb4:	78fb      	ldrb	r3, [r7, #3]
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002cc0:	883b      	ldrh	r3, [r7, #0]
 8002cc2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	78ba      	ldrb	r2, [r7, #2]
 8002cce:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	785b      	ldrb	r3, [r3, #1]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d004      	beq.n	8002ce2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ce2:	78bb      	ldrb	r3, [r7, #2]
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d102      	bne.n	8002cee <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_PCD_EP_Open+0xae>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e00e      	b.n	8002d1a <HAL_PCD_EP_Open+0xcc>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68f9      	ldr	r1, [r7, #12]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f002 fc76 	bl	80055fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002d18:	7afb      	ldrb	r3, [r7, #11]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b084      	sub	sp, #16
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	da0f      	bge.n	8002d56 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	f003 020f 	and.w	r2, r3, #15
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	3310      	adds	r3, #16
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	4413      	add	r3, r2
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2201      	movs	r2, #1
 8002d52:	705a      	strb	r2, [r3, #1]
 8002d54:	e00f      	b.n	8002d76 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d56:	78fb      	ldrb	r3, [r7, #3]
 8002d58:	f003 020f 	and.w	r2, r3, #15
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4413      	add	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	f003 030f 	and.w	r3, r3, #15
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_PCD_EP_Close+0x6e>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e00e      	b.n	8002dae <HAL_PCD_EP_Close+0x8c>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68f9      	ldr	r1, [r7, #12]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f002 fcb4 	bl	800570c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b086      	sub	sp, #24
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	60f8      	str	r0, [r7, #12]
 8002dbe:	607a      	str	r2, [r7, #4]
 8002dc0:	603b      	str	r3, [r7, #0]
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dc6:	7afb      	ldrb	r3, [r7, #11]
 8002dc8:	f003 020f 	and.w	r2, r3, #15
 8002dcc:	4613      	mov	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	4413      	add	r3, r2
 8002ddc:	3304      	adds	r3, #4
 8002dde:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2200      	movs	r2, #0
 8002df0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2200      	movs	r2, #0
 8002df6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002df8:	7afb      	ldrb	r3, [r7, #11]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	799b      	ldrb	r3, [r3, #6]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d102      	bne.n	8002e12 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6818      	ldr	r0, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	799b      	ldrb	r3, [r3, #6]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	6979      	ldr	r1, [r7, #20]
 8002e1e:	f002 fd51 	bl	80058c4 <USB_EPStartXfer>

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	f003 020f 	and.w	r2, r3, #15
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002e4e:	681b      	ldr	r3, [r3, #0]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	607a      	str	r2, [r7, #4]
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e6c:	7afb      	ldrb	r3, [r7, #11]
 8002e6e:	f003 020f 	and.w	r2, r3, #15
 8002e72:	4613      	mov	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	4413      	add	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	3310      	adds	r3, #16
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4413      	add	r3, r2
 8002e80:	3304      	adds	r3, #4
 8002e82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	2200      	movs	r2, #0
 8002e94:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e9c:	7afb      	ldrb	r3, [r7, #11]
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	799b      	ldrb	r3, [r3, #6]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d102      	bne.n	8002eb6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6818      	ldr	r0, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	799b      	ldrb	r3, [r3, #6]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	6979      	ldr	r1, [r7, #20]
 8002ec2:	f002 fcff 	bl	80058c4 <USB_EPStartXfer>

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3718      	adds	r7, #24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002edc:	78fb      	ldrb	r3, [r7, #3]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	7912      	ldrb	r2, [r2, #4]
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d901      	bls.n	8002eee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e04f      	b.n	8002f8e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002eee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	da0f      	bge.n	8002f16 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	f003 020f 	and.w	r2, r3, #15
 8002efc:	4613      	mov	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	4413      	add	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	3310      	adds	r3, #16
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	4413      	add	r3, r2
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2201      	movs	r2, #1
 8002f12:	705a      	strb	r2, [r3, #1]
 8002f14:	e00d      	b.n	8002f32 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	4413      	add	r3, r2
 8002f28:	3304      	adds	r3, #4
 8002f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2201      	movs	r2, #1
 8002f36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f38:	78fb      	ldrb	r3, [r7, #3]
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <HAL_PCD_EP_SetStall+0x82>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e01d      	b.n	8002f8e <HAL_PCD_EP_SetStall+0xbe>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68f9      	ldr	r1, [r7, #12]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f003 f88d 	bl	8006080 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f66:	78fb      	ldrb	r3, [r7, #3]
 8002f68:	f003 030f 	and.w	r3, r3, #15
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d109      	bne.n	8002f84 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6818      	ldr	r0, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	7999      	ldrb	r1, [r3, #6]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f003 fa7e 	bl	8006480 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fa2:	78fb      	ldrb	r3, [r7, #3]
 8002fa4:	f003 030f 	and.w	r3, r3, #15
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	7912      	ldrb	r2, [r2, #4]
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d901      	bls.n	8002fb4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e042      	b.n	800303a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	da0f      	bge.n	8002fdc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	f003 020f 	and.w	r2, r3, #15
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	3310      	adds	r3, #16
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	4413      	add	r3, r2
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	705a      	strb	r2, [r3, #1]
 8002fda:	e00f      	b.n	8002ffc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fdc:	78fb      	ldrb	r3, [r7, #3]
 8002fde:	f003 020f 	and.w	r2, r3, #15
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	f003 030f 	and.w	r3, r3, #15
 8003008:	b2da      	uxtb	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <HAL_PCD_EP_ClrStall+0x86>
 8003018:	2302      	movs	r3, #2
 800301a:	e00e      	b.n	800303a <HAL_PCD_EP_ClrStall+0xa4>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68f9      	ldr	r1, [r7, #12]
 800302a:	4618      	mov	r0, r3
 800302c:	f003 f896 	bl	800615c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b084      	sub	sp, #16
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
 800304a:	460b      	mov	r3, r1
 800304c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800304e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003052:	2b00      	cmp	r3, #0
 8003054:	da0c      	bge.n	8003070 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003056:	78fb      	ldrb	r3, [r7, #3]
 8003058:	f003 020f 	and.w	r2, r3, #15
 800305c:	4613      	mov	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	4413      	add	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	3310      	adds	r3, #16
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	4413      	add	r3, r2
 800306a:	3304      	adds	r3, #4
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	e00c      	b.n	800308a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003070:	78fb      	ldrb	r3, [r7, #3]
 8003072:	f003 020f 	and.w	r2, r3, #15
 8003076:	4613      	mov	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	4413      	add	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	4413      	add	r3, r2
 8003086:	3304      	adds	r3, #4
 8003088:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68f9      	ldr	r1, [r7, #12]
 8003090:	4618      	mov	r0, r3
 8003092:	f002 feb5 	bl	8005e00 <USB_EPStopXfer>
 8003096:	4603      	mov	r3, r0
 8003098:	72fb      	strb	r3, [r7, #11]

  return ret;
 800309a:	7afb      	ldrb	r3, [r7, #11]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08a      	sub	sp, #40	@ 0x28
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	4613      	mov	r3, r2
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	4413      	add	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	3310      	adds	r3, #16
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	4413      	add	r3, r2
 80030c8:	3304      	adds	r3, #4
 80030ca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	695a      	ldr	r2, [r3, #20]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d901      	bls.n	80030dc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e06b      	b.n	80031b4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	691a      	ldr	r2, [r3, #16]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	69fa      	ldr	r2, [r7, #28]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d902      	bls.n	80030f8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	3303      	adds	r3, #3
 80030fc:	089b      	lsrs	r3, r3, #2
 80030fe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003100:	e02a      	b.n	8003158 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	691a      	ldr	r2, [r3, #16]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	69fa      	ldr	r2, [r7, #28]
 8003114:	429a      	cmp	r2, r3
 8003116:	d902      	bls.n	800311e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	3303      	adds	r3, #3
 8003122:	089b      	lsrs	r3, r3, #2
 8003124:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	68d9      	ldr	r1, [r3, #12]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	b2da      	uxtb	r2, r3
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	4603      	mov	r3, r0
 800313a:	6978      	ldr	r0, [r7, #20]
 800313c:	f002 ff0a 	bl	8005f54 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	441a      	add	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	695a      	ldr	r2, [r3, #20]
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	441a      	add	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	015a      	lsls	r2, r3, #5
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	4413      	add	r3, r2
 8003160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	429a      	cmp	r2, r3
 800316c:	d809      	bhi.n	8003182 <PCD_WriteEmptyTxFifo+0xde>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	695a      	ldr	r2, [r3, #20]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003176:	429a      	cmp	r2, r3
 8003178:	d203      	bcs.n	8003182 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1bf      	bne.n	8003102 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	691a      	ldr	r2, [r3, #16]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	429a      	cmp	r2, r3
 800318c:	d811      	bhi.n	80031b2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	2201      	movs	r2, #1
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	43db      	mvns	r3, r3
 80031a8:	6939      	ldr	r1, [r7, #16]
 80031aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80031ae:	4013      	ands	r3, r2
 80031b0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3720      	adds	r7, #32
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	333c      	adds	r3, #60	@ 0x3c
 80031d4:	3304      	adds	r3, #4
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	015a      	lsls	r2, r3, #5
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	4413      	add	r3, r2
 80031e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	799b      	ldrb	r3, [r3, #6]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d17b      	bne.n	80032ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d015      	beq.n	8003228 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	4a61      	ldr	r2, [pc, #388]	@ (8003384 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	f240 80b9 	bls.w	8003378 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 80b3 	beq.w	8003378 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	4413      	add	r3, r2
 800321a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800321e:	461a      	mov	r2, r3
 8003220:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003224:	6093      	str	r3, [r2, #8]
 8003226:	e0a7      	b.n	8003378 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	2b00      	cmp	r3, #0
 8003230:	d009      	beq.n	8003246 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	4413      	add	r3, r2
 800323a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800323e:	461a      	mov	r2, r3
 8003240:	2320      	movs	r3, #32
 8003242:	6093      	str	r3, [r2, #8]
 8003244:	e098      	b.n	8003378 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800324c:	2b00      	cmp	r3, #0
 800324e:	f040 8093 	bne.w	8003378 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	4a4b      	ldr	r2, [pc, #300]	@ (8003384 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d90f      	bls.n	800327a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	015a      	lsls	r2, r3, #5
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	4413      	add	r3, r2
 800326c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003270:	461a      	mov	r2, r3
 8003272:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003276:	6093      	str	r3, [r2, #8]
 8003278:	e07e      	b.n	8003378 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	4613      	mov	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	4413      	add	r3, r2
 800328c:	3304      	adds	r3, #4
 800328e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a1a      	ldr	r2, [r3, #32]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	0159      	lsls	r1, r3, #5
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	440b      	add	r3, r1
 800329c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a6:	1ad2      	subs	r2, r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d114      	bne.n	80032dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d109      	bne.n	80032ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6818      	ldr	r0, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032c4:	461a      	mov	r2, r3
 80032c6:	2101      	movs	r1, #1
 80032c8:	f003 f8da 	bl	8006480 <USB_EP0_OutStart>
 80032cc:	e006      	b.n	80032dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	441a      	add	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	4619      	mov	r1, r3
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f005 fb9a 	bl	8008a1c <HAL_PCD_DataOutStageCallback>
 80032e8:	e046      	b.n	8003378 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	4a26      	ldr	r2, [pc, #152]	@ (8003388 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d124      	bne.n	800333c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00a      	beq.n	8003312 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	015a      	lsls	r2, r3, #5
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	4413      	add	r3, r2
 8003304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003308:	461a      	mov	r2, r3
 800330a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800330e:	6093      	str	r3, [r2, #8]
 8003310:	e032      	b.n	8003378 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	f003 0320 	and.w	r3, r3, #32
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	4413      	add	r3, r2
 8003324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003328:	461a      	mov	r2, r3
 800332a:	2320      	movs	r3, #32
 800332c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	b2db      	uxtb	r3, r3
 8003332:	4619      	mov	r1, r3
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f005 fb71 	bl	8008a1c <HAL_PCD_DataOutStageCallback>
 800333a:	e01d      	b.n	8003378 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d114      	bne.n	800336c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	4613      	mov	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	4413      	add	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d108      	bne.n	800336c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6818      	ldr	r0, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003364:	461a      	mov	r2, r3
 8003366:	2100      	movs	r1, #0
 8003368:	f003 f88a 	bl	8006480 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	b2db      	uxtb	r3, r3
 8003370:	4619      	mov	r1, r3
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f005 fb52 	bl	8008a1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3720      	adds	r7, #32
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	4f54300a 	.word	0x4f54300a
 8003388:	4f54310a 	.word	0x4f54310a

0800338c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	333c      	adds	r3, #60	@ 0x3c
 80033a4:	3304      	adds	r3, #4
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4a15      	ldr	r2, [pc, #84]	@ (8003414 <PCD_EP_OutSetupPacket_int+0x88>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d90e      	bls.n	80033e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d009      	beq.n	80033e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	015a      	lsls	r2, r3, #5
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033d8:	461a      	mov	r2, r3
 80033da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f005 fb09 	bl	80089f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003414 <PCD_EP_OutSetupPacket_int+0x88>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d90c      	bls.n	8003408 <PCD_EP_OutSetupPacket_int+0x7c>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	799b      	ldrb	r3, [r3, #6]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d108      	bne.n	8003408 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003400:	461a      	mov	r2, r3
 8003402:	2101      	movs	r1, #1
 8003404:	f003 f83c 	bl	8006480 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	4f54300a 	.word	0x4f54300a

08003418 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	460b      	mov	r3, r1
 8003422:	70fb      	strb	r3, [r7, #3]
 8003424:	4613      	mov	r3, r2
 8003426:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d107      	bne.n	8003446 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003436:	883b      	ldrh	r3, [r7, #0]
 8003438:	0419      	lsls	r1, r3, #16
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	430a      	orrs	r2, r1
 8003442:	629a      	str	r2, [r3, #40]	@ 0x28
 8003444:	e028      	b.n	8003498 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800344c:	0c1b      	lsrs	r3, r3, #16
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	4413      	add	r3, r2
 8003452:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003454:	2300      	movs	r3, #0
 8003456:	73fb      	strb	r3, [r7, #15]
 8003458:	e00d      	b.n	8003476 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	7bfb      	ldrb	r3, [r7, #15]
 8003460:	3340      	adds	r3, #64	@ 0x40
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	0c1b      	lsrs	r3, r3, #16
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	4413      	add	r3, r2
 800346e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	3301      	adds	r3, #1
 8003474:	73fb      	strb	r3, [r7, #15]
 8003476:	7bfa      	ldrb	r2, [r7, #15]
 8003478:	78fb      	ldrb	r3, [r7, #3]
 800347a:	3b01      	subs	r3, #1
 800347c:	429a      	cmp	r2, r3
 800347e:	d3ec      	bcc.n	800345a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003480:	883b      	ldrh	r3, [r7, #0]
 8003482:	0418      	lsls	r0, r3, #16
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6819      	ldr	r1, [r3, #0]
 8003488:	78fb      	ldrb	r3, [r7, #3]
 800348a:	3b01      	subs	r3, #1
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	4302      	orrs	r2, r0
 8003490:	3340      	adds	r3, #64	@ 0x40
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	460b      	mov	r3, r1
 80034b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	887a      	ldrh	r2, [r7, #2]
 80034b8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e267      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d075      	beq.n	80035ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034fe:	4b88      	ldr	r3, [pc, #544]	@ (8003720 <HAL_RCC_OscConfig+0x240>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	2b04      	cmp	r3, #4
 8003508:	d00c      	beq.n	8003524 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800350a:	4b85      	ldr	r3, [pc, #532]	@ (8003720 <HAL_RCC_OscConfig+0x240>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003512:	2b08      	cmp	r3, #8
 8003514:	d112      	bne.n	800353c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003516:	4b82      	ldr	r3, [pc, #520]	@ (8003720 <HAL_RCC_OscConfig+0x240>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800351e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003522:	d10b      	bne.n	800353c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003524:	4b7e      	ldr	r3, [pc, #504]	@ (8003720 <HAL_RCC_OscConfig+0x240>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d05b      	beq.n	80035e8 <HAL_RCC_OscConfig+0x108>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d157      	bne.n	80035e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e242      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003544:	d106      	bne.n	8003554 <HAL_RCC_OscConfig+0x74>
 8003546:	4b76      	ldr	r3, [pc, #472]	@ (8003720 <HAL_RCC_OscConfig+0x240>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a75      	ldr	r2, [pc, #468]	@ (8003720 <HAL_RCC_OscConfig+0x240>)
 800354c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	e01d      	b.n	8003590 <HAL_RCC_OscConfig+0xb0>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800355c:	d10c      	bne.n	8003578 <HAL_RCC_OscConfig+0x98>
 800355e:	4b70      	ldr	r3, [pc, #448]	@ (8003720 <HAL_RCC_OscConfig+0x240>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a6f      	ldr	r2, [pc, #444]	@ (8003720 <HAL_RCC_OscConfig+0x240>)
 8003564:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	4b6d      	ldr	r3, [pc, #436]	@ (8003720 <HAL_RCC_OscConfig+0x240>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a6c      	ldr	r2, [pc, #432]	@ (8003720 <HAL_RCC_OscConfig+0x240>)
 8003570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	e00b      	b.n	8003590 <HAL_RCC_OscConfig+0xb0>
 8003578:	4b69      	ldr	r3, [pc, #420]	@ (8003720 <HAL_RCC_OscConfig+0x240>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a68      	ldr	r2, [pc, #416]	@ (8003720 <HAL_RCC_OscConfig+0x240>)
 800357e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	4b66      	ldr	r3, [pc, #408]	@ (8003720 <HAL_RCC_OscConfig+0x240>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a65      	ldr	r2, [pc, #404]	@ (8003720 <HAL_RCC_OscConfig+0x240>)
 800358a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800358e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d013      	beq.n	80035c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003598:	f7fe fa8a 	bl	8001ab0 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a0:	f7fe fa86 	bl	8001ab0 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b64      	cmp	r3, #100	@ 0x64
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e207      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b2:	4b5b      	ldr	r3, [pc, #364]	@ (8003720 <HAL_RCC_OscConfig+0x240>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0f0      	beq.n	80035a0 <HAL_RCC_OscConfig+0xc0>
 80035be:	e014      	b.n	80035ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c0:	f7fe fa76 	bl	8001ab0 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c8:	f7fe fa72 	bl	8001ab0 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b64      	cmp	r3, #100	@ 0x64
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e1f3      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035da:	4b51      	ldr	r3, [pc, #324]	@ (8003720 <HAL_RCC_OscConfig+0x240>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0xe8>
 80035e6:	e000      	b.n	80035ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d063      	beq.n	80036be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003720 <HAL_RCC_OscConfig+0x240>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 030c 	and.w	r3, r3, #12
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00b      	beq.n	800361a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003602:	4b47      	ldr	r3, [pc, #284]	@ (8003720 <HAL_RCC_OscConfig+0x240>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800360a:	2b08      	cmp	r3, #8
 800360c:	d11c      	bne.n	8003648 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800360e:	4b44      	ldr	r3, [pc, #272]	@ (8003720 <HAL_RCC_OscConfig+0x240>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d116      	bne.n	8003648 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800361a:	4b41      	ldr	r3, [pc, #260]	@ (8003720 <HAL_RCC_OscConfig+0x240>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d005      	beq.n	8003632 <HAL_RCC_OscConfig+0x152>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d001      	beq.n	8003632 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e1c7      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003632:	4b3b      	ldr	r3, [pc, #236]	@ (8003720 <HAL_RCC_OscConfig+0x240>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4937      	ldr	r1, [pc, #220]	@ (8003720 <HAL_RCC_OscConfig+0x240>)
 8003642:	4313      	orrs	r3, r2
 8003644:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003646:	e03a      	b.n	80036be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d020      	beq.n	8003692 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003650:	4b34      	ldr	r3, [pc, #208]	@ (8003724 <HAL_RCC_OscConfig+0x244>)
 8003652:	2201      	movs	r2, #1
 8003654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003656:	f7fe fa2b 	bl	8001ab0 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800365e:	f7fe fa27 	bl	8001ab0 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e1a8      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003670:	4b2b      	ldr	r3, [pc, #172]	@ (8003720 <HAL_RCC_OscConfig+0x240>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0f0      	beq.n	800365e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367c:	4b28      	ldr	r3, [pc, #160]	@ (8003720 <HAL_RCC_OscConfig+0x240>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	4925      	ldr	r1, [pc, #148]	@ (8003720 <HAL_RCC_OscConfig+0x240>)
 800368c:	4313      	orrs	r3, r2
 800368e:	600b      	str	r3, [r1, #0]
 8003690:	e015      	b.n	80036be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003692:	4b24      	ldr	r3, [pc, #144]	@ (8003724 <HAL_RCC_OscConfig+0x244>)
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003698:	f7fe fa0a 	bl	8001ab0 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036a0:	f7fe fa06 	bl	8001ab0 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e187      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003720 <HAL_RCC_OscConfig+0x240>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f0      	bne.n	80036a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d036      	beq.n	8003738 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d016      	beq.n	8003700 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036d2:	4b15      	ldr	r3, [pc, #84]	@ (8003728 <HAL_RCC_OscConfig+0x248>)
 80036d4:	2201      	movs	r2, #1
 80036d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d8:	f7fe f9ea 	bl	8001ab0 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036e0:	f7fe f9e6 	bl	8001ab0 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e167      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003720 <HAL_RCC_OscConfig+0x240>)
 80036f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0f0      	beq.n	80036e0 <HAL_RCC_OscConfig+0x200>
 80036fe:	e01b      	b.n	8003738 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003700:	4b09      	ldr	r3, [pc, #36]	@ (8003728 <HAL_RCC_OscConfig+0x248>)
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003706:	f7fe f9d3 	bl	8001ab0 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800370c:	e00e      	b.n	800372c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800370e:	f7fe f9cf 	bl	8001ab0 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d907      	bls.n	800372c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e150      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
 8003720:	40023800 	.word	0x40023800
 8003724:	42470000 	.word	0x42470000
 8003728:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800372c:	4b88      	ldr	r3, [pc, #544]	@ (8003950 <HAL_RCC_OscConfig+0x470>)
 800372e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1ea      	bne.n	800370e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 8097 	beq.w	8003874 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003746:	2300      	movs	r3, #0
 8003748:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800374a:	4b81      	ldr	r3, [pc, #516]	@ (8003950 <HAL_RCC_OscConfig+0x470>)
 800374c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10f      	bne.n	8003776 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003756:	2300      	movs	r3, #0
 8003758:	60bb      	str	r3, [r7, #8]
 800375a:	4b7d      	ldr	r3, [pc, #500]	@ (8003950 <HAL_RCC_OscConfig+0x470>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375e:	4a7c      	ldr	r2, [pc, #496]	@ (8003950 <HAL_RCC_OscConfig+0x470>)
 8003760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003764:	6413      	str	r3, [r2, #64]	@ 0x40
 8003766:	4b7a      	ldr	r3, [pc, #488]	@ (8003950 <HAL_RCC_OscConfig+0x470>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800376e:	60bb      	str	r3, [r7, #8]
 8003770:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003772:	2301      	movs	r3, #1
 8003774:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003776:	4b77      	ldr	r3, [pc, #476]	@ (8003954 <HAL_RCC_OscConfig+0x474>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377e:	2b00      	cmp	r3, #0
 8003780:	d118      	bne.n	80037b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003782:	4b74      	ldr	r3, [pc, #464]	@ (8003954 <HAL_RCC_OscConfig+0x474>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a73      	ldr	r2, [pc, #460]	@ (8003954 <HAL_RCC_OscConfig+0x474>)
 8003788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800378c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800378e:	f7fe f98f 	bl	8001ab0 <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003796:	f7fe f98b 	bl	8001ab0 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e10c      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003954 <HAL_RCC_OscConfig+0x474>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0f0      	beq.n	8003796 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d106      	bne.n	80037ca <HAL_RCC_OscConfig+0x2ea>
 80037bc:	4b64      	ldr	r3, [pc, #400]	@ (8003950 <HAL_RCC_OscConfig+0x470>)
 80037be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c0:	4a63      	ldr	r2, [pc, #396]	@ (8003950 <HAL_RCC_OscConfig+0x470>)
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80037c8:	e01c      	b.n	8003804 <HAL_RCC_OscConfig+0x324>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b05      	cmp	r3, #5
 80037d0:	d10c      	bne.n	80037ec <HAL_RCC_OscConfig+0x30c>
 80037d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003950 <HAL_RCC_OscConfig+0x470>)
 80037d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d6:	4a5e      	ldr	r2, [pc, #376]	@ (8003950 <HAL_RCC_OscConfig+0x470>)
 80037d8:	f043 0304 	orr.w	r3, r3, #4
 80037dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80037de:	4b5c      	ldr	r3, [pc, #368]	@ (8003950 <HAL_RCC_OscConfig+0x470>)
 80037e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003950 <HAL_RCC_OscConfig+0x470>)
 80037e4:	f043 0301 	orr.w	r3, r3, #1
 80037e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ea:	e00b      	b.n	8003804 <HAL_RCC_OscConfig+0x324>
 80037ec:	4b58      	ldr	r3, [pc, #352]	@ (8003950 <HAL_RCC_OscConfig+0x470>)
 80037ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f0:	4a57      	ldr	r2, [pc, #348]	@ (8003950 <HAL_RCC_OscConfig+0x470>)
 80037f2:	f023 0301 	bic.w	r3, r3, #1
 80037f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80037f8:	4b55      	ldr	r3, [pc, #340]	@ (8003950 <HAL_RCC_OscConfig+0x470>)
 80037fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037fc:	4a54      	ldr	r2, [pc, #336]	@ (8003950 <HAL_RCC_OscConfig+0x470>)
 80037fe:	f023 0304 	bic.w	r3, r3, #4
 8003802:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d015      	beq.n	8003838 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380c:	f7fe f950 	bl	8001ab0 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003812:	e00a      	b.n	800382a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003814:	f7fe f94c 	bl	8001ab0 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003822:	4293      	cmp	r3, r2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e0cb      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382a:	4b49      	ldr	r3, [pc, #292]	@ (8003950 <HAL_RCC_OscConfig+0x470>)
 800382c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0ee      	beq.n	8003814 <HAL_RCC_OscConfig+0x334>
 8003836:	e014      	b.n	8003862 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003838:	f7fe f93a 	bl	8001ab0 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800383e:	e00a      	b.n	8003856 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003840:	f7fe f936 	bl	8001ab0 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800384e:	4293      	cmp	r3, r2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e0b5      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003856:	4b3e      	ldr	r3, [pc, #248]	@ (8003950 <HAL_RCC_OscConfig+0x470>)
 8003858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1ee      	bne.n	8003840 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003862:	7dfb      	ldrb	r3, [r7, #23]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d105      	bne.n	8003874 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003868:	4b39      	ldr	r3, [pc, #228]	@ (8003950 <HAL_RCC_OscConfig+0x470>)
 800386a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386c:	4a38      	ldr	r2, [pc, #224]	@ (8003950 <HAL_RCC_OscConfig+0x470>)
 800386e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003872:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 80a1 	beq.w	80039c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800387e:	4b34      	ldr	r3, [pc, #208]	@ (8003950 <HAL_RCC_OscConfig+0x470>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 030c 	and.w	r3, r3, #12
 8003886:	2b08      	cmp	r3, #8
 8003888:	d05c      	beq.n	8003944 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d141      	bne.n	8003916 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003892:	4b31      	ldr	r3, [pc, #196]	@ (8003958 <HAL_RCC_OscConfig+0x478>)
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003898:	f7fe f90a 	bl	8001ab0 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a0:	f7fe f906 	bl	8001ab0 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e087      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b2:	4b27      	ldr	r3, [pc, #156]	@ (8003950 <HAL_RCC_OscConfig+0x470>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69da      	ldr	r2, [r3, #28]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038cc:	019b      	lsls	r3, r3, #6
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d4:	085b      	lsrs	r3, r3, #1
 80038d6:	3b01      	subs	r3, #1
 80038d8:	041b      	lsls	r3, r3, #16
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e0:	061b      	lsls	r3, r3, #24
 80038e2:	491b      	ldr	r1, [pc, #108]	@ (8003950 <HAL_RCC_OscConfig+0x470>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003958 <HAL_RCC_OscConfig+0x478>)
 80038ea:	2201      	movs	r2, #1
 80038ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ee:	f7fe f8df 	bl	8001ab0 <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f4:	e008      	b.n	8003908 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f6:	f7fe f8db 	bl	8001ab0 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e05c      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003908:	4b11      	ldr	r3, [pc, #68]	@ (8003950 <HAL_RCC_OscConfig+0x470>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0f0      	beq.n	80038f6 <HAL_RCC_OscConfig+0x416>
 8003914:	e054      	b.n	80039c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003916:	4b10      	ldr	r3, [pc, #64]	@ (8003958 <HAL_RCC_OscConfig+0x478>)
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391c:	f7fe f8c8 	bl	8001ab0 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003924:	f7fe f8c4 	bl	8001ab0 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e045      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003936:	4b06      	ldr	r3, [pc, #24]	@ (8003950 <HAL_RCC_OscConfig+0x470>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f0      	bne.n	8003924 <HAL_RCC_OscConfig+0x444>
 8003942:	e03d      	b.n	80039c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d107      	bne.n	800395c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e038      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
 8003950:	40023800 	.word	0x40023800
 8003954:	40007000 	.word	0x40007000
 8003958:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800395c:	4b1b      	ldr	r3, [pc, #108]	@ (80039cc <HAL_RCC_OscConfig+0x4ec>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d028      	beq.n	80039bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003974:	429a      	cmp	r2, r3
 8003976:	d121      	bne.n	80039bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003982:	429a      	cmp	r2, r3
 8003984:	d11a      	bne.n	80039bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800398c:	4013      	ands	r3, r2
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003992:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003994:	4293      	cmp	r3, r2
 8003996:	d111      	bne.n	80039bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a2:	085b      	lsrs	r3, r3, #1
 80039a4:	3b01      	subs	r3, #1
 80039a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d107      	bne.n	80039bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d001      	beq.n	80039c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e000      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40023800 	.word	0x40023800

080039d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e0cc      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039e4:	4b68      	ldr	r3, [pc, #416]	@ (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d90c      	bls.n	8003a0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f2:	4b65      	ldr	r3, [pc, #404]	@ (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fa:	4b63      	ldr	r3, [pc, #396]	@ (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d001      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e0b8      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d020      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a24:	4b59      	ldr	r3, [pc, #356]	@ (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	4a58      	ldr	r2, [pc, #352]	@ (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0308 	and.w	r3, r3, #8
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a3c:	4b53      	ldr	r3, [pc, #332]	@ (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	4a52      	ldr	r2, [pc, #328]	@ (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a48:	4b50      	ldr	r3, [pc, #320]	@ (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	494d      	ldr	r1, [pc, #308]	@ (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d044      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d107      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6e:	4b47      	ldr	r3, [pc, #284]	@ (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d119      	bne.n	8003aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e07f      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d003      	beq.n	8003a8e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a8a:	2b03      	cmp	r3, #3
 8003a8c:	d107      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a8e:	4b3f      	ldr	r3, [pc, #252]	@ (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d109      	bne.n	8003aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e06f      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e067      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aae:	4b37      	ldr	r3, [pc, #220]	@ (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f023 0203 	bic.w	r2, r3, #3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	4934      	ldr	r1, [pc, #208]	@ (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ac0:	f7fd fff6 	bl	8001ab0 <HAL_GetTick>
 8003ac4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac6:	e00a      	b.n	8003ade <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac8:	f7fd fff2 	bl	8001ab0 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e04f      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ade:	4b2b      	ldr	r3, [pc, #172]	@ (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 020c 	and.w	r2, r3, #12
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d1eb      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003af0:	4b25      	ldr	r3, [pc, #148]	@ (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d20c      	bcs.n	8003b18 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afe:	4b22      	ldr	r3, [pc, #136]	@ (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b06:	4b20      	ldr	r3, [pc, #128]	@ (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0307 	and.w	r3, r3, #7
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d001      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e032      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d008      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b24:	4b19      	ldr	r3, [pc, #100]	@ (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	4916      	ldr	r1, [pc, #88]	@ (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d009      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b42:	4b12      	ldr	r3, [pc, #72]	@ (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	490e      	ldr	r1, [pc, #56]	@ (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b56:	f000 f821 	bl	8003b9c <HAL_RCC_GetSysClockFreq>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	091b      	lsrs	r3, r3, #4
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	490a      	ldr	r1, [pc, #40]	@ (8003b90 <HAL_RCC_ClockConfig+0x1c0>)
 8003b68:	5ccb      	ldrb	r3, [r1, r3]
 8003b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b6e:	4a09      	ldr	r2, [pc, #36]	@ (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b72:	4b09      	ldr	r3, [pc, #36]	@ (8003b98 <HAL_RCC_ClockConfig+0x1c8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fd ff56 	bl	8001a28 <HAL_InitTick>

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40023c00 	.word	0x40023c00
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	0800bc58 	.word	0x0800bc58
 8003b94:	20000000 	.word	0x20000000
 8003b98:	20000004 	.word	0x20000004

08003b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ba0:	b094      	sub	sp, #80	@ 0x50
 8003ba2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bb4:	4b79      	ldr	r3, [pc, #484]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 030c 	and.w	r3, r3, #12
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d00d      	beq.n	8003bdc <HAL_RCC_GetSysClockFreq+0x40>
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	f200 80e1 	bhi.w	8003d88 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x34>
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d003      	beq.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bce:	e0db      	b.n	8003d88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bd0:	4b73      	ldr	r3, [pc, #460]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bd4:	e0db      	b.n	8003d8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bd6:	4b73      	ldr	r3, [pc, #460]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bda:	e0d8      	b.n	8003d8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bdc:	4b6f      	ldr	r3, [pc, #444]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003be4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003be6:	4b6d      	ldr	r3, [pc, #436]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d063      	beq.n	8003cba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bf2:	4b6a      	ldr	r3, [pc, #424]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	099b      	lsrs	r3, r3, #6
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bfc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c04:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c06:	2300      	movs	r3, #0
 8003c08:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c0e:	4622      	mov	r2, r4
 8003c10:	462b      	mov	r3, r5
 8003c12:	f04f 0000 	mov.w	r0, #0
 8003c16:	f04f 0100 	mov.w	r1, #0
 8003c1a:	0159      	lsls	r1, r3, #5
 8003c1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c20:	0150      	lsls	r0, r2, #5
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	4621      	mov	r1, r4
 8003c28:	1a51      	subs	r1, r2, r1
 8003c2a:	6139      	str	r1, [r7, #16]
 8003c2c:	4629      	mov	r1, r5
 8003c2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c40:	4659      	mov	r1, fp
 8003c42:	018b      	lsls	r3, r1, #6
 8003c44:	4651      	mov	r1, sl
 8003c46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c4a:	4651      	mov	r1, sl
 8003c4c:	018a      	lsls	r2, r1, #6
 8003c4e:	4651      	mov	r1, sl
 8003c50:	ebb2 0801 	subs.w	r8, r2, r1
 8003c54:	4659      	mov	r1, fp
 8003c56:	eb63 0901 	sbc.w	r9, r3, r1
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	f04f 0300 	mov.w	r3, #0
 8003c62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c6e:	4690      	mov	r8, r2
 8003c70:	4699      	mov	r9, r3
 8003c72:	4623      	mov	r3, r4
 8003c74:	eb18 0303 	adds.w	r3, r8, r3
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	462b      	mov	r3, r5
 8003c7c:	eb49 0303 	adc.w	r3, r9, r3
 8003c80:	60fb      	str	r3, [r7, #12]
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	f04f 0300 	mov.w	r3, #0
 8003c8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c8e:	4629      	mov	r1, r5
 8003c90:	024b      	lsls	r3, r1, #9
 8003c92:	4621      	mov	r1, r4
 8003c94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c98:	4621      	mov	r1, r4
 8003c9a:	024a      	lsls	r2, r1, #9
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ca6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ca8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cac:	f7fc ff84 	bl	8000bb8 <__aeabi_uldivmod>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cb8:	e058      	b.n	8003d6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cba:	4b38      	ldr	r3, [pc, #224]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	099b      	lsrs	r3, r3, #6
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	4611      	mov	r1, r2
 8003cc6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cca:	623b      	str	r3, [r7, #32]
 8003ccc:	2300      	movs	r3, #0
 8003cce:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cd4:	4642      	mov	r2, r8
 8003cd6:	464b      	mov	r3, r9
 8003cd8:	f04f 0000 	mov.w	r0, #0
 8003cdc:	f04f 0100 	mov.w	r1, #0
 8003ce0:	0159      	lsls	r1, r3, #5
 8003ce2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ce6:	0150      	lsls	r0, r2, #5
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4641      	mov	r1, r8
 8003cee:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cf2:	4649      	mov	r1, r9
 8003cf4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d0c:	ebb2 040a 	subs.w	r4, r2, sl
 8003d10:	eb63 050b 	sbc.w	r5, r3, fp
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	f04f 0300 	mov.w	r3, #0
 8003d1c:	00eb      	lsls	r3, r5, #3
 8003d1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d22:	00e2      	lsls	r2, r4, #3
 8003d24:	4614      	mov	r4, r2
 8003d26:	461d      	mov	r5, r3
 8003d28:	4643      	mov	r3, r8
 8003d2a:	18e3      	adds	r3, r4, r3
 8003d2c:	603b      	str	r3, [r7, #0]
 8003d2e:	464b      	mov	r3, r9
 8003d30:	eb45 0303 	adc.w	r3, r5, r3
 8003d34:	607b      	str	r3, [r7, #4]
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	f04f 0300 	mov.w	r3, #0
 8003d3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d42:	4629      	mov	r1, r5
 8003d44:	028b      	lsls	r3, r1, #10
 8003d46:	4621      	mov	r1, r4
 8003d48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d4c:	4621      	mov	r1, r4
 8003d4e:	028a      	lsls	r2, r1, #10
 8003d50:	4610      	mov	r0, r2
 8003d52:	4619      	mov	r1, r3
 8003d54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d56:	2200      	movs	r2, #0
 8003d58:	61bb      	str	r3, [r7, #24]
 8003d5a:	61fa      	str	r2, [r7, #28]
 8003d5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d60:	f7fc ff2a 	bl	8000bb8 <__aeabi_uldivmod>
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	4613      	mov	r3, r2
 8003d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	0c1b      	lsrs	r3, r3, #16
 8003d72:	f003 0303 	and.w	r3, r3, #3
 8003d76:	3301      	adds	r3, #1
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003d7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d86:	e002      	b.n	8003d8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d88:	4b05      	ldr	r3, [pc, #20]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3750      	adds	r7, #80	@ 0x50
 8003d94:	46bd      	mov	sp, r7
 8003d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d9a:	bf00      	nop
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	00f42400 	.word	0x00f42400
 8003da4:	007a1200 	.word	0x007a1200

08003da8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dac:	4b03      	ldr	r3, [pc, #12]	@ (8003dbc <HAL_RCC_GetHCLKFreq+0x14>)
 8003dae:	681b      	ldr	r3, [r3, #0]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	20000000 	.word	0x20000000

08003dc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e041      	b.n	8003e56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d106      	bne.n	8003dec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7fd fbec 	bl	80015c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4610      	mov	r0, r2
 8003e00:	f000 fd2c 	bl	800485c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e041      	b.n	8003ef4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d106      	bne.n	8003e8a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f839 	bl	8003efc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3304      	adds	r3, #4
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	f000 fcdd 	bl	800485c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d109      	bne.n	8003f34 <HAL_TIM_PWM_Start+0x24>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	bf14      	ite	ne
 8003f2c:	2301      	movne	r3, #1
 8003f2e:	2300      	moveq	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	e022      	b.n	8003f7a <HAL_TIM_PWM_Start+0x6a>
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d109      	bne.n	8003f4e <HAL_TIM_PWM_Start+0x3e>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	bf14      	ite	ne
 8003f46:	2301      	movne	r3, #1
 8003f48:	2300      	moveq	r3, #0
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	e015      	b.n	8003f7a <HAL_TIM_PWM_Start+0x6a>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d109      	bne.n	8003f68 <HAL_TIM_PWM_Start+0x58>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	bf14      	ite	ne
 8003f60:	2301      	movne	r3, #1
 8003f62:	2300      	moveq	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	e008      	b.n	8003f7a <HAL_TIM_PWM_Start+0x6a>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	bf14      	ite	ne
 8003f74:	2301      	movne	r3, #1
 8003f76:	2300      	moveq	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e068      	b.n	8004054 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d104      	bne.n	8003f92 <HAL_TIM_PWM_Start+0x82>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f90:	e013      	b.n	8003fba <HAL_TIM_PWM_Start+0xaa>
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	d104      	bne.n	8003fa2 <HAL_TIM_PWM_Start+0x92>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fa0:	e00b      	b.n	8003fba <HAL_TIM_PWM_Start+0xaa>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d104      	bne.n	8003fb2 <HAL_TIM_PWM_Start+0xa2>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fb0:	e003      	b.n	8003fba <HAL_TIM_PWM_Start+0xaa>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	6839      	ldr	r1, [r7, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 fefc 	bl	8004dc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a23      	ldr	r2, [pc, #140]	@ (800405c <HAL_TIM_PWM_Start+0x14c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d107      	bne.n	8003fe2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fe0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a1d      	ldr	r2, [pc, #116]	@ (800405c <HAL_TIM_PWM_Start+0x14c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d018      	beq.n	800401e <HAL_TIM_PWM_Start+0x10e>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ff4:	d013      	beq.n	800401e <HAL_TIM_PWM_Start+0x10e>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a19      	ldr	r2, [pc, #100]	@ (8004060 <HAL_TIM_PWM_Start+0x150>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d00e      	beq.n	800401e <HAL_TIM_PWM_Start+0x10e>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a17      	ldr	r2, [pc, #92]	@ (8004064 <HAL_TIM_PWM_Start+0x154>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d009      	beq.n	800401e <HAL_TIM_PWM_Start+0x10e>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a16      	ldr	r2, [pc, #88]	@ (8004068 <HAL_TIM_PWM_Start+0x158>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d004      	beq.n	800401e <HAL_TIM_PWM_Start+0x10e>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a14      	ldr	r2, [pc, #80]	@ (800406c <HAL_TIM_PWM_Start+0x15c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d111      	bne.n	8004042 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2b06      	cmp	r3, #6
 800402e:	d010      	beq.n	8004052 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0201 	orr.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004040:	e007      	b.n	8004052 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f042 0201 	orr.w	r2, r2, #1
 8004050:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	40010000 	.word	0x40010000
 8004060:	40000400 	.word	0x40000400
 8004064:	40000800 	.word	0x40000800
 8004068:	40000c00 	.word	0x40000c00
 800406c:	40014000 	.word	0x40014000

08004070 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e097      	b.n	80041b4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d106      	bne.n	800409e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7fd fa09 	bl	80014b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2202      	movs	r2, #2
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6812      	ldr	r2, [r2, #0]
 80040b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040b4:	f023 0307 	bic.w	r3, r3, #7
 80040b8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3304      	adds	r3, #4
 80040c2:	4619      	mov	r1, r3
 80040c4:	4610      	mov	r0, r2
 80040c6:	f000 fbc9 	bl	800485c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040f2:	f023 0303 	bic.w	r3, r3, #3
 80040f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	021b      	lsls	r3, r3, #8
 8004102:	4313      	orrs	r3, r2
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4313      	orrs	r3, r2
 8004108:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004110:	f023 030c 	bic.w	r3, r3, #12
 8004114:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800411c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004120:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	021b      	lsls	r3, r3, #8
 800412c:	4313      	orrs	r3, r2
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4313      	orrs	r3, r2
 8004132:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	011a      	lsls	r2, r3, #4
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	031b      	lsls	r3, r3, #12
 8004140:	4313      	orrs	r3, r2
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4313      	orrs	r3, r2
 8004146:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800414e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004156:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	4313      	orrs	r3, r2
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041cc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80041d4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041dc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80041e4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d110      	bne.n	800420e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041ec:	7bfb      	ldrb	r3, [r7, #15]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d102      	bne.n	80041f8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80041f2:	7b7b      	ldrb	r3, [r7, #13]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d001      	beq.n	80041fc <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e089      	b.n	8004310 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800420c:	e031      	b.n	8004272 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b04      	cmp	r3, #4
 8004212:	d110      	bne.n	8004236 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004214:	7bbb      	ldrb	r3, [r7, #14]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d102      	bne.n	8004220 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800421a:	7b3b      	ldrb	r3, [r7, #12]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d001      	beq.n	8004224 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e075      	b.n	8004310 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004234:	e01d      	b.n	8004272 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004236:	7bfb      	ldrb	r3, [r7, #15]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d108      	bne.n	800424e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800423c:	7bbb      	ldrb	r3, [r7, #14]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d105      	bne.n	800424e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004242:	7b7b      	ldrb	r3, [r7, #13]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d102      	bne.n	800424e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004248:	7b3b      	ldrb	r3, [r7, #12]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d001      	beq.n	8004252 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e05e      	b.n	8004310 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2202      	movs	r2, #2
 8004256:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2202      	movs	r2, #2
 800425e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2202      	movs	r2, #2
 8004266:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2202      	movs	r2, #2
 800426e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2b04      	cmp	r3, #4
 800427c:	d010      	beq.n	80042a0 <HAL_TIM_Encoder_Start_IT+0xe4>
 800427e:	e01f      	b.n	80042c0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2201      	movs	r2, #1
 8004286:	2100      	movs	r1, #0
 8004288:	4618      	mov	r0, r3
 800428a:	f000 fd99 	bl	8004dc0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 0202 	orr.w	r2, r2, #2
 800429c:	60da      	str	r2, [r3, #12]
      break;
 800429e:	e02e      	b.n	80042fe <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2201      	movs	r2, #1
 80042a6:	2104      	movs	r1, #4
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 fd89 	bl	8004dc0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68da      	ldr	r2, [r3, #12]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 0204 	orr.w	r2, r2, #4
 80042bc:	60da      	str	r2, [r3, #12]
      break;
 80042be:	e01e      	b.n	80042fe <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2201      	movs	r2, #1
 80042c6:	2100      	movs	r1, #0
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 fd79 	bl	8004dc0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2201      	movs	r2, #1
 80042d4:	2104      	movs	r1, #4
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 fd72 	bl	8004dc0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0202 	orr.w	r2, r2, #2
 80042ea:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f042 0204 	orr.w	r2, r2, #4
 80042fa:	60da      	str	r2, [r3, #12]
      break;
 80042fc:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f042 0201 	orr.w	r2, r2, #1
 800430c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d020      	beq.n	800437c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d01b      	beq.n	800437c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f06f 0202 	mvn.w	r2, #2
 800434c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fc fda0 	bl	8000ea8 <HAL_TIM_IC_CaptureCallback>
 8004368:	e005      	b.n	8004376 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fa57 	bl	800481e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 fa5e 	bl	8004832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	2b00      	cmp	r3, #0
 8004384:	d020      	beq.n	80043c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	d01b      	beq.n	80043c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f06f 0204 	mvn.w	r2, #4
 8004398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2202      	movs	r2, #2
 800439e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fc fd7a 	bl	8000ea8 <HAL_TIM_IC_CaptureCallback>
 80043b4:	e005      	b.n	80043c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 fa31 	bl	800481e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 fa38 	bl	8004832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f003 0308 	and.w	r3, r3, #8
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d020      	beq.n	8004414 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d01b      	beq.n	8004414 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0208 	mvn.w	r2, #8
 80043e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2204      	movs	r2, #4
 80043ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fc fd54 	bl	8000ea8 <HAL_TIM_IC_CaptureCallback>
 8004400:	e005      	b.n	800440e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fa0b 	bl	800481e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 fa12 	bl	8004832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f003 0310 	and.w	r3, r3, #16
 800441a:	2b00      	cmp	r3, #0
 800441c:	d020      	beq.n	8004460 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	2b00      	cmp	r3, #0
 8004426:	d01b      	beq.n	8004460 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0210 	mvn.w	r2, #16
 8004430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2208      	movs	r2, #8
 8004436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7fc fd2e 	bl	8000ea8 <HAL_TIM_IC_CaptureCallback>
 800444c:	e005      	b.n	800445a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f9e5 	bl	800481e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 f9ec 	bl	8004832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00c      	beq.n	8004484 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d007      	beq.n	8004484 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0201 	mvn.w	r2, #1
 800447c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f9c3 	bl	800480a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00c      	beq.n	80044a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004494:	2b00      	cmp	r3, #0
 8004496:	d007      	beq.n	80044a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80044a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fd2a 	bl	8004efc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00c      	beq.n	80044cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d007      	beq.n	80044cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80044c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f9bd 	bl	8004846 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f003 0320 	and.w	r3, r3, #32
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00c      	beq.n	80044f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f003 0320 	and.w	r3, r3, #32
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d007      	beq.n	80044f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f06f 0220 	mvn.w	r2, #32
 80044e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fcfc 	bl	8004ee8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044f0:	bf00      	nop
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004504:	2300      	movs	r3, #0
 8004506:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800450e:	2b01      	cmp	r3, #1
 8004510:	d101      	bne.n	8004516 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004512:	2302      	movs	r3, #2
 8004514:	e0ae      	b.n	8004674 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b0c      	cmp	r3, #12
 8004522:	f200 809f 	bhi.w	8004664 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004526:	a201      	add	r2, pc, #4	@ (adr r2, 800452c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452c:	08004561 	.word	0x08004561
 8004530:	08004665 	.word	0x08004665
 8004534:	08004665 	.word	0x08004665
 8004538:	08004665 	.word	0x08004665
 800453c:	080045a1 	.word	0x080045a1
 8004540:	08004665 	.word	0x08004665
 8004544:	08004665 	.word	0x08004665
 8004548:	08004665 	.word	0x08004665
 800454c:	080045e3 	.word	0x080045e3
 8004550:	08004665 	.word	0x08004665
 8004554:	08004665 	.word	0x08004665
 8004558:	08004665 	.word	0x08004665
 800455c:	08004623 	.word	0x08004623
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68b9      	ldr	r1, [r7, #8]
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fa04 	bl	8004974 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699a      	ldr	r2, [r3, #24]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0208 	orr.w	r2, r2, #8
 800457a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699a      	ldr	r2, [r3, #24]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0204 	bic.w	r2, r2, #4
 800458a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6999      	ldr	r1, [r3, #24]
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	691a      	ldr	r2, [r3, #16]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	619a      	str	r2, [r3, #24]
      break;
 800459e:	e064      	b.n	800466a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68b9      	ldr	r1, [r7, #8]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fa4a 	bl	8004a40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699a      	ldr	r2, [r3, #24]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699a      	ldr	r2, [r3, #24]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6999      	ldr	r1, [r3, #24]
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	021a      	lsls	r2, r3, #8
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	619a      	str	r2, [r3, #24]
      break;
 80045e0:	e043      	b.n	800466a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 fa95 	bl	8004b18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	69da      	ldr	r2, [r3, #28]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f042 0208 	orr.w	r2, r2, #8
 80045fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	69da      	ldr	r2, [r3, #28]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0204 	bic.w	r2, r2, #4
 800460c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	69d9      	ldr	r1, [r3, #28]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	61da      	str	r2, [r3, #28]
      break;
 8004620:	e023      	b.n	800466a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68b9      	ldr	r1, [r7, #8]
 8004628:	4618      	mov	r0, r3
 800462a:	f000 fadf 	bl	8004bec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	69da      	ldr	r2, [r3, #28]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800463c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	69da      	ldr	r2, [r3, #28]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800464c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69d9      	ldr	r1, [r3, #28]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	021a      	lsls	r2, r3, #8
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	61da      	str	r2, [r3, #28]
      break;
 8004662:	e002      	b.n	800466a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	75fb      	strb	r3, [r7, #23]
      break;
 8004668:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004672:	7dfb      	ldrb	r3, [r7, #23]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004690:	2b01      	cmp	r3, #1
 8004692:	d101      	bne.n	8004698 <HAL_TIM_ConfigClockSource+0x1c>
 8004694:	2302      	movs	r3, #2
 8004696:	e0b4      	b.n	8004802 <HAL_TIM_ConfigClockSource+0x186>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80046b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046d0:	d03e      	beq.n	8004750 <HAL_TIM_ConfigClockSource+0xd4>
 80046d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046d6:	f200 8087 	bhi.w	80047e8 <HAL_TIM_ConfigClockSource+0x16c>
 80046da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046de:	f000 8086 	beq.w	80047ee <HAL_TIM_ConfigClockSource+0x172>
 80046e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046e6:	d87f      	bhi.n	80047e8 <HAL_TIM_ConfigClockSource+0x16c>
 80046e8:	2b70      	cmp	r3, #112	@ 0x70
 80046ea:	d01a      	beq.n	8004722 <HAL_TIM_ConfigClockSource+0xa6>
 80046ec:	2b70      	cmp	r3, #112	@ 0x70
 80046ee:	d87b      	bhi.n	80047e8 <HAL_TIM_ConfigClockSource+0x16c>
 80046f0:	2b60      	cmp	r3, #96	@ 0x60
 80046f2:	d050      	beq.n	8004796 <HAL_TIM_ConfigClockSource+0x11a>
 80046f4:	2b60      	cmp	r3, #96	@ 0x60
 80046f6:	d877      	bhi.n	80047e8 <HAL_TIM_ConfigClockSource+0x16c>
 80046f8:	2b50      	cmp	r3, #80	@ 0x50
 80046fa:	d03c      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0xfa>
 80046fc:	2b50      	cmp	r3, #80	@ 0x50
 80046fe:	d873      	bhi.n	80047e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004700:	2b40      	cmp	r3, #64	@ 0x40
 8004702:	d058      	beq.n	80047b6 <HAL_TIM_ConfigClockSource+0x13a>
 8004704:	2b40      	cmp	r3, #64	@ 0x40
 8004706:	d86f      	bhi.n	80047e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004708:	2b30      	cmp	r3, #48	@ 0x30
 800470a:	d064      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0x15a>
 800470c:	2b30      	cmp	r3, #48	@ 0x30
 800470e:	d86b      	bhi.n	80047e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004710:	2b20      	cmp	r3, #32
 8004712:	d060      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0x15a>
 8004714:	2b20      	cmp	r3, #32
 8004716:	d867      	bhi.n	80047e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004718:	2b00      	cmp	r3, #0
 800471a:	d05c      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0x15a>
 800471c:	2b10      	cmp	r3, #16
 800471e:	d05a      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0x15a>
 8004720:	e062      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004732:	f000 fb25 	bl	8004d80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004744:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	609a      	str	r2, [r3, #8]
      break;
 800474e:	e04f      	b.n	80047f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004760:	f000 fb0e 	bl	8004d80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004772:	609a      	str	r2, [r3, #8]
      break;
 8004774:	e03c      	b.n	80047f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004782:	461a      	mov	r2, r3
 8004784:	f000 fa82 	bl	8004c8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2150      	movs	r1, #80	@ 0x50
 800478e:	4618      	mov	r0, r3
 8004790:	f000 fadb 	bl	8004d4a <TIM_ITRx_SetConfig>
      break;
 8004794:	e02c      	b.n	80047f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047a2:	461a      	mov	r2, r3
 80047a4:	f000 faa1 	bl	8004cea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2160      	movs	r1, #96	@ 0x60
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 facb 	bl	8004d4a <TIM_ITRx_SetConfig>
      break;
 80047b4:	e01c      	b.n	80047f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047c2:	461a      	mov	r2, r3
 80047c4:	f000 fa62 	bl	8004c8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2140      	movs	r1, #64	@ 0x40
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 fabb 	bl	8004d4a <TIM_ITRx_SetConfig>
      break;
 80047d4:	e00c      	b.n	80047f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4619      	mov	r1, r3
 80047e0:	4610      	mov	r0, r2
 80047e2:	f000 fab2 	bl	8004d4a <TIM_ITRx_SetConfig>
      break;
 80047e6:	e003      	b.n	80047f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	73fb      	strb	r3, [r7, #15]
      break;
 80047ec:	e000      	b.n	80047f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004800:	7bfb      	ldrb	r3, [r7, #15]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
	...

0800485c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a3a      	ldr	r2, [pc, #232]	@ (8004958 <TIM_Base_SetConfig+0xfc>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00f      	beq.n	8004894 <TIM_Base_SetConfig+0x38>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800487a:	d00b      	beq.n	8004894 <TIM_Base_SetConfig+0x38>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a37      	ldr	r2, [pc, #220]	@ (800495c <TIM_Base_SetConfig+0x100>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d007      	beq.n	8004894 <TIM_Base_SetConfig+0x38>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a36      	ldr	r2, [pc, #216]	@ (8004960 <TIM_Base_SetConfig+0x104>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d003      	beq.n	8004894 <TIM_Base_SetConfig+0x38>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a35      	ldr	r2, [pc, #212]	@ (8004964 <TIM_Base_SetConfig+0x108>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d108      	bne.n	80048a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800489a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004958 <TIM_Base_SetConfig+0xfc>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d01b      	beq.n	80048e6 <TIM_Base_SetConfig+0x8a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048b4:	d017      	beq.n	80048e6 <TIM_Base_SetConfig+0x8a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a28      	ldr	r2, [pc, #160]	@ (800495c <TIM_Base_SetConfig+0x100>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d013      	beq.n	80048e6 <TIM_Base_SetConfig+0x8a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a27      	ldr	r2, [pc, #156]	@ (8004960 <TIM_Base_SetConfig+0x104>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00f      	beq.n	80048e6 <TIM_Base_SetConfig+0x8a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a26      	ldr	r2, [pc, #152]	@ (8004964 <TIM_Base_SetConfig+0x108>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00b      	beq.n	80048e6 <TIM_Base_SetConfig+0x8a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a25      	ldr	r2, [pc, #148]	@ (8004968 <TIM_Base_SetConfig+0x10c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d007      	beq.n	80048e6 <TIM_Base_SetConfig+0x8a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a24      	ldr	r2, [pc, #144]	@ (800496c <TIM_Base_SetConfig+0x110>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d003      	beq.n	80048e6 <TIM_Base_SetConfig+0x8a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a23      	ldr	r2, [pc, #140]	@ (8004970 <TIM_Base_SetConfig+0x114>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d108      	bne.n	80048f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	4313      	orrs	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a0e      	ldr	r2, [pc, #56]	@ (8004958 <TIM_Base_SetConfig+0xfc>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d103      	bne.n	800492c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	691a      	ldr	r2, [r3, #16]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b01      	cmp	r3, #1
 800493c:	d105      	bne.n	800494a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f023 0201 	bic.w	r2, r3, #1
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	611a      	str	r2, [r3, #16]
  }
}
 800494a:	bf00      	nop
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	40010000 	.word	0x40010000
 800495c:	40000400 	.word	0x40000400
 8004960:	40000800 	.word	0x40000800
 8004964:	40000c00 	.word	0x40000c00
 8004968:	40014000 	.word	0x40014000
 800496c:	40014400 	.word	0x40014400
 8004970:	40014800 	.word	0x40014800

08004974 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	f023 0201 	bic.w	r2, r3, #1
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 0303 	bic.w	r3, r3, #3
 80049aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f023 0302 	bic.w	r3, r3, #2
 80049bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a1c      	ldr	r2, [pc, #112]	@ (8004a3c <TIM_OC1_SetConfig+0xc8>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d10c      	bne.n	80049ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f023 0308 	bic.w	r3, r3, #8
 80049d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	4313      	orrs	r3, r2
 80049e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f023 0304 	bic.w	r3, r3, #4
 80049e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a13      	ldr	r2, [pc, #76]	@ (8004a3c <TIM_OC1_SetConfig+0xc8>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d111      	bne.n	8004a16 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	621a      	str	r2, [r3, #32]
}
 8004a30:	bf00      	nop
 8004a32:	371c      	adds	r7, #28
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	40010000 	.word	0x40010000

08004a40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	f023 0210 	bic.w	r2, r3, #16
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	021b      	lsls	r3, r3, #8
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f023 0320 	bic.w	r3, r3, #32
 8004a8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	011b      	lsls	r3, r3, #4
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a1e      	ldr	r2, [pc, #120]	@ (8004b14 <TIM_OC2_SetConfig+0xd4>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d10d      	bne.n	8004abc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004aba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a15      	ldr	r2, [pc, #84]	@ (8004b14 <TIM_OC2_SetConfig+0xd4>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d113      	bne.n	8004aec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004aca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	621a      	str	r2, [r3, #32]
}
 8004b06:	bf00      	nop
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40010000 	.word	0x40010000

08004b18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f023 0303 	bic.w	r3, r3, #3
 8004b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a1d      	ldr	r2, [pc, #116]	@ (8004be8 <TIM_OC3_SetConfig+0xd0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d10d      	bne.n	8004b92 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	021b      	lsls	r3, r3, #8
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a14      	ldr	r2, [pc, #80]	@ (8004be8 <TIM_OC3_SetConfig+0xd0>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d113      	bne.n	8004bc2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ba0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	621a      	str	r2, [r3, #32]
}
 8004bdc:	bf00      	nop
 8004bde:	371c      	adds	r7, #28
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	40010000 	.word	0x40010000

08004bec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	021b      	lsls	r3, r3, #8
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	031b      	lsls	r3, r3, #12
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a10      	ldr	r2, [pc, #64]	@ (8004c88 <TIM_OC4_SetConfig+0x9c>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d109      	bne.n	8004c60 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	019b      	lsls	r3, r3, #6
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	621a      	str	r2, [r3, #32]
}
 8004c7a:	bf00      	nop
 8004c7c:	371c      	adds	r7, #28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	40010000 	.word	0x40010000

08004c8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b087      	sub	sp, #28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	f023 0201 	bic.w	r2, r3, #1
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f023 030a 	bic.w	r3, r3, #10
 8004cc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	621a      	str	r2, [r3, #32]
}
 8004cde:	bf00      	nop
 8004ce0:	371c      	adds	r7, #28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b087      	sub	sp, #28
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	60f8      	str	r0, [r7, #12]
 8004cf2:	60b9      	str	r1, [r7, #8]
 8004cf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	f023 0210 	bic.w	r2, r3, #16
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	031b      	lsls	r3, r3, #12
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	011b      	lsls	r3, r3, #4
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	621a      	str	r2, [r3, #32]
}
 8004d3e:	bf00      	nop
 8004d40:	371c      	adds	r7, #28
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b085      	sub	sp, #20
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f043 0307 	orr.w	r3, r3, #7
 8004d6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	609a      	str	r2, [r3, #8]
}
 8004d74:	bf00      	nop
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
 8004d8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	021a      	lsls	r2, r3, #8
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	431a      	orrs	r2, r3
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	609a      	str	r2, [r3, #8]
}
 8004db4:	bf00      	nop
 8004db6:	371c      	adds	r7, #28
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	f003 031f 	and.w	r3, r3, #31
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6a1a      	ldr	r2, [r3, #32]
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	43db      	mvns	r3, r3
 8004de2:	401a      	ands	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a1a      	ldr	r2, [r3, #32]
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f003 031f 	and.w	r3, r3, #31
 8004df2:	6879      	ldr	r1, [r7, #4]
 8004df4:	fa01 f303 	lsl.w	r3, r1, r3
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	621a      	str	r2, [r3, #32]
}
 8004dfe:	bf00      	nop
 8004e00:	371c      	adds	r7, #28
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
	...

08004e0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d101      	bne.n	8004e24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e050      	b.n	8004ec6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a1c      	ldr	r2, [pc, #112]	@ (8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d018      	beq.n	8004e9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e70:	d013      	beq.n	8004e9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a18      	ldr	r2, [pc, #96]	@ (8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d00e      	beq.n	8004e9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a16      	ldr	r2, [pc, #88]	@ (8004edc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d009      	beq.n	8004e9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a15      	ldr	r2, [pc, #84]	@ (8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d004      	beq.n	8004e9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a13      	ldr	r2, [pc, #76]	@ (8004ee4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d10c      	bne.n	8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ea0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	40010000 	.word	0x40010000
 8004ed8:	40000400 	.word	0x40000400
 8004edc:	40000800 	.word	0x40000800
 8004ee0:	40000c00 	.word	0x40000c00
 8004ee4:	40014000 	.word	0x40014000

08004ee8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f10:	b084      	sub	sp, #16
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b084      	sub	sp, #16
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
 8004f1a:	f107 001c 	add.w	r0, r7, #28
 8004f1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f22:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d123      	bne.n	8004f72 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004f3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f52:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d105      	bne.n	8004f66 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f001 fae8 	bl	800653c <USB_CoreReset>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	73fb      	strb	r3, [r7, #15]
 8004f70:	e01b      	b.n	8004faa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f001 fadc 	bl	800653c <USB_CoreReset>
 8004f84:	4603      	mov	r3, r0
 8004f86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004f88:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d106      	bne.n	8004f9e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f94:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	639a      	str	r2, [r3, #56]	@ 0x38
 8004f9c:	e005      	b.n	8004faa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004faa:	7fbb      	ldrb	r3, [r7, #30]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d10b      	bne.n	8004fc8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f043 0206 	orr.w	r2, r3, #6
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f043 0220 	orr.w	r2, r3, #32
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fd4:	b004      	add	sp, #16
 8004fd6:	4770      	bx	lr

08004fd8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b087      	sub	sp, #28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004fe6:	79fb      	ldrb	r3, [r7, #7]
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d165      	bne.n	80050b8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	4a41      	ldr	r2, [pc, #260]	@ (80050f4 <USB_SetTurnaroundTime+0x11c>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d906      	bls.n	8005002 <USB_SetTurnaroundTime+0x2a>
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	4a40      	ldr	r2, [pc, #256]	@ (80050f8 <USB_SetTurnaroundTime+0x120>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d202      	bcs.n	8005002 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004ffc:	230f      	movs	r3, #15
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	e062      	b.n	80050c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	4a3c      	ldr	r2, [pc, #240]	@ (80050f8 <USB_SetTurnaroundTime+0x120>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d306      	bcc.n	8005018 <USB_SetTurnaroundTime+0x40>
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	4a3b      	ldr	r2, [pc, #236]	@ (80050fc <USB_SetTurnaroundTime+0x124>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d202      	bcs.n	8005018 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005012:	230e      	movs	r3, #14
 8005014:	617b      	str	r3, [r7, #20]
 8005016:	e057      	b.n	80050c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	4a38      	ldr	r2, [pc, #224]	@ (80050fc <USB_SetTurnaroundTime+0x124>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d306      	bcc.n	800502e <USB_SetTurnaroundTime+0x56>
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	4a37      	ldr	r2, [pc, #220]	@ (8005100 <USB_SetTurnaroundTime+0x128>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d202      	bcs.n	800502e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005028:	230d      	movs	r3, #13
 800502a:	617b      	str	r3, [r7, #20]
 800502c:	e04c      	b.n	80050c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	4a33      	ldr	r2, [pc, #204]	@ (8005100 <USB_SetTurnaroundTime+0x128>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d306      	bcc.n	8005044 <USB_SetTurnaroundTime+0x6c>
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	4a32      	ldr	r2, [pc, #200]	@ (8005104 <USB_SetTurnaroundTime+0x12c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d802      	bhi.n	8005044 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800503e:	230c      	movs	r3, #12
 8005040:	617b      	str	r3, [r7, #20]
 8005042:	e041      	b.n	80050c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	4a2f      	ldr	r2, [pc, #188]	@ (8005104 <USB_SetTurnaroundTime+0x12c>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d906      	bls.n	800505a <USB_SetTurnaroundTime+0x82>
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	4a2e      	ldr	r2, [pc, #184]	@ (8005108 <USB_SetTurnaroundTime+0x130>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d802      	bhi.n	800505a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005054:	230b      	movs	r3, #11
 8005056:	617b      	str	r3, [r7, #20]
 8005058:	e036      	b.n	80050c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	4a2a      	ldr	r2, [pc, #168]	@ (8005108 <USB_SetTurnaroundTime+0x130>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d906      	bls.n	8005070 <USB_SetTurnaroundTime+0x98>
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	4a29      	ldr	r2, [pc, #164]	@ (800510c <USB_SetTurnaroundTime+0x134>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d802      	bhi.n	8005070 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800506a:	230a      	movs	r3, #10
 800506c:	617b      	str	r3, [r7, #20]
 800506e:	e02b      	b.n	80050c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	4a26      	ldr	r2, [pc, #152]	@ (800510c <USB_SetTurnaroundTime+0x134>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d906      	bls.n	8005086 <USB_SetTurnaroundTime+0xae>
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	4a25      	ldr	r2, [pc, #148]	@ (8005110 <USB_SetTurnaroundTime+0x138>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d202      	bcs.n	8005086 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005080:	2309      	movs	r3, #9
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	e020      	b.n	80050c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	4a21      	ldr	r2, [pc, #132]	@ (8005110 <USB_SetTurnaroundTime+0x138>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d306      	bcc.n	800509c <USB_SetTurnaroundTime+0xc4>
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	4a20      	ldr	r2, [pc, #128]	@ (8005114 <USB_SetTurnaroundTime+0x13c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d802      	bhi.n	800509c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005096:	2308      	movs	r3, #8
 8005098:	617b      	str	r3, [r7, #20]
 800509a:	e015      	b.n	80050c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	4a1d      	ldr	r2, [pc, #116]	@ (8005114 <USB_SetTurnaroundTime+0x13c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d906      	bls.n	80050b2 <USB_SetTurnaroundTime+0xda>
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	4a1c      	ldr	r2, [pc, #112]	@ (8005118 <USB_SetTurnaroundTime+0x140>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d202      	bcs.n	80050b2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80050ac:	2307      	movs	r3, #7
 80050ae:	617b      	str	r3, [r7, #20]
 80050b0:	e00a      	b.n	80050c8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80050b2:	2306      	movs	r3, #6
 80050b4:	617b      	str	r3, [r7, #20]
 80050b6:	e007      	b.n	80050c8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80050b8:	79fb      	ldrb	r3, [r7, #7]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d102      	bne.n	80050c4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80050be:	2309      	movs	r3, #9
 80050c0:	617b      	str	r3, [r7, #20]
 80050c2:	e001      	b.n	80050c8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80050c4:	2309      	movs	r3, #9
 80050c6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	029b      	lsls	r3, r3, #10
 80050dc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80050e0:	431a      	orrs	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	371c      	adds	r7, #28
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	00d8acbf 	.word	0x00d8acbf
 80050f8:	00e4e1c0 	.word	0x00e4e1c0
 80050fc:	00f42400 	.word	0x00f42400
 8005100:	01067380 	.word	0x01067380
 8005104:	011a499f 	.word	0x011a499f
 8005108:	01312cff 	.word	0x01312cff
 800510c:	014ca43f 	.word	0x014ca43f
 8005110:	016e3600 	.word	0x016e3600
 8005114:	01a6ab1f 	.word	0x01a6ab1f
 8005118:	01e84800 	.word	0x01e84800

0800511c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f043 0201 	orr.w	r2, r3, #1
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f023 0201 	bic.w	r2, r3, #1
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	460b      	mov	r3, r1
 800516a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800516c:	2300      	movs	r3, #0
 800516e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800517c:	78fb      	ldrb	r3, [r7, #3]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d115      	bne.n	80051ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800518e:	200a      	movs	r0, #10
 8005190:	f7fc fc9a 	bl	8001ac8 <HAL_Delay>
      ms += 10U;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	330a      	adds	r3, #10
 8005198:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f001 f93f 	bl	800641e <USB_GetMode>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d01e      	beq.n	80051e4 <USB_SetCurrentMode+0x84>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2bc7      	cmp	r3, #199	@ 0xc7
 80051aa:	d9f0      	bls.n	800518e <USB_SetCurrentMode+0x2e>
 80051ac:	e01a      	b.n	80051e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80051ae:	78fb      	ldrb	r3, [r7, #3]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d115      	bne.n	80051e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80051c0:	200a      	movs	r0, #10
 80051c2:	f7fc fc81 	bl	8001ac8 <HAL_Delay>
      ms += 10U;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	330a      	adds	r3, #10
 80051ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f001 f926 	bl	800641e <USB_GetMode>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d005      	beq.n	80051e4 <USB_SetCurrentMode+0x84>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2bc7      	cmp	r3, #199	@ 0xc7
 80051dc:	d9f0      	bls.n	80051c0 <USB_SetCurrentMode+0x60>
 80051de:	e001      	b.n	80051e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e005      	b.n	80051f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2bc8      	cmp	r3, #200	@ 0xc8
 80051e8:	d101      	bne.n	80051ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e000      	b.n	80051f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051f8:	b084      	sub	sp, #16
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b086      	sub	sp, #24
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005206:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005212:	2300      	movs	r3, #0
 8005214:	613b      	str	r3, [r7, #16]
 8005216:	e009      	b.n	800522c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	3340      	adds	r3, #64	@ 0x40
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	2200      	movs	r2, #0
 8005224:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	3301      	adds	r3, #1
 800522a:	613b      	str	r3, [r7, #16]
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	2b0e      	cmp	r3, #14
 8005230:	d9f2      	bls.n	8005218 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005232:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005236:	2b00      	cmp	r3, #0
 8005238:	d11c      	bne.n	8005274 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005248:	f043 0302 	orr.w	r3, r3, #2
 800524c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005252:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800525e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800526a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	639a      	str	r2, [r3, #56]	@ 0x38
 8005272:	e00b      	b.n	800528c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005278:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005284:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005292:	461a      	mov	r2, r3
 8005294:	2300      	movs	r3, #0
 8005296:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005298:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800529c:	2b01      	cmp	r3, #1
 800529e:	d10d      	bne.n	80052bc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80052a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d104      	bne.n	80052b2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80052a8:	2100      	movs	r1, #0
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f968 	bl	8005580 <USB_SetDevSpeed>
 80052b0:	e008      	b.n	80052c4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80052b2:	2101      	movs	r1, #1
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f963 	bl	8005580 <USB_SetDevSpeed>
 80052ba:	e003      	b.n	80052c4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80052bc:	2103      	movs	r1, #3
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f95e 	bl	8005580 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052c4:	2110      	movs	r1, #16
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f8fa 	bl	80054c0 <USB_FlushTxFifo>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f924 	bl	8005524 <USB_FlushRxFifo>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052ec:	461a      	mov	r2, r3
 80052ee:	2300      	movs	r3, #0
 80052f0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052f8:	461a      	mov	r2, r3
 80052fa:	2300      	movs	r3, #0
 80052fc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005304:	461a      	mov	r2, r3
 8005306:	2300      	movs	r3, #0
 8005308:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800530a:	2300      	movs	r3, #0
 800530c:	613b      	str	r3, [r7, #16]
 800530e:	e043      	b.n	8005398 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4413      	add	r3, r2
 8005318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005322:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005326:	d118      	bne.n	800535a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10a      	bne.n	8005344 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4413      	add	r3, r2
 8005336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800533a:	461a      	mov	r2, r3
 800533c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	e013      	b.n	800536c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005350:	461a      	mov	r2, r3
 8005352:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005356:	6013      	str	r3, [r2, #0]
 8005358:	e008      	b.n	800536c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	4413      	add	r3, r2
 8005362:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005366:	461a      	mov	r2, r3
 8005368:	2300      	movs	r3, #0
 800536a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005378:	461a      	mov	r2, r3
 800537a:	2300      	movs	r3, #0
 800537c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	4413      	add	r3, r2
 8005386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800538a:	461a      	mov	r2, r3
 800538c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005390:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	3301      	adds	r3, #1
 8005396:	613b      	str	r3, [r7, #16]
 8005398:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800539c:	461a      	mov	r2, r3
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d3b5      	bcc.n	8005310 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053a4:	2300      	movs	r3, #0
 80053a6:	613b      	str	r3, [r7, #16]
 80053a8:	e043      	b.n	8005432 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	015a      	lsls	r2, r3, #5
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	4413      	add	r3, r2
 80053b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053c0:	d118      	bne.n	80053f4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10a      	bne.n	80053de <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053d4:	461a      	mov	r2, r3
 80053d6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80053da:	6013      	str	r3, [r2, #0]
 80053dc:	e013      	b.n	8005406 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ea:	461a      	mov	r2, r3
 80053ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	e008      	b.n	8005406 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	015a      	lsls	r2, r3, #5
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4413      	add	r3, r2
 80053fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005400:	461a      	mov	r2, r3
 8005402:	2300      	movs	r3, #0
 8005404:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	4413      	add	r3, r2
 800540e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005412:	461a      	mov	r2, r3
 8005414:	2300      	movs	r3, #0
 8005416:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4413      	add	r3, r2
 8005420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005424:	461a      	mov	r2, r3
 8005426:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800542a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	3301      	adds	r3, #1
 8005430:	613b      	str	r3, [r7, #16]
 8005432:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005436:	461a      	mov	r2, r3
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	4293      	cmp	r3, r2
 800543c:	d3b5      	bcc.n	80053aa <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800544c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005450:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800545e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005460:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005464:	2b00      	cmp	r3, #0
 8005466:	d105      	bne.n	8005474 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	f043 0210 	orr.w	r2, r3, #16
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	699a      	ldr	r2, [r3, #24]
 8005478:	4b10      	ldr	r3, [pc, #64]	@ (80054bc <USB_DevInit+0x2c4>)
 800547a:	4313      	orrs	r3, r2
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005480:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005484:	2b00      	cmp	r3, #0
 8005486:	d005      	beq.n	8005494 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	f043 0208 	orr.w	r2, r3, #8
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005494:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005498:	2b01      	cmp	r3, #1
 800549a:	d107      	bne.n	80054ac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80054a4:	f043 0304 	orr.w	r3, r3, #4
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80054ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3718      	adds	r7, #24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054b8:	b004      	add	sp, #16
 80054ba:	4770      	bx	lr
 80054bc:	803c3800 	.word	0x803c3800

080054c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	3301      	adds	r3, #1
 80054d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054da:	d901      	bls.n	80054e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e01b      	b.n	8005518 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	daf2      	bge.n	80054ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80054e8:	2300      	movs	r3, #0
 80054ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	019b      	lsls	r3, r3, #6
 80054f0:	f043 0220 	orr.w	r2, r3, #32
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	3301      	adds	r3, #1
 80054fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005504:	d901      	bls.n	800550a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e006      	b.n	8005518 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f003 0320 	and.w	r3, r3, #32
 8005512:	2b20      	cmp	r3, #32
 8005514:	d0f0      	beq.n	80054f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800552c:	2300      	movs	r3, #0
 800552e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	3301      	adds	r3, #1
 8005534:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800553c:	d901      	bls.n	8005542 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e018      	b.n	8005574 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	2b00      	cmp	r3, #0
 8005548:	daf2      	bge.n	8005530 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800554a:	2300      	movs	r3, #0
 800554c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2210      	movs	r2, #16
 8005552:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	3301      	adds	r3, #1
 8005558:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005560:	d901      	bls.n	8005566 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e006      	b.n	8005574 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	f003 0310 	and.w	r3, r3, #16
 800556e:	2b10      	cmp	r3, #16
 8005570:	d0f0      	beq.n	8005554 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	460b      	mov	r3, r1
 800558a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	78fb      	ldrb	r3, [r7, #3]
 800559a:	68f9      	ldr	r1, [r7, #12]
 800559c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055a0:	4313      	orrs	r3, r2
 80055a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b087      	sub	sp, #28
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f003 0306 	and.w	r3, r3, #6
 80055ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d102      	bne.n	80055d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80055d2:	2300      	movs	r3, #0
 80055d4:	75fb      	strb	r3, [r7, #23]
 80055d6:	e00a      	b.n	80055ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d002      	beq.n	80055e4 <USB_GetDevSpeed+0x32>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b06      	cmp	r3, #6
 80055e2:	d102      	bne.n	80055ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80055e4:	2302      	movs	r3, #2
 80055e6:	75fb      	strb	r3, [r7, #23]
 80055e8:	e001      	b.n	80055ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80055ea:	230f      	movs	r3, #15
 80055ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80055ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	371c      	adds	r7, #28
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	785b      	ldrb	r3, [r3, #1]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d13a      	bne.n	800568e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800561e:	69da      	ldr	r2, [r3, #28]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	f003 030f 	and.w	r3, r3, #15
 8005628:	2101      	movs	r1, #1
 800562a:	fa01 f303 	lsl.w	r3, r1, r3
 800562e:	b29b      	uxth	r3, r3
 8005630:	68f9      	ldr	r1, [r7, #12]
 8005632:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005636:	4313      	orrs	r3, r2
 8005638:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	4413      	add	r3, r2
 8005642:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d155      	bne.n	80056fc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	791b      	ldrb	r3, [r3, #4]
 800566a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800566c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	059b      	lsls	r3, r3, #22
 8005672:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005674:	4313      	orrs	r3, r2
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	0151      	lsls	r1, r2, #5
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	440a      	add	r2, r1
 800567e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005682:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005686:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800568a:	6013      	str	r3, [r2, #0]
 800568c:	e036      	b.n	80056fc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005694:	69da      	ldr	r2, [r3, #28]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	f003 030f 	and.w	r3, r3, #15
 800569e:	2101      	movs	r1, #1
 80056a0:	fa01 f303 	lsl.w	r3, r1, r3
 80056a4:	041b      	lsls	r3, r3, #16
 80056a6:	68f9      	ldr	r1, [r7, #12]
 80056a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056ac:	4313      	orrs	r3, r2
 80056ae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d11a      	bne.n	80056fc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	791b      	ldrb	r3, [r3, #4]
 80056e0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80056e2:	430b      	orrs	r3, r1
 80056e4:	4313      	orrs	r3, r2
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	0151      	lsls	r1, r2, #5
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	440a      	add	r2, r1
 80056ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056fa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
	...

0800570c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	785b      	ldrb	r3, [r3, #1]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d161      	bne.n	80057ec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4413      	add	r3, r2
 8005730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800573a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800573e:	d11f      	bne.n	8005780 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	0151      	lsls	r1, r2, #5
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	440a      	add	r2, r1
 8005756:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800575a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800575e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	0151      	lsls	r1, r2, #5
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	440a      	add	r2, r1
 8005776:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800577a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800577e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005786:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	f003 030f 	and.w	r3, r3, #15
 8005790:	2101      	movs	r1, #1
 8005792:	fa01 f303 	lsl.w	r3, r1, r3
 8005796:	b29b      	uxth	r3, r3
 8005798:	43db      	mvns	r3, r3
 800579a:	68f9      	ldr	r1, [r7, #12]
 800579c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80057a0:	4013      	ands	r3, r2
 80057a2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057aa:	69da      	ldr	r2, [r3, #28]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	f003 030f 	and.w	r3, r3, #15
 80057b4:	2101      	movs	r1, #1
 80057b6:	fa01 f303 	lsl.w	r3, r1, r3
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	43db      	mvns	r3, r3
 80057be:	68f9      	ldr	r1, [r7, #12]
 80057c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80057c4:	4013      	ands	r3, r2
 80057c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	0159      	lsls	r1, r3, #5
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	440b      	add	r3, r1
 80057de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057e2:	4619      	mov	r1, r3
 80057e4:	4b35      	ldr	r3, [pc, #212]	@ (80058bc <USB_DeactivateEndpoint+0x1b0>)
 80057e6:	4013      	ands	r3, r2
 80057e8:	600b      	str	r3, [r1, #0]
 80057ea:	e060      	b.n	80058ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005802:	d11f      	bne.n	8005844 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4413      	add	r3, r2
 800580c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	0151      	lsls	r1, r2, #5
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	440a      	add	r2, r1
 800581a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800581e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005822:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4413      	add	r3, r2
 800582c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	0151      	lsls	r1, r2, #5
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	440a      	add	r2, r1
 800583a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800583e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005842:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800584a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	f003 030f 	and.w	r3, r3, #15
 8005854:	2101      	movs	r1, #1
 8005856:	fa01 f303 	lsl.w	r3, r1, r3
 800585a:	041b      	lsls	r3, r3, #16
 800585c:	43db      	mvns	r3, r3
 800585e:	68f9      	ldr	r1, [r7, #12]
 8005860:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005864:	4013      	ands	r3, r2
 8005866:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800586e:	69da      	ldr	r2, [r3, #28]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	f003 030f 	and.w	r3, r3, #15
 8005878:	2101      	movs	r1, #1
 800587a:	fa01 f303 	lsl.w	r3, r1, r3
 800587e:	041b      	lsls	r3, r3, #16
 8005880:	43db      	mvns	r3, r3
 8005882:	68f9      	ldr	r1, [r7, #12]
 8005884:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005888:	4013      	ands	r3, r2
 800588a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4413      	add	r3, r2
 8005894:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	0159      	lsls	r1, r3, #5
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	440b      	add	r3, r1
 80058a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058a6:	4619      	mov	r1, r3
 80058a8:	4b05      	ldr	r3, [pc, #20]	@ (80058c0 <USB_DeactivateEndpoint+0x1b4>)
 80058aa:	4013      	ands	r3, r2
 80058ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	ec337800 	.word	0xec337800
 80058c0:	eff37800 	.word	0xeff37800

080058c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08a      	sub	sp, #40	@ 0x28
 80058c8:	af02      	add	r7, sp, #8
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	4613      	mov	r3, r2
 80058d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	785b      	ldrb	r3, [r3, #1]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	f040 817f 	bne.w	8005be4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d132      	bne.n	8005954 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	015a      	lsls	r2, r3, #5
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	0151      	lsls	r1, r2, #5
 8005900:	69fa      	ldr	r2, [r7, #28]
 8005902:	440a      	add	r2, r1
 8005904:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005908:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800590c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005910:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	0151      	lsls	r1, r2, #5
 8005924:	69fa      	ldr	r2, [r7, #28]
 8005926:	440a      	add	r2, r1
 8005928:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800592c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005930:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	4413      	add	r3, r2
 800593a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	0151      	lsls	r1, r2, #5
 8005944:	69fa      	ldr	r2, [r7, #28]
 8005946:	440a      	add	r2, r1
 8005948:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800594c:	0cdb      	lsrs	r3, r3, #19
 800594e:	04db      	lsls	r3, r3, #19
 8005950:	6113      	str	r3, [r2, #16]
 8005952:	e097      	b.n	8005a84 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	4413      	add	r3, r2
 800595c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	69ba      	ldr	r2, [r7, #24]
 8005964:	0151      	lsls	r1, r2, #5
 8005966:	69fa      	ldr	r2, [r7, #28]
 8005968:	440a      	add	r2, r1
 800596a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800596e:	0cdb      	lsrs	r3, r3, #19
 8005970:	04db      	lsls	r3, r3, #19
 8005972:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	4413      	add	r3, r2
 800597c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	0151      	lsls	r1, r2, #5
 8005986:	69fa      	ldr	r2, [r7, #28]
 8005988:	440a      	add	r2, r1
 800598a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800598e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005992:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005996:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d11a      	bne.n	80059d4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	691a      	ldr	r2, [r3, #16]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d903      	bls.n	80059b2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	689a      	ldr	r2, [r3, #8]
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	015a      	lsls	r2, r3, #5
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	4413      	add	r3, r2
 80059ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	0151      	lsls	r1, r2, #5
 80059c4:	69fa      	ldr	r2, [r7, #28]
 80059c6:	440a      	add	r2, r1
 80059c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80059d0:	6113      	str	r3, [r2, #16]
 80059d2:	e044      	b.n	8005a5e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	4413      	add	r3, r2
 80059de:	1e5a      	subs	r2, r3, #1
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059f6:	691a      	ldr	r2, [r3, #16]
 80059f8:	8afb      	ldrh	r3, [r7, #22]
 80059fa:	04d9      	lsls	r1, r3, #19
 80059fc:	4ba4      	ldr	r3, [pc, #656]	@ (8005c90 <USB_EPStartXfer+0x3cc>)
 80059fe:	400b      	ands	r3, r1
 8005a00:	69b9      	ldr	r1, [r7, #24]
 8005a02:	0148      	lsls	r0, r1, #5
 8005a04:	69f9      	ldr	r1, [r7, #28]
 8005a06:	4401      	add	r1, r0
 8005a08:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	791b      	ldrb	r3, [r3, #4]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d122      	bne.n	8005a5e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	0151      	lsls	r1, r2, #5
 8005a2a:	69fa      	ldr	r2, [r7, #28]
 8005a2c:	440a      	add	r2, r1
 8005a2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a32:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005a36:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a44:	691a      	ldr	r2, [r3, #16]
 8005a46:	8afb      	ldrh	r3, [r7, #22]
 8005a48:	075b      	lsls	r3, r3, #29
 8005a4a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005a4e:	69b9      	ldr	r1, [r7, #24]
 8005a50:	0148      	lsls	r0, r1, #5
 8005a52:	69f9      	ldr	r1, [r7, #28]
 8005a54:	4401      	add	r1, r0
 8005a56:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a6a:	691a      	ldr	r2, [r3, #16]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a74:	69b9      	ldr	r1, [r7, #24]
 8005a76:	0148      	lsls	r0, r1, #5
 8005a78:	69f9      	ldr	r1, [r7, #28]
 8005a7a:	4401      	add	r1, r0
 8005a7c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005a80:	4313      	orrs	r3, r2
 8005a82:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a84:	79fb      	ldrb	r3, [r7, #7]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d14b      	bne.n	8005b22 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d009      	beq.n	8005aa6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	791b      	ldrb	r3, [r3, #4]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d128      	bne.n	8005b00 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d110      	bne.n	8005ae0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	0151      	lsls	r1, r2, #5
 8005ad0:	69fa      	ldr	r2, [r7, #28]
 8005ad2:	440a      	add	r2, r1
 8005ad4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ad8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005adc:	6013      	str	r3, [r2, #0]
 8005ade:	e00f      	b.n	8005b00 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	0151      	lsls	r1, r2, #5
 8005af2:	69fa      	ldr	r2, [r7, #28]
 8005af4:	440a      	add	r2, r1
 8005af6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005afa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005afe:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	0151      	lsls	r1, r2, #5
 8005b12:	69fa      	ldr	r2, [r7, #28]
 8005b14:	440a      	add	r2, r1
 8005b16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b1a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	e166      	b.n	8005df0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	0151      	lsls	r1, r2, #5
 8005b34:	69fa      	ldr	r2, [r7, #28]
 8005b36:	440a      	add	r2, r1
 8005b38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b3c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005b40:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	791b      	ldrb	r3, [r3, #4]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d015      	beq.n	8005b76 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f000 814e 	beq.w	8005df0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	f003 030f 	and.w	r3, r3, #15
 8005b64:	2101      	movs	r1, #1
 8005b66:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6a:	69f9      	ldr	r1, [r7, #28]
 8005b6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b70:	4313      	orrs	r3, r2
 8005b72:	634b      	str	r3, [r1, #52]	@ 0x34
 8005b74:	e13c      	b.n	8005df0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d110      	bne.n	8005ba8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	0151      	lsls	r1, r2, #5
 8005b98:	69fa      	ldr	r2, [r7, #28]
 8005b9a:	440a      	add	r2, r1
 8005b9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ba0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005ba4:	6013      	str	r3, [r2, #0]
 8005ba6:	e00f      	b.n	8005bc8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	0151      	lsls	r1, r2, #5
 8005bba:	69fa      	ldr	r2, [r7, #28]
 8005bbc:	440a      	add	r2, r1
 8005bbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bc6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	68d9      	ldr	r1, [r3, #12]
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	781a      	ldrb	r2, [r3, #0]
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	b298      	uxth	r0, r3
 8005bd6:	79fb      	ldrb	r3, [r7, #7]
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	4603      	mov	r3, r0
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 f9b9 	bl	8005f54 <USB_WritePacket>
 8005be2:	e105      	b.n	8005df0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	0151      	lsls	r1, r2, #5
 8005bf6:	69fa      	ldr	r2, [r7, #28]
 8005bf8:	440a      	add	r2, r1
 8005bfa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bfe:	0cdb      	lsrs	r3, r3, #19
 8005c00:	04db      	lsls	r3, r3, #19
 8005c02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	0151      	lsls	r1, r2, #5
 8005c16:	69fa      	ldr	r2, [r7, #28]
 8005c18:	440a      	add	r2, r1
 8005c1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c1e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005c22:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005c26:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d132      	bne.n	8005c94 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	689a      	ldr	r2, [r3, #8]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	689a      	ldr	r2, [r3, #8]
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	015a      	lsls	r2, r3, #5
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c52:	691a      	ldr	r2, [r3, #16]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c5c:	69b9      	ldr	r1, [r7, #24]
 8005c5e:	0148      	lsls	r0, r1, #5
 8005c60:	69f9      	ldr	r1, [r7, #28]
 8005c62:	4401      	add	r1, r0
 8005c64:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	0151      	lsls	r1, r2, #5
 8005c7e:	69fa      	ldr	r2, [r7, #28]
 8005c80:	440a      	add	r2, r1
 8005c82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c86:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c8a:	6113      	str	r3, [r2, #16]
 8005c8c:	e062      	b.n	8005d54 <USB_EPStartXfer+0x490>
 8005c8e:	bf00      	nop
 8005c90:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d123      	bne.n	8005ce4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ca8:	691a      	ldr	r2, [r3, #16]
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cb2:	69b9      	ldr	r1, [r7, #24]
 8005cb4:	0148      	lsls	r0, r1, #5
 8005cb6:	69f9      	ldr	r1, [r7, #28]
 8005cb8:	4401      	add	r1, r0
 8005cba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	0151      	lsls	r1, r2, #5
 8005cd4:	69fa      	ldr	r2, [r7, #28]
 8005cd6:	440a      	add	r2, r1
 8005cd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cdc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ce0:	6113      	str	r3, [r2, #16]
 8005ce2:	e037      	b.n	8005d54 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	691a      	ldr	r2, [r3, #16]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	4413      	add	r3, r2
 8005cee:	1e5a      	subs	r2, r3, #1
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	8afa      	ldrh	r2, [r7, #22]
 8005d00:	fb03 f202 	mul.w	r2, r3, r2
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d14:	691a      	ldr	r2, [r3, #16]
 8005d16:	8afb      	ldrh	r3, [r7, #22]
 8005d18:	04d9      	lsls	r1, r3, #19
 8005d1a:	4b38      	ldr	r3, [pc, #224]	@ (8005dfc <USB_EPStartXfer+0x538>)
 8005d1c:	400b      	ands	r3, r1
 8005d1e:	69b9      	ldr	r1, [r7, #24]
 8005d20:	0148      	lsls	r0, r1, #5
 8005d22:	69f9      	ldr	r1, [r7, #28]
 8005d24:	4401      	add	r1, r0
 8005d26:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d3a:	691a      	ldr	r2, [r3, #16]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d44:	69b9      	ldr	r1, [r7, #24]
 8005d46:	0148      	lsls	r0, r1, #5
 8005d48:	69f9      	ldr	r1, [r7, #28]
 8005d4a:	4401      	add	r1, r0
 8005d4c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005d50:	4313      	orrs	r3, r2
 8005d52:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005d54:	79fb      	ldrb	r3, [r7, #7]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d10d      	bne.n	8005d76 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d009      	beq.n	8005d76 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	68d9      	ldr	r1, [r3, #12]
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d72:	460a      	mov	r2, r1
 8005d74:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	791b      	ldrb	r3, [r3, #4]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d128      	bne.n	8005dd0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d110      	bne.n	8005db0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	0151      	lsls	r1, r2, #5
 8005da0:	69fa      	ldr	r2, [r7, #28]
 8005da2:	440a      	add	r2, r1
 8005da4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005da8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005dac:	6013      	str	r3, [r2, #0]
 8005dae:	e00f      	b.n	8005dd0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	0151      	lsls	r1, r2, #5
 8005dc2:	69fa      	ldr	r2, [r7, #28]
 8005dc4:	440a      	add	r2, r1
 8005dc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	0151      	lsls	r1, r2, #5
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	440a      	add	r2, r1
 8005de6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005dee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3720      	adds	r7, #32
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	1ff80000 	.word	0x1ff80000

08005e00 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	785b      	ldrb	r3, [r3, #1]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d14a      	bne.n	8005eb4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e36:	f040 8086 	bne.w	8005f46 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	7812      	ldrb	r2, [r2, #0]
 8005e4e:	0151      	lsls	r1, r2, #5
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	440a      	add	r2, r1
 8005e54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e58:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005e5c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	7812      	ldrb	r2, [r2, #0]
 8005e72:	0151      	lsls	r1, r2, #5
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	440a      	add	r2, r1
 8005e78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e80:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	3301      	adds	r3, #1
 8005e86:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d902      	bls.n	8005e98 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	75fb      	strb	r3, [r7, #23]
          break;
 8005e96:	e056      	b.n	8005f46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005eac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005eb0:	d0e7      	beq.n	8005e82 <USB_EPStopXfer+0x82>
 8005eb2:	e048      	b.n	8005f46 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	015a      	lsls	r2, r3, #5
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ecc:	d13b      	bne.n	8005f46 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	7812      	ldrb	r2, [r2, #0]
 8005ee2:	0151      	lsls	r1, r2, #5
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	440a      	add	r2, r1
 8005ee8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005eec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ef0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	7812      	ldrb	r2, [r2, #0]
 8005f06:	0151      	lsls	r1, r2, #5
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	440a      	add	r2, r1
 8005f0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d902      	bls.n	8005f2c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	75fb      	strb	r3, [r7, #23]
          break;
 8005f2a:	e00c      	b.n	8005f46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f44:	d0e7      	beq.n	8005f16 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	371c      	adds	r7, #28
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b089      	sub	sp, #36	@ 0x24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	4611      	mov	r1, r2
 8005f60:	461a      	mov	r2, r3
 8005f62:	460b      	mov	r3, r1
 8005f64:	71fb      	strb	r3, [r7, #7]
 8005f66:	4613      	mov	r3, r2
 8005f68:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005f72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d123      	bne.n	8005fc2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f7a:	88bb      	ldrh	r3, [r7, #4]
 8005f7c:	3303      	adds	r3, #3
 8005f7e:	089b      	lsrs	r3, r3, #2
 8005f80:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005f82:	2300      	movs	r3, #0
 8005f84:	61bb      	str	r3, [r7, #24]
 8005f86:	e018      	b.n	8005fba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f88:	79fb      	ldrb	r3, [r7, #7]
 8005f8a:	031a      	lsls	r2, r3, #12
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f94:	461a      	mov	r2, r3
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	3301      	adds	r3, #1
 8005fac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	61bb      	str	r3, [r7, #24]
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d3e2      	bcc.n	8005f88 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3724      	adds	r7, #36	@ 0x24
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b08b      	sub	sp, #44	@ 0x2c
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005fe6:	88fb      	ldrh	r3, [r7, #6]
 8005fe8:	089b      	lsrs	r3, r3, #2
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005fee:	88fb      	ldrh	r3, [r7, #6]
 8005ff0:	f003 0303 	and.w	r3, r3, #3
 8005ff4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	623b      	str	r3, [r7, #32]
 8005ffa:	e014      	b.n	8006026 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006006:	601a      	str	r2, [r3, #0]
    pDest++;
 8006008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600a:	3301      	adds	r3, #1
 800600c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800600e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006010:	3301      	adds	r3, #1
 8006012:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006016:	3301      	adds	r3, #1
 8006018:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800601a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601c:	3301      	adds	r3, #1
 800601e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	3301      	adds	r3, #1
 8006024:	623b      	str	r3, [r7, #32]
 8006026:	6a3a      	ldr	r2, [r7, #32]
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	429a      	cmp	r2, r3
 800602c:	d3e6      	bcc.n	8005ffc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800602e:	8bfb      	ldrh	r3, [r7, #30]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d01e      	beq.n	8006072 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006034:	2300      	movs	r3, #0
 8006036:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800603e:	461a      	mov	r2, r3
 8006040:	f107 0310 	add.w	r3, r7, #16
 8006044:	6812      	ldr	r2, [r2, #0]
 8006046:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	6a3b      	ldr	r3, [r7, #32]
 800604c:	b2db      	uxtb	r3, r3
 800604e:	00db      	lsls	r3, r3, #3
 8006050:	fa22 f303 	lsr.w	r3, r2, r3
 8006054:	b2da      	uxtb	r2, r3
 8006056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006058:	701a      	strb	r2, [r3, #0]
      i++;
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	3301      	adds	r3, #1
 800605e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006062:	3301      	adds	r3, #1
 8006064:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006066:	8bfb      	ldrh	r3, [r7, #30]
 8006068:	3b01      	subs	r3, #1
 800606a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800606c:	8bfb      	ldrh	r3, [r7, #30]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1ea      	bne.n	8006048 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006074:	4618      	mov	r0, r3
 8006076:	372c      	adds	r7, #44	@ 0x2c
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	785b      	ldrb	r3, [r3, #1]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d12c      	bne.n	80060f6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	db12      	blt.n	80060d4 <USB_EPSetStall+0x54>
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00f      	beq.n	80060d4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80060d2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	0151      	lsls	r1, r2, #5
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	440a      	add	r2, r1
 80060ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80060f2:	6013      	str	r3, [r2, #0]
 80060f4:	e02b      	b.n	800614e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	db12      	blt.n	800612e <USB_EPSetStall+0xae>
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00f      	beq.n	800612e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4413      	add	r3, r2
 8006116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68ba      	ldr	r2, [r7, #8]
 800611e:	0151      	lsls	r1, r2, #5
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	440a      	add	r2, r1
 8006124:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006128:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800612c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	4413      	add	r3, r2
 8006136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	0151      	lsls	r1, r2, #5
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	440a      	add	r2, r1
 8006144:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006148:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800614c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	785b      	ldrb	r3, [r3, #1]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d128      	bne.n	80061ca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	4413      	add	r3, r2
 8006180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	0151      	lsls	r1, r2, #5
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	440a      	add	r2, r1
 800618e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006192:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006196:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	791b      	ldrb	r3, [r3, #4]
 800619c:	2b03      	cmp	r3, #3
 800619e:	d003      	beq.n	80061a8 <USB_EPClearStall+0x4c>
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	791b      	ldrb	r3, [r3, #4]
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d138      	bne.n	800621a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	0151      	lsls	r1, r2, #5
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	440a      	add	r2, r1
 80061be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061c6:	6013      	str	r3, [r2, #0]
 80061c8:	e027      	b.n	800621a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	0151      	lsls	r1, r2, #5
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	440a      	add	r2, r1
 80061e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061e4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80061e8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	791b      	ldrb	r3, [r3, #4]
 80061ee:	2b03      	cmp	r3, #3
 80061f0:	d003      	beq.n	80061fa <USB_EPClearStall+0x9e>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	791b      	ldrb	r3, [r3, #4]
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d10f      	bne.n	800621a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	4413      	add	r3, r2
 8006202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	0151      	lsls	r1, r2, #5
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	440a      	add	r2, r1
 8006210:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006214:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006218:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3714      	adds	r7, #20
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	460b      	mov	r3, r1
 8006232:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006246:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800624a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	78fb      	ldrb	r3, [r7, #3]
 8006256:	011b      	lsls	r3, r3, #4
 8006258:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800625c:	68f9      	ldr	r1, [r7, #12]
 800625e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006262:	4313      	orrs	r3, r2
 8006264:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3714      	adds	r7, #20
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800628e:	f023 0303 	bic.w	r3, r3, #3
 8006292:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062a2:	f023 0302 	bic.w	r3, r3, #2
 80062a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b085      	sub	sp, #20
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80062d0:	f023 0303 	bic.w	r3, r3, #3
 80062d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062e4:	f043 0302 	orr.w	r3, r3, #2
 80062e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3714      	adds	r7, #20
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	4013      	ands	r3, r2
 800630e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006310:	68fb      	ldr	r3, [r7, #12]
}
 8006312:	4618      	mov	r0, r3
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800631e:	b480      	push	{r7}
 8006320:	b085      	sub	sp, #20
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800633a:	69db      	ldr	r3, [r3, #28]
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	4013      	ands	r3, r2
 8006340:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	0c1b      	lsrs	r3, r3, #16
}
 8006346:	4618      	mov	r0, r3
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006352:	b480      	push	{r7}
 8006354:	b085      	sub	sp, #20
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	4013      	ands	r3, r2
 8006374:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	b29b      	uxth	r3, r3
}
 800637a:	4618      	mov	r0, r3
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006386:	b480      	push	{r7}
 8006388:	b085      	sub	sp, #20
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	460b      	mov	r3, r1
 8006390:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006396:	78fb      	ldrb	r3, [r7, #3]
 8006398:	015a      	lsls	r2, r3, #5
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	4413      	add	r3, r2
 800639e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	4013      	ands	r3, r2
 80063b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063b4:	68bb      	ldr	r3, [r7, #8]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b087      	sub	sp, #28
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	460b      	mov	r3, r1
 80063cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063e4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80063e6:	78fb      	ldrb	r3, [r7, #3]
 80063e8:	f003 030f 	and.w	r3, r3, #15
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	fa22 f303 	lsr.w	r3, r2, r3
 80063f2:	01db      	lsls	r3, r3, #7
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80063fc:	78fb      	ldrb	r3, [r7, #3]
 80063fe:	015a      	lsls	r2, r3, #5
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	4413      	add	r3, r2
 8006404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	4013      	ands	r3, r2
 800640e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006410:	68bb      	ldr	r3, [r7, #8]
}
 8006412:	4618      	mov	r0, r3
 8006414:	371c      	adds	r7, #28
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	f003 0301 	and.w	r3, r3, #1
}
 800642e:	4618      	mov	r0, r3
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800643a:	b480      	push	{r7}
 800643c:	b085      	sub	sp, #20
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006454:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006458:	f023 0307 	bic.w	r3, r3, #7
 800645c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800646c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006470:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006480:	b480      	push	{r7}
 8006482:	b087      	sub	sp, #28
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	460b      	mov	r3, r1
 800648a:	607a      	str	r2, [r7, #4]
 800648c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	333c      	adds	r3, #60	@ 0x3c
 8006496:	3304      	adds	r3, #4
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	4a26      	ldr	r2, [pc, #152]	@ (8006538 <USB_EP0_OutStart+0xb8>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d90a      	bls.n	80064ba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064b4:	d101      	bne.n	80064ba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	e037      	b.n	800652a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064c0:	461a      	mov	r2, r3
 80064c2:	2300      	movs	r3, #0
 80064c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80064d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064e8:	f043 0318 	orr.w	r3, r3, #24
 80064ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064fc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006500:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006502:	7afb      	ldrb	r3, [r7, #11]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d10f      	bne.n	8006528 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800650e:	461a      	mov	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006522:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006526:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	371c      	adds	r7, #28
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	4f54300a 	.word	0x4f54300a

0800653c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006544:	2300      	movs	r3, #0
 8006546:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	3301      	adds	r3, #1
 800654c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006554:	d901      	bls.n	800655a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e01b      	b.n	8006592 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	2b00      	cmp	r3, #0
 8006560:	daf2      	bge.n	8006548 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006562:	2300      	movs	r3, #0
 8006564:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	f043 0201 	orr.w	r2, r3, #1
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	3301      	adds	r3, #1
 8006576:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800657e:	d901      	bls.n	8006584 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e006      	b.n	8006592 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	f003 0301 	and.w	r3, r3, #1
 800658c:	2b01      	cmp	r3, #1
 800658e:	d0f0      	beq.n	8006572 <USB_CoreReset+0x36>

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3714      	adds	r7, #20
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
	...

080065a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	460b      	mov	r3, r1
 80065aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80065ac:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80065b0:	f002 fc94 	bl	8008edc <USBD_static_malloc>
 80065b4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d109      	bne.n	80065d0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	32b0      	adds	r2, #176	@ 0xb0
 80065c6:	2100      	movs	r1, #0
 80065c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80065cc:	2302      	movs	r3, #2
 80065ce:	e0d4      	b.n	800677a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80065d0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80065d4:	2100      	movs	r1, #0
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f003 fa41 	bl	8009a5e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	32b0      	adds	r2, #176	@ 0xb0
 80065e6:	68f9      	ldr	r1, [r7, #12]
 80065e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	32b0      	adds	r2, #176	@ 0xb0
 80065f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	7c1b      	ldrb	r3, [r3, #16]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d138      	bne.n	800667a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006608:	4b5e      	ldr	r3, [pc, #376]	@ (8006784 <USBD_CDC_Init+0x1e4>)
 800660a:	7819      	ldrb	r1, [r3, #0]
 800660c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006610:	2202      	movs	r2, #2
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f002 fb3f 	bl	8008c96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006618:	4b5a      	ldr	r3, [pc, #360]	@ (8006784 <USBD_CDC_Init+0x1e4>)
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	f003 020f 	and.w	r2, r3, #15
 8006620:	6879      	ldr	r1, [r7, #4]
 8006622:	4613      	mov	r3, r2
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	4413      	add	r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	440b      	add	r3, r1
 800662c:	3324      	adds	r3, #36	@ 0x24
 800662e:	2201      	movs	r2, #1
 8006630:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006632:	4b55      	ldr	r3, [pc, #340]	@ (8006788 <USBD_CDC_Init+0x1e8>)
 8006634:	7819      	ldrb	r1, [r3, #0]
 8006636:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800663a:	2202      	movs	r2, #2
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f002 fb2a 	bl	8008c96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006642:	4b51      	ldr	r3, [pc, #324]	@ (8006788 <USBD_CDC_Init+0x1e8>)
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	f003 020f 	and.w	r2, r3, #15
 800664a:	6879      	ldr	r1, [r7, #4]
 800664c:	4613      	mov	r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4413      	add	r3, r2
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	440b      	add	r3, r1
 8006656:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800665a:	2201      	movs	r2, #1
 800665c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800665e:	4b4b      	ldr	r3, [pc, #300]	@ (800678c <USBD_CDC_Init+0x1ec>)
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	f003 020f 	and.w	r2, r3, #15
 8006666:	6879      	ldr	r1, [r7, #4]
 8006668:	4613      	mov	r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4413      	add	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	440b      	add	r3, r1
 8006672:	3326      	adds	r3, #38	@ 0x26
 8006674:	2210      	movs	r2, #16
 8006676:	801a      	strh	r2, [r3, #0]
 8006678:	e035      	b.n	80066e6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800667a:	4b42      	ldr	r3, [pc, #264]	@ (8006784 <USBD_CDC_Init+0x1e4>)
 800667c:	7819      	ldrb	r1, [r3, #0]
 800667e:	2340      	movs	r3, #64	@ 0x40
 8006680:	2202      	movs	r2, #2
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f002 fb07 	bl	8008c96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006688:	4b3e      	ldr	r3, [pc, #248]	@ (8006784 <USBD_CDC_Init+0x1e4>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	f003 020f 	and.w	r2, r3, #15
 8006690:	6879      	ldr	r1, [r7, #4]
 8006692:	4613      	mov	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	440b      	add	r3, r1
 800669c:	3324      	adds	r3, #36	@ 0x24
 800669e:	2201      	movs	r2, #1
 80066a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80066a2:	4b39      	ldr	r3, [pc, #228]	@ (8006788 <USBD_CDC_Init+0x1e8>)
 80066a4:	7819      	ldrb	r1, [r3, #0]
 80066a6:	2340      	movs	r3, #64	@ 0x40
 80066a8:	2202      	movs	r2, #2
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f002 faf3 	bl	8008c96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80066b0:	4b35      	ldr	r3, [pc, #212]	@ (8006788 <USBD_CDC_Init+0x1e8>)
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	f003 020f 	and.w	r2, r3, #15
 80066b8:	6879      	ldr	r1, [r7, #4]
 80066ba:	4613      	mov	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	440b      	add	r3, r1
 80066c4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80066c8:	2201      	movs	r2, #1
 80066ca:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80066cc:	4b2f      	ldr	r3, [pc, #188]	@ (800678c <USBD_CDC_Init+0x1ec>)
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	f003 020f 	and.w	r2, r3, #15
 80066d4:	6879      	ldr	r1, [r7, #4]
 80066d6:	4613      	mov	r3, r2
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4413      	add	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	440b      	add	r3, r1
 80066e0:	3326      	adds	r3, #38	@ 0x26
 80066e2:	2210      	movs	r2, #16
 80066e4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80066e6:	4b29      	ldr	r3, [pc, #164]	@ (800678c <USBD_CDC_Init+0x1ec>)
 80066e8:	7819      	ldrb	r1, [r3, #0]
 80066ea:	2308      	movs	r3, #8
 80066ec:	2203      	movs	r2, #3
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f002 fad1 	bl	8008c96 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80066f4:	4b25      	ldr	r3, [pc, #148]	@ (800678c <USBD_CDC_Init+0x1ec>)
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	f003 020f 	and.w	r2, r3, #15
 80066fc:	6879      	ldr	r1, [r7, #4]
 80066fe:	4613      	mov	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	440b      	add	r3, r1
 8006708:	3324      	adds	r3, #36	@ 0x24
 800670a:	2201      	movs	r2, #1
 800670c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	33b0      	adds	r3, #176	@ 0xb0
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006740:	2b00      	cmp	r3, #0
 8006742:	d101      	bne.n	8006748 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006744:	2302      	movs	r3, #2
 8006746:	e018      	b.n	800677a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	7c1b      	ldrb	r3, [r3, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10a      	bne.n	8006766 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006750:	4b0d      	ldr	r3, [pc, #52]	@ (8006788 <USBD_CDC_Init+0x1e8>)
 8006752:	7819      	ldrb	r1, [r3, #0]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800675a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f002 fb88 	bl	8008e74 <USBD_LL_PrepareReceive>
 8006764:	e008      	b.n	8006778 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006766:	4b08      	ldr	r3, [pc, #32]	@ (8006788 <USBD_CDC_Init+0x1e8>)
 8006768:	7819      	ldrb	r1, [r3, #0]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006770:	2340      	movs	r3, #64	@ 0x40
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f002 fb7e 	bl	8008e74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	20000093 	.word	0x20000093
 8006788:	20000094 	.word	0x20000094
 800678c:	20000095 	.word	0x20000095

08006790 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800679c:	4b3a      	ldr	r3, [pc, #232]	@ (8006888 <USBD_CDC_DeInit+0xf8>)
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	4619      	mov	r1, r3
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f002 fa9d 	bl	8008ce2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80067a8:	4b37      	ldr	r3, [pc, #220]	@ (8006888 <USBD_CDC_DeInit+0xf8>)
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	f003 020f 	and.w	r2, r3, #15
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	4613      	mov	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4413      	add	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	440b      	add	r3, r1
 80067bc:	3324      	adds	r3, #36	@ 0x24
 80067be:	2200      	movs	r2, #0
 80067c0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80067c2:	4b32      	ldr	r3, [pc, #200]	@ (800688c <USBD_CDC_DeInit+0xfc>)
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	4619      	mov	r1, r3
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f002 fa8a 	bl	8008ce2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80067ce:	4b2f      	ldr	r3, [pc, #188]	@ (800688c <USBD_CDC_DeInit+0xfc>)
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	f003 020f 	and.w	r2, r3, #15
 80067d6:	6879      	ldr	r1, [r7, #4]
 80067d8:	4613      	mov	r3, r2
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	440b      	add	r3, r1
 80067e2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80067e6:	2200      	movs	r2, #0
 80067e8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80067ea:	4b29      	ldr	r3, [pc, #164]	@ (8006890 <USBD_CDC_DeInit+0x100>)
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	4619      	mov	r1, r3
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f002 fa76 	bl	8008ce2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80067f6:	4b26      	ldr	r3, [pc, #152]	@ (8006890 <USBD_CDC_DeInit+0x100>)
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	f003 020f 	and.w	r2, r3, #15
 80067fe:	6879      	ldr	r1, [r7, #4]
 8006800:	4613      	mov	r3, r2
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4413      	add	r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	440b      	add	r3, r1
 800680a:	3324      	adds	r3, #36	@ 0x24
 800680c:	2200      	movs	r2, #0
 800680e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006810:	4b1f      	ldr	r3, [pc, #124]	@ (8006890 <USBD_CDC_DeInit+0x100>)
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	f003 020f 	and.w	r2, r3, #15
 8006818:	6879      	ldr	r1, [r7, #4]
 800681a:	4613      	mov	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4413      	add	r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	440b      	add	r3, r1
 8006824:	3326      	adds	r3, #38	@ 0x26
 8006826:	2200      	movs	r2, #0
 8006828:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	32b0      	adds	r2, #176	@ 0xb0
 8006834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d01f      	beq.n	800687c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	33b0      	adds	r3, #176	@ 0xb0
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	32b0      	adds	r2, #176	@ 0xb0
 800685a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800685e:	4618      	mov	r0, r3
 8006860:	f002 fb4a 	bl	8008ef8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	32b0      	adds	r2, #176	@ 0xb0
 800686e:	2100      	movs	r1, #0
 8006870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	20000093 	.word	0x20000093
 800688c:	20000094 	.word	0x20000094
 8006890:	20000095 	.word	0x20000095

08006894 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	32b0      	adds	r2, #176	@ 0xb0
 80068a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80068b2:	2300      	movs	r3, #0
 80068b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80068b6:	2300      	movs	r3, #0
 80068b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d101      	bne.n	80068c4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e0bf      	b.n	8006a44 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d050      	beq.n	8006972 <USBD_CDC_Setup+0xde>
 80068d0:	2b20      	cmp	r3, #32
 80068d2:	f040 80af 	bne.w	8006a34 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	88db      	ldrh	r3, [r3, #6]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d03a      	beq.n	8006954 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	b25b      	sxtb	r3, r3
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	da1b      	bge.n	8006920 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	33b0      	adds	r3, #176	@ 0xb0
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80068fe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	88d2      	ldrh	r2, [r2, #6]
 8006904:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	88db      	ldrh	r3, [r3, #6]
 800690a:	2b07      	cmp	r3, #7
 800690c:	bf28      	it	cs
 800690e:	2307      	movcs	r3, #7
 8006910:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	89fa      	ldrh	r2, [r7, #14]
 8006916:	4619      	mov	r1, r3
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f001 fd93 	bl	8008444 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800691e:	e090      	b.n	8006a42 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	785a      	ldrb	r2, [r3, #1]
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	88db      	ldrh	r3, [r3, #6]
 800692e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006930:	d803      	bhi.n	800693a <USBD_CDC_Setup+0xa6>
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	88db      	ldrh	r3, [r3, #6]
 8006936:	b2da      	uxtb	r2, r3
 8006938:	e000      	b.n	800693c <USBD_CDC_Setup+0xa8>
 800693a:	2240      	movs	r2, #64	@ 0x40
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006942:	6939      	ldr	r1, [r7, #16]
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800694a:	461a      	mov	r2, r3
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f001 fda5 	bl	800849c <USBD_CtlPrepareRx>
      break;
 8006952:	e076      	b.n	8006a42 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	33b0      	adds	r3, #176	@ 0xb0
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	7850      	ldrb	r0, [r2, #1]
 800696a:	2200      	movs	r2, #0
 800696c:	6839      	ldr	r1, [r7, #0]
 800696e:	4798      	blx	r3
      break;
 8006970:	e067      	b.n	8006a42 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	785b      	ldrb	r3, [r3, #1]
 8006976:	2b0b      	cmp	r3, #11
 8006978:	d851      	bhi.n	8006a1e <USBD_CDC_Setup+0x18a>
 800697a:	a201      	add	r2, pc, #4	@ (adr r2, 8006980 <USBD_CDC_Setup+0xec>)
 800697c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006980:	080069b1 	.word	0x080069b1
 8006984:	08006a2d 	.word	0x08006a2d
 8006988:	08006a1f 	.word	0x08006a1f
 800698c:	08006a1f 	.word	0x08006a1f
 8006990:	08006a1f 	.word	0x08006a1f
 8006994:	08006a1f 	.word	0x08006a1f
 8006998:	08006a1f 	.word	0x08006a1f
 800699c:	08006a1f 	.word	0x08006a1f
 80069a0:	08006a1f 	.word	0x08006a1f
 80069a4:	08006a1f 	.word	0x08006a1f
 80069a8:	080069db 	.word	0x080069db
 80069ac:	08006a05 	.word	0x08006a05
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	2b03      	cmp	r3, #3
 80069ba:	d107      	bne.n	80069cc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80069bc:	f107 030a 	add.w	r3, r7, #10
 80069c0:	2202      	movs	r2, #2
 80069c2:	4619      	mov	r1, r3
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f001 fd3d 	bl	8008444 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069ca:	e032      	b.n	8006a32 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80069cc:	6839      	ldr	r1, [r7, #0]
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f001 fcbb 	bl	800834a <USBD_CtlError>
            ret = USBD_FAIL;
 80069d4:	2303      	movs	r3, #3
 80069d6:	75fb      	strb	r3, [r7, #23]
          break;
 80069d8:	e02b      	b.n	8006a32 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b03      	cmp	r3, #3
 80069e4:	d107      	bne.n	80069f6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80069e6:	f107 030d 	add.w	r3, r7, #13
 80069ea:	2201      	movs	r2, #1
 80069ec:	4619      	mov	r1, r3
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f001 fd28 	bl	8008444 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069f4:	e01d      	b.n	8006a32 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f001 fca6 	bl	800834a <USBD_CtlError>
            ret = USBD_FAIL;
 80069fe:	2303      	movs	r3, #3
 8006a00:	75fb      	strb	r3, [r7, #23]
          break;
 8006a02:	e016      	b.n	8006a32 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b03      	cmp	r3, #3
 8006a0e:	d00f      	beq.n	8006a30 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006a10:	6839      	ldr	r1, [r7, #0]
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f001 fc99 	bl	800834a <USBD_CtlError>
            ret = USBD_FAIL;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a1c:	e008      	b.n	8006a30 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006a1e:	6839      	ldr	r1, [r7, #0]
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f001 fc92 	bl	800834a <USBD_CtlError>
          ret = USBD_FAIL;
 8006a26:	2303      	movs	r3, #3
 8006a28:	75fb      	strb	r3, [r7, #23]
          break;
 8006a2a:	e002      	b.n	8006a32 <USBD_CDC_Setup+0x19e>
          break;
 8006a2c:	bf00      	nop
 8006a2e:	e008      	b.n	8006a42 <USBD_CDC_Setup+0x1ae>
          break;
 8006a30:	bf00      	nop
      }
      break;
 8006a32:	e006      	b.n	8006a42 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006a34:	6839      	ldr	r1, [r7, #0]
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f001 fc87 	bl	800834a <USBD_CtlError>
      ret = USBD_FAIL;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a40:	bf00      	nop
  }

  return (uint8_t)ret;
 8006a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3718      	adds	r7, #24
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	460b      	mov	r3, r1
 8006a56:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006a5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	32b0      	adds	r2, #176	@ 0xb0
 8006a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d101      	bne.n	8006a76 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e065      	b.n	8006b42 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	32b0      	adds	r2, #176	@ 0xb0
 8006a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a84:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006a86:	78fb      	ldrb	r3, [r7, #3]
 8006a88:	f003 020f 	and.w	r2, r3, #15
 8006a8c:	6879      	ldr	r1, [r7, #4]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	440b      	add	r3, r1
 8006a98:	3318      	adds	r3, #24
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d02f      	beq.n	8006b00 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006aa0:	78fb      	ldrb	r3, [r7, #3]
 8006aa2:	f003 020f 	and.w	r2, r3, #15
 8006aa6:	6879      	ldr	r1, [r7, #4]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	440b      	add	r3, r1
 8006ab2:	3318      	adds	r3, #24
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	78fb      	ldrb	r3, [r7, #3]
 8006ab8:	f003 010f 	and.w	r1, r3, #15
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	460b      	mov	r3, r1
 8006ac0:	00db      	lsls	r3, r3, #3
 8006ac2:	440b      	add	r3, r1
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4403      	add	r3, r0
 8006ac8:	331c      	adds	r3, #28
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ad0:	fb01 f303 	mul.w	r3, r1, r3
 8006ad4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d112      	bne.n	8006b00 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006ada:	78fb      	ldrb	r3, [r7, #3]
 8006adc:	f003 020f 	and.w	r2, r3, #15
 8006ae0:	6879      	ldr	r1, [r7, #4]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4413      	add	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	440b      	add	r3, r1
 8006aec:	3318      	adds	r3, #24
 8006aee:	2200      	movs	r2, #0
 8006af0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006af2:	78f9      	ldrb	r1, [r7, #3]
 8006af4:	2300      	movs	r3, #0
 8006af6:	2200      	movs	r2, #0
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f002 f99a 	bl	8008e32 <USBD_LL_Transmit>
 8006afe:	e01f      	b.n	8006b40 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	33b0      	adds	r3, #176	@ 0xb0
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d010      	beq.n	8006b40 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	33b0      	adds	r3, #176	@ 0xb0
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4413      	add	r3, r2
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006b3c:	78fa      	ldrb	r2, [r7, #3]
 8006b3e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b084      	sub	sp, #16
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	460b      	mov	r3, r1
 8006b54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	32b0      	adds	r2, #176	@ 0xb0
 8006b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b64:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	32b0      	adds	r2, #176	@ 0xb0
 8006b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d101      	bne.n	8006b7c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e01a      	b.n	8006bb2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b7c:	78fb      	ldrb	r3, [r7, #3]
 8006b7e:	4619      	mov	r1, r3
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f002 f998 	bl	8008eb6 <USBD_LL_GetRxDataSize>
 8006b86:	4602      	mov	r2, r0
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	33b0      	adds	r3, #176	@ 0xb0
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006bac:	4611      	mov	r1, r2
 8006bae:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b084      	sub	sp, #16
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	32b0      	adds	r2, #176	@ 0xb0
 8006bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d101      	bne.n	8006bdc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e024      	b.n	8006c26 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	33b0      	adds	r3, #176	@ 0xb0
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d019      	beq.n	8006c24 <USBD_CDC_EP0_RxReady+0x6a>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006bf6:	2bff      	cmp	r3, #255	@ 0xff
 8006bf8:	d014      	beq.n	8006c24 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	33b0      	adds	r3, #176	@ 0xb0
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006c12:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c1a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	22ff      	movs	r2, #255	@ 0xff
 8006c20:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
	...

08006c30 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c38:	2182      	movs	r1, #130	@ 0x82
 8006c3a:	4818      	ldr	r0, [pc, #96]	@ (8006c9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c3c:	f000 fd4f 	bl	80076de <USBD_GetEpDesc>
 8006c40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c42:	2101      	movs	r1, #1
 8006c44:	4815      	ldr	r0, [pc, #84]	@ (8006c9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c46:	f000 fd4a 	bl	80076de <USBD_GetEpDesc>
 8006c4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c4c:	2181      	movs	r1, #129	@ 0x81
 8006c4e:	4813      	ldr	r0, [pc, #76]	@ (8006c9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c50:	f000 fd45 	bl	80076de <USBD_GetEpDesc>
 8006c54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d002      	beq.n	8006c62 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	2210      	movs	r2, #16
 8006c60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d006      	beq.n	8006c76 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c70:	711a      	strb	r2, [r3, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d006      	beq.n	8006c8a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c84:	711a      	strb	r2, [r3, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2243      	movs	r2, #67	@ 0x43
 8006c8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c90:	4b02      	ldr	r3, [pc, #8]	@ (8006c9c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3718      	adds	r7, #24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	20000050 	.word	0x20000050

08006ca0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ca8:	2182      	movs	r1, #130	@ 0x82
 8006caa:	4818      	ldr	r0, [pc, #96]	@ (8006d0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006cac:	f000 fd17 	bl	80076de <USBD_GetEpDesc>
 8006cb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	4815      	ldr	r0, [pc, #84]	@ (8006d0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006cb6:	f000 fd12 	bl	80076de <USBD_GetEpDesc>
 8006cba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006cbc:	2181      	movs	r1, #129	@ 0x81
 8006cbe:	4813      	ldr	r0, [pc, #76]	@ (8006d0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006cc0:	f000 fd0d 	bl	80076de <USBD_GetEpDesc>
 8006cc4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d002      	beq.n	8006cd2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	2210      	movs	r2, #16
 8006cd0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d006      	beq.n	8006ce6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	711a      	strb	r2, [r3, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f042 0202 	orr.w	r2, r2, #2
 8006ce4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d006      	beq.n	8006cfa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	711a      	strb	r2, [r3, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f042 0202 	orr.w	r2, r2, #2
 8006cf8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2243      	movs	r2, #67	@ 0x43
 8006cfe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d00:	4b02      	ldr	r3, [pc, #8]	@ (8006d0c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3718      	adds	r7, #24
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	20000050 	.word	0x20000050

08006d10 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b086      	sub	sp, #24
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d18:	2182      	movs	r1, #130	@ 0x82
 8006d1a:	4818      	ldr	r0, [pc, #96]	@ (8006d7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d1c:	f000 fcdf 	bl	80076de <USBD_GetEpDesc>
 8006d20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d22:	2101      	movs	r1, #1
 8006d24:	4815      	ldr	r0, [pc, #84]	@ (8006d7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d26:	f000 fcda 	bl	80076de <USBD_GetEpDesc>
 8006d2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d2c:	2181      	movs	r1, #129	@ 0x81
 8006d2e:	4813      	ldr	r0, [pc, #76]	@ (8006d7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d30:	f000 fcd5 	bl	80076de <USBD_GetEpDesc>
 8006d34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d002      	beq.n	8006d42 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	2210      	movs	r2, #16
 8006d40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d006      	beq.n	8006d56 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d50:	711a      	strb	r2, [r3, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d006      	beq.n	8006d6a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d64:	711a      	strb	r2, [r3, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2243      	movs	r2, #67	@ 0x43
 8006d6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d70:	4b02      	ldr	r3, [pc, #8]	@ (8006d7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3718      	adds	r7, #24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	20000050 	.word	0x20000050

08006d80 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	220a      	movs	r2, #10
 8006d8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006d8e:	4b03      	ldr	r3, [pc, #12]	@ (8006d9c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr
 8006d9c:	2000000c 	.word	0x2000000c

08006da0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d101      	bne.n	8006db4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e009      	b.n	8006dc8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	33b0      	adds	r3, #176	@ 0xb0
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4413      	add	r3, r2
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b087      	sub	sp, #28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	32b0      	adds	r2, #176	@ 0xb0
 8006dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dee:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d101      	bne.n	8006dfa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e008      	b.n	8006e0c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	371c      	adds	r7, #28
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	32b0      	adds	r2, #176	@ 0xb0
 8006e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d101      	bne.n	8006e3c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e004      	b.n	8006e46 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
	...

08006e54 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	32b0      	adds	r2, #176	@ 0xb0
 8006e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e6a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d101      	bne.n	8006e7a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e025      	b.n	8006ec6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d11f      	bne.n	8006ec4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006e8c:	4b10      	ldr	r3, [pc, #64]	@ (8006ed0 <USBD_CDC_TransmitPacket+0x7c>)
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	f003 020f 	and.w	r2, r3, #15
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4413      	add	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4403      	add	r3, r0
 8006ea6:	3318      	adds	r3, #24
 8006ea8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006eaa:	4b09      	ldr	r3, [pc, #36]	@ (8006ed0 <USBD_CDC_TransmitPacket+0x7c>)
 8006eac:	7819      	ldrb	r1, [r3, #0]
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f001 ffb9 	bl	8008e32 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	20000093 	.word	0x20000093

08006ed4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	32b0      	adds	r2, #176	@ 0xb0
 8006ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	32b0      	adds	r2, #176	@ 0xb0
 8006ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d101      	bne.n	8006f02 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e018      	b.n	8006f34 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	7c1b      	ldrb	r3, [r3, #16]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10a      	bne.n	8006f20 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8006f3c <USBD_CDC_ReceivePacket+0x68>)
 8006f0c:	7819      	ldrb	r1, [r3, #0]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006f14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f001 ffab 	bl	8008e74 <USBD_LL_PrepareReceive>
 8006f1e:	e008      	b.n	8006f32 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f20:	4b06      	ldr	r3, [pc, #24]	@ (8006f3c <USBD_CDC_ReceivePacket+0x68>)
 8006f22:	7819      	ldrb	r1, [r3, #0]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006f2a:	2340      	movs	r3, #64	@ 0x40
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f001 ffa1 	bl	8008e74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	20000094 	.word	0x20000094

08006f40 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d101      	bne.n	8006f58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e01f      	b.n	8006f98 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d003      	beq.n	8006f7e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	79fa      	ldrb	r2, [r7, #7]
 8006f8a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f001 fe1b 	bl	8008bc8 <USBD_LL_Init>
 8006f92:	4603      	mov	r3, r0
 8006f94:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3718      	adds	r7, #24
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006faa:	2300      	movs	r3, #0
 8006fac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	e025      	b.n	8007004 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	32ae      	adds	r2, #174	@ 0xae
 8006fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00f      	beq.n	8006ff4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	32ae      	adds	r2, #174	@ 0xae
 8006fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe4:	f107 020e 	add.w	r2, r7, #14
 8006fe8:	4610      	mov	r0, r2
 8006fea:	4798      	blx	r3
 8006fec:	4602      	mov	r2, r0
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006ffa:	1c5a      	adds	r2, r3, #1
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f001 fe23 	bl	8008c60 <USBD_LL_Start>
 800701a:	4603      	mov	r3, r0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3708      	adds	r7, #8
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800702c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800702e:	4618      	mov	r0, r3
 8007030:	370c      	adds	r7, #12
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b084      	sub	sp, #16
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
 8007042:	460b      	mov	r3, r1
 8007044:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007046:	2300      	movs	r3, #0
 8007048:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007050:	2b00      	cmp	r3, #0
 8007052:	d009      	beq.n	8007068 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	78fa      	ldrb	r2, [r7, #3]
 800705e:	4611      	mov	r1, r2
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	4798      	blx	r3
 8007064:	4603      	mov	r3, r0
 8007066:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007068:	7bfb      	ldrb	r3, [r7, #15]
}
 800706a:	4618      	mov	r0, r3
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b084      	sub	sp, #16
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	460b      	mov	r3, r1
 800707c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800707e:	2300      	movs	r3, #0
 8007080:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	78fa      	ldrb	r2, [r7, #3]
 800708c:	4611      	mov	r1, r2
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	4798      	blx	r3
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007098:	2303      	movs	r3, #3
 800709a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800709c:	7bfb      	ldrb	r3, [r7, #15]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b084      	sub	sp, #16
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
 80070ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80070b6:	6839      	ldr	r1, [r7, #0]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f001 f90c 	bl	80082d6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80070cc:	461a      	mov	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80070da:	f003 031f 	and.w	r3, r3, #31
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d01a      	beq.n	8007118 <USBD_LL_SetupStage+0x72>
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d822      	bhi.n	800712c <USBD_LL_SetupStage+0x86>
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d002      	beq.n	80070f0 <USBD_LL_SetupStage+0x4a>
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d00a      	beq.n	8007104 <USBD_LL_SetupStage+0x5e>
 80070ee:	e01d      	b.n	800712c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80070f6:	4619      	mov	r1, r3
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 fb63 	bl	80077c4 <USBD_StdDevReq>
 80070fe:	4603      	mov	r3, r0
 8007100:	73fb      	strb	r3, [r7, #15]
      break;
 8007102:	e020      	b.n	8007146 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800710a:	4619      	mov	r1, r3
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fbcb 	bl	80078a8 <USBD_StdItfReq>
 8007112:	4603      	mov	r3, r0
 8007114:	73fb      	strb	r3, [r7, #15]
      break;
 8007116:	e016      	b.n	8007146 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800711e:	4619      	mov	r1, r3
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fc2d 	bl	8007980 <USBD_StdEPReq>
 8007126:	4603      	mov	r3, r0
 8007128:	73fb      	strb	r3, [r7, #15]
      break;
 800712a:	e00c      	b.n	8007146 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007132:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007136:	b2db      	uxtb	r3, r3
 8007138:	4619      	mov	r1, r3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f001 fdf0 	bl	8008d20 <USBD_LL_StallEP>
 8007140:	4603      	mov	r3, r0
 8007142:	73fb      	strb	r3, [r7, #15]
      break;
 8007144:	bf00      	nop
  }

  return ret;
 8007146:	7bfb      	ldrb	r3, [r7, #15]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	460b      	mov	r3, r1
 800715a:	607a      	str	r2, [r7, #4]
 800715c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800715e:	2300      	movs	r3, #0
 8007160:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007162:	7afb      	ldrb	r3, [r7, #11]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d16e      	bne.n	8007246 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800716e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007176:	2b03      	cmp	r3, #3
 8007178:	f040 8098 	bne.w	80072ac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	689a      	ldr	r2, [r3, #8]
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	429a      	cmp	r2, r3
 8007186:	d913      	bls.n	80071b0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	689a      	ldr	r2, [r3, #8]
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	1ad2      	subs	r2, r2, r3
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	68da      	ldr	r2, [r3, #12]
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	4293      	cmp	r3, r2
 80071a0:	bf28      	it	cs
 80071a2:	4613      	movcs	r3, r2
 80071a4:	461a      	mov	r2, r3
 80071a6:	6879      	ldr	r1, [r7, #4]
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f001 f994 	bl	80084d6 <USBD_CtlContinueRx>
 80071ae:	e07d      	b.n	80072ac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80071b6:	f003 031f 	and.w	r3, r3, #31
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d014      	beq.n	80071e8 <USBD_LL_DataOutStage+0x98>
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d81d      	bhi.n	80071fe <USBD_LL_DataOutStage+0xae>
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d002      	beq.n	80071cc <USBD_LL_DataOutStage+0x7c>
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d003      	beq.n	80071d2 <USBD_LL_DataOutStage+0x82>
 80071ca:	e018      	b.n	80071fe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80071cc:	2300      	movs	r3, #0
 80071ce:	75bb      	strb	r3, [r7, #22]
            break;
 80071d0:	e018      	b.n	8007204 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	4619      	mov	r1, r3
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f000 fa64 	bl	80076aa <USBD_CoreFindIF>
 80071e2:	4603      	mov	r3, r0
 80071e4:	75bb      	strb	r3, [r7, #22]
            break;
 80071e6:	e00d      	b.n	8007204 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	4619      	mov	r1, r3
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f000 fa66 	bl	80076c4 <USBD_CoreFindEP>
 80071f8:	4603      	mov	r3, r0
 80071fa:	75bb      	strb	r3, [r7, #22]
            break;
 80071fc:	e002      	b.n	8007204 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80071fe:	2300      	movs	r3, #0
 8007200:	75bb      	strb	r3, [r7, #22]
            break;
 8007202:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007204:	7dbb      	ldrb	r3, [r7, #22]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d119      	bne.n	800723e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b03      	cmp	r3, #3
 8007214:	d113      	bne.n	800723e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007216:	7dba      	ldrb	r2, [r7, #22]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	32ae      	adds	r2, #174	@ 0xae
 800721c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00b      	beq.n	800723e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007226:	7dba      	ldrb	r2, [r7, #22]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800722e:	7dba      	ldrb	r2, [r7, #22]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	32ae      	adds	r2, #174	@ 0xae
 8007234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f001 f95a 	bl	80084f8 <USBD_CtlSendStatus>
 8007244:	e032      	b.n	80072ac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007246:	7afb      	ldrb	r3, [r7, #11]
 8007248:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800724c:	b2db      	uxtb	r3, r3
 800724e:	4619      	mov	r1, r3
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f000 fa37 	bl	80076c4 <USBD_CoreFindEP>
 8007256:	4603      	mov	r3, r0
 8007258:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800725a:	7dbb      	ldrb	r3, [r7, #22]
 800725c:	2bff      	cmp	r3, #255	@ 0xff
 800725e:	d025      	beq.n	80072ac <USBD_LL_DataOutStage+0x15c>
 8007260:	7dbb      	ldrb	r3, [r7, #22]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d122      	bne.n	80072ac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b03      	cmp	r3, #3
 8007270:	d117      	bne.n	80072a2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007272:	7dba      	ldrb	r2, [r7, #22]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	32ae      	adds	r2, #174	@ 0xae
 8007278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00f      	beq.n	80072a2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007282:	7dba      	ldrb	r2, [r7, #22]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800728a:	7dba      	ldrb	r2, [r7, #22]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	32ae      	adds	r2, #174	@ 0xae
 8007290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	7afa      	ldrb	r2, [r7, #11]
 8007298:	4611      	mov	r1, r2
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	4798      	blx	r3
 800729e:	4603      	mov	r3, r0
 80072a0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80072a2:	7dfb      	ldrb	r3, [r7, #23]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d001      	beq.n	80072ac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80072a8:	7dfb      	ldrb	r3, [r7, #23]
 80072aa:	e000      	b.n	80072ae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b086      	sub	sp, #24
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	60f8      	str	r0, [r7, #12]
 80072be:	460b      	mov	r3, r1
 80072c0:	607a      	str	r2, [r7, #4]
 80072c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80072c4:	7afb      	ldrb	r3, [r7, #11]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d16f      	bne.n	80073aa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	3314      	adds	r3, #20
 80072ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d15a      	bne.n	8007390 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	689a      	ldr	r2, [r3, #8]
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d914      	bls.n	8007310 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	689a      	ldr	r2, [r3, #8]
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	1ad2      	subs	r2, r2, r3
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	461a      	mov	r2, r3
 80072fa:	6879      	ldr	r1, [r7, #4]
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f001 f8bc 	bl	800847a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007302:	2300      	movs	r3, #0
 8007304:	2200      	movs	r2, #0
 8007306:	2100      	movs	r1, #0
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f001 fdb3 	bl	8008e74 <USBD_LL_PrepareReceive>
 800730e:	e03f      	b.n	8007390 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	68da      	ldr	r2, [r3, #12]
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	429a      	cmp	r2, r3
 800731a:	d11c      	bne.n	8007356 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	685a      	ldr	r2, [r3, #4]
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007324:	429a      	cmp	r2, r3
 8007326:	d316      	bcc.n	8007356 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007332:	429a      	cmp	r2, r3
 8007334:	d20f      	bcs.n	8007356 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007336:	2200      	movs	r2, #0
 8007338:	2100      	movs	r1, #0
 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f001 f89d 	bl	800847a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007348:	2300      	movs	r3, #0
 800734a:	2200      	movs	r2, #0
 800734c:	2100      	movs	r1, #0
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f001 fd90 	bl	8008e74 <USBD_LL_PrepareReceive>
 8007354:	e01c      	b.n	8007390 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b03      	cmp	r3, #3
 8007360:	d10f      	bne.n	8007382 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d009      	beq.n	8007382 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007382:	2180      	movs	r1, #128	@ 0x80
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f001 fccb 	bl	8008d20 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f001 f8c7 	bl	800851e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d03a      	beq.n	8007410 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f7ff fe42 	bl	8007024 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80073a8:	e032      	b.n	8007410 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80073aa:	7afb      	ldrb	r3, [r7, #11]
 80073ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	4619      	mov	r1, r3
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f000 f985 	bl	80076c4 <USBD_CoreFindEP>
 80073ba:	4603      	mov	r3, r0
 80073bc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073be:	7dfb      	ldrb	r3, [r7, #23]
 80073c0:	2bff      	cmp	r3, #255	@ 0xff
 80073c2:	d025      	beq.n	8007410 <USBD_LL_DataInStage+0x15a>
 80073c4:	7dfb      	ldrb	r3, [r7, #23]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d122      	bne.n	8007410 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d11c      	bne.n	8007410 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80073d6:	7dfa      	ldrb	r2, [r7, #23]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	32ae      	adds	r2, #174	@ 0xae
 80073dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d014      	beq.n	8007410 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80073e6:	7dfa      	ldrb	r2, [r7, #23]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80073ee:	7dfa      	ldrb	r2, [r7, #23]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	32ae      	adds	r2, #174	@ 0xae
 80073f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	7afa      	ldrb	r2, [r7, #11]
 80073fc:	4611      	mov	r1, r2
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	4798      	blx	r3
 8007402:	4603      	mov	r3, r0
 8007404:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007406:	7dbb      	ldrb	r3, [r7, #22]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d001      	beq.n	8007410 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800740c:	7dbb      	ldrb	r3, [r7, #22]
 800740e:	e000      	b.n	8007412 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3718      	adds	r7, #24
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b084      	sub	sp, #16
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007422:	2300      	movs	r3, #0
 8007424:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007452:	2b00      	cmp	r3, #0
 8007454:	d014      	beq.n	8007480 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00e      	beq.n	8007480 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	6852      	ldr	r2, [r2, #4]
 800746e:	b2d2      	uxtb	r2, r2
 8007470:	4611      	mov	r1, r2
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	4798      	blx	r3
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d001      	beq.n	8007480 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800747c:	2303      	movs	r3, #3
 800747e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007480:	2340      	movs	r3, #64	@ 0x40
 8007482:	2200      	movs	r2, #0
 8007484:	2100      	movs	r1, #0
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f001 fc05 	bl	8008c96 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2240      	movs	r2, #64	@ 0x40
 8007498:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800749c:	2340      	movs	r3, #64	@ 0x40
 800749e:	2200      	movs	r2, #0
 80074a0:	2180      	movs	r1, #128	@ 0x80
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f001 fbf7 	bl	8008c96 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2240      	movs	r2, #64	@ 0x40
 80074b2:	621a      	str	r2, [r3, #32]

  return ret;
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80074be:	b480      	push	{r7}
 80074c0:	b083      	sub	sp, #12
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
 80074c6:	460b      	mov	r3, r1
 80074c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	78fa      	ldrb	r2, [r7, #3]
 80074ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	370c      	adds	r7, #12
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80074de:	b480      	push	{r7}
 80074e0:	b083      	sub	sp, #12
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b04      	cmp	r3, #4
 80074f0:	d006      	beq.n	8007500 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074f8:	b2da      	uxtb	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2204      	movs	r2, #4
 8007504:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007516:	b480      	push	{r7}
 8007518:	b083      	sub	sp, #12
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b04      	cmp	r3, #4
 8007528:	d106      	bne.n	8007538 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007530:	b2da      	uxtb	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b082      	sub	sp, #8
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b03      	cmp	r3, #3
 8007558:	d110      	bne.n	800757c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00b      	beq.n	800757c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800756a:	69db      	ldr	r3, [r3, #28]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d005      	beq.n	800757c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007576:	69db      	ldr	r3, [r3, #28]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b082      	sub	sp, #8
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	460b      	mov	r3, r1
 8007590:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	32ae      	adds	r2, #174	@ 0xae
 800759c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d101      	bne.n	80075a8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e01c      	b.n	80075e2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b03      	cmp	r3, #3
 80075b2:	d115      	bne.n	80075e0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	32ae      	adds	r2, #174	@ 0xae
 80075be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075c2:	6a1b      	ldr	r3, [r3, #32]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00b      	beq.n	80075e0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	32ae      	adds	r2, #174	@ 0xae
 80075d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d6:	6a1b      	ldr	r3, [r3, #32]
 80075d8:	78fa      	ldrb	r2, [r7, #3]
 80075da:	4611      	mov	r1, r2
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b082      	sub	sp, #8
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	460b      	mov	r3, r1
 80075f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	32ae      	adds	r2, #174	@ 0xae
 8007600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d101      	bne.n	800760c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007608:	2303      	movs	r3, #3
 800760a:	e01c      	b.n	8007646 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007612:	b2db      	uxtb	r3, r3
 8007614:	2b03      	cmp	r3, #3
 8007616:	d115      	bne.n	8007644 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	32ae      	adds	r2, #174	@ 0xae
 8007622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00b      	beq.n	8007644 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	32ae      	adds	r2, #174	@ 0xae
 8007636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800763a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800763c:	78fa      	ldrb	r2, [r7, #3]
 800763e:	4611      	mov	r1, r2
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3708      	adds	r7, #8
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800764e:	b480      	push	{r7}
 8007650:	b083      	sub	sp, #12
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800766c:	2300      	movs	r3, #0
 800766e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00e      	beq.n	80076a0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	6852      	ldr	r2, [r2, #4]
 800768e:	b2d2      	uxtb	r2, r2
 8007690:	4611      	mov	r1, r2
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	4798      	blx	r3
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d001      	beq.n	80076a0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800769c:	2303      	movs	r3, #3
 800769e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80076a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80076aa:	b480      	push	{r7}
 80076ac:	b083      	sub	sp, #12
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	460b      	mov	r3, r1
 80076b4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80076b6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	460b      	mov	r3, r1
 80076ce:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80076d0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b086      	sub	sp, #24
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
 80076e6:	460b      	mov	r3, r1
 80076e8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80076f2:	2300      	movs	r3, #0
 80076f4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	885b      	ldrh	r3, [r3, #2]
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	7812      	ldrb	r2, [r2, #0]
 8007700:	4293      	cmp	r3, r2
 8007702:	d91f      	bls.n	8007744 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800770a:	e013      	b.n	8007734 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800770c:	f107 030a 	add.w	r3, r7, #10
 8007710:	4619      	mov	r1, r3
 8007712:	6978      	ldr	r0, [r7, #20]
 8007714:	f000 f81b 	bl	800774e <USBD_GetNextDesc>
 8007718:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	785b      	ldrb	r3, [r3, #1]
 800771e:	2b05      	cmp	r3, #5
 8007720:	d108      	bne.n	8007734 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	789b      	ldrb	r3, [r3, #2]
 800772a:	78fa      	ldrb	r2, [r7, #3]
 800772c:	429a      	cmp	r2, r3
 800772e:	d008      	beq.n	8007742 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007730:	2300      	movs	r3, #0
 8007732:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	885b      	ldrh	r3, [r3, #2]
 8007738:	b29a      	uxth	r2, r3
 800773a:	897b      	ldrh	r3, [r7, #10]
 800773c:	429a      	cmp	r2, r3
 800773e:	d8e5      	bhi.n	800770c <USBD_GetEpDesc+0x2e>
 8007740:	e000      	b.n	8007744 <USBD_GetEpDesc+0x66>
          break;
 8007742:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007744:	693b      	ldr	r3, [r7, #16]
}
 8007746:	4618      	mov	r0, r3
 8007748:	3718      	adds	r7, #24
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800774e:	b480      	push	{r7}
 8007750:	b085      	sub	sp, #20
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
 8007756:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	881b      	ldrh	r3, [r3, #0]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	7812      	ldrb	r2, [r2, #0]
 8007764:	4413      	add	r3, r2
 8007766:	b29a      	uxth	r2, r3
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	461a      	mov	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4413      	add	r3, r2
 8007776:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007778:	68fb      	ldr	r3, [r7, #12]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007786:	b480      	push	{r7}
 8007788:	b087      	sub	sp, #28
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	3301      	adds	r3, #1
 800779c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80077a4:	8a3b      	ldrh	r3, [r7, #16]
 80077a6:	021b      	lsls	r3, r3, #8
 80077a8:	b21a      	sxth	r2, r3
 80077aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	b21b      	sxth	r3, r3
 80077b2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80077b4:	89fb      	ldrh	r3, [r7, #14]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	371c      	adds	r7, #28
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
	...

080077c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077ce:	2300      	movs	r3, #0
 80077d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80077da:	2b40      	cmp	r3, #64	@ 0x40
 80077dc:	d005      	beq.n	80077ea <USBD_StdDevReq+0x26>
 80077de:	2b40      	cmp	r3, #64	@ 0x40
 80077e0:	d857      	bhi.n	8007892 <USBD_StdDevReq+0xce>
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00f      	beq.n	8007806 <USBD_StdDevReq+0x42>
 80077e6:	2b20      	cmp	r3, #32
 80077e8:	d153      	bne.n	8007892 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	32ae      	adds	r2, #174	@ 0xae
 80077f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	6839      	ldr	r1, [r7, #0]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	4798      	blx	r3
 8007800:	4603      	mov	r3, r0
 8007802:	73fb      	strb	r3, [r7, #15]
      break;
 8007804:	e04a      	b.n	800789c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	785b      	ldrb	r3, [r3, #1]
 800780a:	2b09      	cmp	r3, #9
 800780c:	d83b      	bhi.n	8007886 <USBD_StdDevReq+0xc2>
 800780e:	a201      	add	r2, pc, #4	@ (adr r2, 8007814 <USBD_StdDevReq+0x50>)
 8007810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007814:	08007869 	.word	0x08007869
 8007818:	0800787d 	.word	0x0800787d
 800781c:	08007887 	.word	0x08007887
 8007820:	08007873 	.word	0x08007873
 8007824:	08007887 	.word	0x08007887
 8007828:	08007847 	.word	0x08007847
 800782c:	0800783d 	.word	0x0800783d
 8007830:	08007887 	.word	0x08007887
 8007834:	0800785f 	.word	0x0800785f
 8007838:	08007851 	.word	0x08007851
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800783c:	6839      	ldr	r1, [r7, #0]
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fa3c 	bl	8007cbc <USBD_GetDescriptor>
          break;
 8007844:	e024      	b.n	8007890 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007846:	6839      	ldr	r1, [r7, #0]
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fba1 	bl	8007f90 <USBD_SetAddress>
          break;
 800784e:	e01f      	b.n	8007890 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007850:	6839      	ldr	r1, [r7, #0]
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fbe0 	bl	8008018 <USBD_SetConfig>
 8007858:	4603      	mov	r3, r0
 800785a:	73fb      	strb	r3, [r7, #15]
          break;
 800785c:	e018      	b.n	8007890 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fc83 	bl	800816c <USBD_GetConfig>
          break;
 8007866:	e013      	b.n	8007890 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fcb4 	bl	80081d8 <USBD_GetStatus>
          break;
 8007870:	e00e      	b.n	8007890 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007872:	6839      	ldr	r1, [r7, #0]
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fce3 	bl	8008240 <USBD_SetFeature>
          break;
 800787a:	e009      	b.n	8007890 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800787c:	6839      	ldr	r1, [r7, #0]
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 fd07 	bl	8008292 <USBD_ClrFeature>
          break;
 8007884:	e004      	b.n	8007890 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fd5e 	bl	800834a <USBD_CtlError>
          break;
 800788e:	bf00      	nop
      }
      break;
 8007890:	e004      	b.n	800789c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007892:	6839      	ldr	r1, [r7, #0]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fd58 	bl	800834a <USBD_CtlError>
      break;
 800789a:	bf00      	nop
  }

  return ret;
 800789c:	7bfb      	ldrb	r3, [r7, #15]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop

080078a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078b2:	2300      	movs	r3, #0
 80078b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80078be:	2b40      	cmp	r3, #64	@ 0x40
 80078c0:	d005      	beq.n	80078ce <USBD_StdItfReq+0x26>
 80078c2:	2b40      	cmp	r3, #64	@ 0x40
 80078c4:	d852      	bhi.n	800796c <USBD_StdItfReq+0xc4>
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <USBD_StdItfReq+0x26>
 80078ca:	2b20      	cmp	r3, #32
 80078cc:	d14e      	bne.n	800796c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	3b01      	subs	r3, #1
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d840      	bhi.n	800795e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	889b      	ldrh	r3, [r3, #4]
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d836      	bhi.n	8007954 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	889b      	ldrh	r3, [r3, #4]
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	4619      	mov	r1, r3
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f7ff fedb 	bl	80076aa <USBD_CoreFindIF>
 80078f4:	4603      	mov	r3, r0
 80078f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078f8:	7bbb      	ldrb	r3, [r7, #14]
 80078fa:	2bff      	cmp	r3, #255	@ 0xff
 80078fc:	d01d      	beq.n	800793a <USBD_StdItfReq+0x92>
 80078fe:	7bbb      	ldrb	r3, [r7, #14]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d11a      	bne.n	800793a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007904:	7bba      	ldrb	r2, [r7, #14]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	32ae      	adds	r2, #174	@ 0xae
 800790a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00f      	beq.n	8007934 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007914:	7bba      	ldrb	r2, [r7, #14]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800791c:	7bba      	ldrb	r2, [r7, #14]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	32ae      	adds	r2, #174	@ 0xae
 8007922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	4798      	blx	r3
 800792e:	4603      	mov	r3, r0
 8007930:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007932:	e004      	b.n	800793e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007934:	2303      	movs	r3, #3
 8007936:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007938:	e001      	b.n	800793e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800793a:	2303      	movs	r3, #3
 800793c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	88db      	ldrh	r3, [r3, #6]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d110      	bne.n	8007968 <USBD_StdItfReq+0xc0>
 8007946:	7bfb      	ldrb	r3, [r7, #15]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10d      	bne.n	8007968 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fdd3 	bl	80084f8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007952:	e009      	b.n	8007968 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007954:	6839      	ldr	r1, [r7, #0]
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fcf7 	bl	800834a <USBD_CtlError>
          break;
 800795c:	e004      	b.n	8007968 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800795e:	6839      	ldr	r1, [r7, #0]
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 fcf2 	bl	800834a <USBD_CtlError>
          break;
 8007966:	e000      	b.n	800796a <USBD_StdItfReq+0xc2>
          break;
 8007968:	bf00      	nop
      }
      break;
 800796a:	e004      	b.n	8007976 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800796c:	6839      	ldr	r1, [r7, #0]
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 fceb 	bl	800834a <USBD_CtlError>
      break;
 8007974:	bf00      	nop
  }

  return ret;
 8007976:	7bfb      	ldrb	r3, [r7, #15]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800798a:	2300      	movs	r3, #0
 800798c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	889b      	ldrh	r3, [r3, #4]
 8007992:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800799c:	2b40      	cmp	r3, #64	@ 0x40
 800799e:	d007      	beq.n	80079b0 <USBD_StdEPReq+0x30>
 80079a0:	2b40      	cmp	r3, #64	@ 0x40
 80079a2:	f200 817f 	bhi.w	8007ca4 <USBD_StdEPReq+0x324>
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d02a      	beq.n	8007a00 <USBD_StdEPReq+0x80>
 80079aa:	2b20      	cmp	r3, #32
 80079ac:	f040 817a 	bne.w	8007ca4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80079b0:	7bbb      	ldrb	r3, [r7, #14]
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f7ff fe85 	bl	80076c4 <USBD_CoreFindEP>
 80079ba:	4603      	mov	r3, r0
 80079bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079be:	7b7b      	ldrb	r3, [r7, #13]
 80079c0:	2bff      	cmp	r3, #255	@ 0xff
 80079c2:	f000 8174 	beq.w	8007cae <USBD_StdEPReq+0x32e>
 80079c6:	7b7b      	ldrb	r3, [r7, #13]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f040 8170 	bne.w	8007cae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80079ce:	7b7a      	ldrb	r2, [r7, #13]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80079d6:	7b7a      	ldrb	r2, [r7, #13]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	32ae      	adds	r2, #174	@ 0xae
 80079dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f000 8163 	beq.w	8007cae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80079e8:	7b7a      	ldrb	r2, [r7, #13]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	32ae      	adds	r2, #174	@ 0xae
 80079ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	6839      	ldr	r1, [r7, #0]
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	4798      	blx	r3
 80079fa:	4603      	mov	r3, r0
 80079fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80079fe:	e156      	b.n	8007cae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	785b      	ldrb	r3, [r3, #1]
 8007a04:	2b03      	cmp	r3, #3
 8007a06:	d008      	beq.n	8007a1a <USBD_StdEPReq+0x9a>
 8007a08:	2b03      	cmp	r3, #3
 8007a0a:	f300 8145 	bgt.w	8007c98 <USBD_StdEPReq+0x318>
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f000 809b 	beq.w	8007b4a <USBD_StdEPReq+0x1ca>
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d03c      	beq.n	8007a92 <USBD_StdEPReq+0x112>
 8007a18:	e13e      	b.n	8007c98 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d002      	beq.n	8007a2c <USBD_StdEPReq+0xac>
 8007a26:	2b03      	cmp	r3, #3
 8007a28:	d016      	beq.n	8007a58 <USBD_StdEPReq+0xd8>
 8007a2a:	e02c      	b.n	8007a86 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a2c:	7bbb      	ldrb	r3, [r7, #14]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00d      	beq.n	8007a4e <USBD_StdEPReq+0xce>
 8007a32:	7bbb      	ldrb	r3, [r7, #14]
 8007a34:	2b80      	cmp	r3, #128	@ 0x80
 8007a36:	d00a      	beq.n	8007a4e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a38:	7bbb      	ldrb	r3, [r7, #14]
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f001 f96f 	bl	8008d20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a42:	2180      	movs	r1, #128	@ 0x80
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f001 f96b 	bl	8008d20 <USBD_LL_StallEP>
 8007a4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a4c:	e020      	b.n	8007a90 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007a4e:	6839      	ldr	r1, [r7, #0]
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fc7a 	bl	800834a <USBD_CtlError>
              break;
 8007a56:	e01b      	b.n	8007a90 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	885b      	ldrh	r3, [r3, #2]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10e      	bne.n	8007a7e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a60:	7bbb      	ldrb	r3, [r7, #14]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00b      	beq.n	8007a7e <USBD_StdEPReq+0xfe>
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
 8007a68:	2b80      	cmp	r3, #128	@ 0x80
 8007a6a:	d008      	beq.n	8007a7e <USBD_StdEPReq+0xfe>
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	88db      	ldrh	r3, [r3, #6]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d104      	bne.n	8007a7e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a74:	7bbb      	ldrb	r3, [r7, #14]
 8007a76:	4619      	mov	r1, r3
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f001 f951 	bl	8008d20 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fd3a 	bl	80084f8 <USBD_CtlSendStatus>

              break;
 8007a84:	e004      	b.n	8007a90 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fc5e 	bl	800834a <USBD_CtlError>
              break;
 8007a8e:	bf00      	nop
          }
          break;
 8007a90:	e107      	b.n	8007ca2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d002      	beq.n	8007aa4 <USBD_StdEPReq+0x124>
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	d016      	beq.n	8007ad0 <USBD_StdEPReq+0x150>
 8007aa2:	e04b      	b.n	8007b3c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007aa4:	7bbb      	ldrb	r3, [r7, #14]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00d      	beq.n	8007ac6 <USBD_StdEPReq+0x146>
 8007aaa:	7bbb      	ldrb	r3, [r7, #14]
 8007aac:	2b80      	cmp	r3, #128	@ 0x80
 8007aae:	d00a      	beq.n	8007ac6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ab0:	7bbb      	ldrb	r3, [r7, #14]
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f001 f933 	bl	8008d20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007aba:	2180      	movs	r1, #128	@ 0x80
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f001 f92f 	bl	8008d20 <USBD_LL_StallEP>
 8007ac2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ac4:	e040      	b.n	8007b48 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007ac6:	6839      	ldr	r1, [r7, #0]
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 fc3e 	bl	800834a <USBD_CtlError>
              break;
 8007ace:	e03b      	b.n	8007b48 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	885b      	ldrh	r3, [r3, #2]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d136      	bne.n	8007b46 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ad8:	7bbb      	ldrb	r3, [r7, #14]
 8007ada:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d004      	beq.n	8007aec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ae2:	7bbb      	ldrb	r3, [r7, #14]
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f001 f939 	bl	8008d5e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fd03 	bl	80084f8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007af2:	7bbb      	ldrb	r3, [r7, #14]
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7ff fde4 	bl	80076c4 <USBD_CoreFindEP>
 8007afc:	4603      	mov	r3, r0
 8007afe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b00:	7b7b      	ldrb	r3, [r7, #13]
 8007b02:	2bff      	cmp	r3, #255	@ 0xff
 8007b04:	d01f      	beq.n	8007b46 <USBD_StdEPReq+0x1c6>
 8007b06:	7b7b      	ldrb	r3, [r7, #13]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d11c      	bne.n	8007b46 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007b0c:	7b7a      	ldrb	r2, [r7, #13]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007b14:	7b7a      	ldrb	r2, [r7, #13]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	32ae      	adds	r2, #174	@ 0xae
 8007b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d010      	beq.n	8007b46 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b24:	7b7a      	ldrb	r2, [r7, #13]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	32ae      	adds	r2, #174	@ 0xae
 8007b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	6839      	ldr	r1, [r7, #0]
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	4798      	blx	r3
 8007b36:	4603      	mov	r3, r0
 8007b38:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007b3a:	e004      	b.n	8007b46 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007b3c:	6839      	ldr	r1, [r7, #0]
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fc03 	bl	800834a <USBD_CtlError>
              break;
 8007b44:	e000      	b.n	8007b48 <USBD_StdEPReq+0x1c8>
              break;
 8007b46:	bf00      	nop
          }
          break;
 8007b48:	e0ab      	b.n	8007ca2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	d002      	beq.n	8007b5c <USBD_StdEPReq+0x1dc>
 8007b56:	2b03      	cmp	r3, #3
 8007b58:	d032      	beq.n	8007bc0 <USBD_StdEPReq+0x240>
 8007b5a:	e097      	b.n	8007c8c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b5c:	7bbb      	ldrb	r3, [r7, #14]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d007      	beq.n	8007b72 <USBD_StdEPReq+0x1f2>
 8007b62:	7bbb      	ldrb	r3, [r7, #14]
 8007b64:	2b80      	cmp	r3, #128	@ 0x80
 8007b66:	d004      	beq.n	8007b72 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007b68:	6839      	ldr	r1, [r7, #0]
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fbed 	bl	800834a <USBD_CtlError>
                break;
 8007b70:	e091      	b.n	8007c96 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	da0b      	bge.n	8007b92 <USBD_StdEPReq+0x212>
 8007b7a:	7bbb      	ldrb	r3, [r7, #14]
 8007b7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b80:	4613      	mov	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4413      	add	r3, r2
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	3310      	adds	r3, #16
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	3304      	adds	r3, #4
 8007b90:	e00b      	b.n	8007baa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b92:	7bbb      	ldrb	r3, [r7, #14]
 8007b94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b98:	4613      	mov	r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4413      	add	r3, r2
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	3304      	adds	r3, #4
 8007baa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	2202      	movs	r2, #2
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 fc43 	bl	8008444 <USBD_CtlSendData>
              break;
 8007bbe:	e06a      	b.n	8007c96 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007bc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	da11      	bge.n	8007bec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007bc8:	7bbb      	ldrb	r3, [r7, #14]
 8007bca:	f003 020f 	and.w	r2, r3, #15
 8007bce:	6879      	ldr	r1, [r7, #4]
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	440b      	add	r3, r1
 8007bda:	3324      	adds	r3, #36	@ 0x24
 8007bdc:	881b      	ldrh	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d117      	bne.n	8007c12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007be2:	6839      	ldr	r1, [r7, #0]
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 fbb0 	bl	800834a <USBD_CtlError>
                  break;
 8007bea:	e054      	b.n	8007c96 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007bec:	7bbb      	ldrb	r3, [r7, #14]
 8007bee:	f003 020f 	and.w	r2, r3, #15
 8007bf2:	6879      	ldr	r1, [r7, #4]
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4413      	add	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	440b      	add	r3, r1
 8007bfe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007c02:	881b      	ldrh	r3, [r3, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d104      	bne.n	8007c12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c08:	6839      	ldr	r1, [r7, #0]
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fb9d 	bl	800834a <USBD_CtlError>
                  break;
 8007c10:	e041      	b.n	8007c96 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	da0b      	bge.n	8007c32 <USBD_StdEPReq+0x2b2>
 8007c1a:	7bbb      	ldrb	r3, [r7, #14]
 8007c1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007c20:	4613      	mov	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	3310      	adds	r3, #16
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	3304      	adds	r3, #4
 8007c30:	e00b      	b.n	8007c4a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c32:	7bbb      	ldrb	r3, [r7, #14]
 8007c34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c38:	4613      	mov	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	4413      	add	r3, r2
 8007c48:	3304      	adds	r3, #4
 8007c4a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c4c:	7bbb      	ldrb	r3, [r7, #14]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d002      	beq.n	8007c58 <USBD_StdEPReq+0x2d8>
 8007c52:	7bbb      	ldrb	r3, [r7, #14]
 8007c54:	2b80      	cmp	r3, #128	@ 0x80
 8007c56:	d103      	bne.n	8007c60 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	e00e      	b.n	8007c7e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c60:	7bbb      	ldrb	r3, [r7, #14]
 8007c62:	4619      	mov	r1, r3
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f001 f899 	bl	8008d9c <USBD_LL_IsStallEP>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d003      	beq.n	8007c78 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	2201      	movs	r2, #1
 8007c74:	601a      	str	r2, [r3, #0]
 8007c76:	e002      	b.n	8007c7e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	2202      	movs	r2, #2
 8007c82:	4619      	mov	r1, r3
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 fbdd 	bl	8008444 <USBD_CtlSendData>
              break;
 8007c8a:	e004      	b.n	8007c96 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007c8c:	6839      	ldr	r1, [r7, #0]
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fb5b 	bl	800834a <USBD_CtlError>
              break;
 8007c94:	bf00      	nop
          }
          break;
 8007c96:	e004      	b.n	8007ca2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fb55 	bl	800834a <USBD_CtlError>
          break;
 8007ca0:	bf00      	nop
      }
      break;
 8007ca2:	e005      	b.n	8007cb0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 fb4f 	bl	800834a <USBD_CtlError>
      break;
 8007cac:	e000      	b.n	8007cb0 <USBD_StdEPReq+0x330>
      break;
 8007cae:	bf00      	nop
  }

  return ret;
 8007cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
	...

08007cbc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	885b      	ldrh	r3, [r3, #2]
 8007cd6:	0a1b      	lsrs	r3, r3, #8
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	2b06      	cmp	r3, #6
 8007cde:	f200 8128 	bhi.w	8007f32 <USBD_GetDescriptor+0x276>
 8007ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ce8 <USBD_GetDescriptor+0x2c>)
 8007ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce8:	08007d05 	.word	0x08007d05
 8007cec:	08007d1d 	.word	0x08007d1d
 8007cf0:	08007d5d 	.word	0x08007d5d
 8007cf4:	08007f33 	.word	0x08007f33
 8007cf8:	08007f33 	.word	0x08007f33
 8007cfc:	08007ed3 	.word	0x08007ed3
 8007d00:	08007eff 	.word	0x08007eff
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	7c12      	ldrb	r2, [r2, #16]
 8007d10:	f107 0108 	add.w	r1, r7, #8
 8007d14:	4610      	mov	r0, r2
 8007d16:	4798      	blx	r3
 8007d18:	60f8      	str	r0, [r7, #12]
      break;
 8007d1a:	e112      	b.n	8007f42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	7c1b      	ldrb	r3, [r3, #16]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10d      	bne.n	8007d40 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d2c:	f107 0208 	add.w	r2, r7, #8
 8007d30:	4610      	mov	r0, r2
 8007d32:	4798      	blx	r3
 8007d34:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	2202      	movs	r2, #2
 8007d3c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d3e:	e100      	b.n	8007f42 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d48:	f107 0208 	add.w	r2, r7, #8
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	4798      	blx	r3
 8007d50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	3301      	adds	r3, #1
 8007d56:	2202      	movs	r2, #2
 8007d58:	701a      	strb	r2, [r3, #0]
      break;
 8007d5a:	e0f2      	b.n	8007f42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	885b      	ldrh	r3, [r3, #2]
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	2b05      	cmp	r3, #5
 8007d64:	f200 80ac 	bhi.w	8007ec0 <USBD_GetDescriptor+0x204>
 8007d68:	a201      	add	r2, pc, #4	@ (adr r2, 8007d70 <USBD_GetDescriptor+0xb4>)
 8007d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6e:	bf00      	nop
 8007d70:	08007d89 	.word	0x08007d89
 8007d74:	08007dbd 	.word	0x08007dbd
 8007d78:	08007df1 	.word	0x08007df1
 8007d7c:	08007e25 	.word	0x08007e25
 8007d80:	08007e59 	.word	0x08007e59
 8007d84:	08007e8d 	.word	0x08007e8d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00b      	beq.n	8007dac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	7c12      	ldrb	r2, [r2, #16]
 8007da0:	f107 0108 	add.w	r1, r7, #8
 8007da4:	4610      	mov	r0, r2
 8007da6:	4798      	blx	r3
 8007da8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007daa:	e091      	b.n	8007ed0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dac:	6839      	ldr	r1, [r7, #0]
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 facb 	bl	800834a <USBD_CtlError>
            err++;
 8007db4:	7afb      	ldrb	r3, [r7, #11]
 8007db6:	3301      	adds	r3, #1
 8007db8:	72fb      	strb	r3, [r7, #11]
          break;
 8007dba:	e089      	b.n	8007ed0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00b      	beq.n	8007de0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	7c12      	ldrb	r2, [r2, #16]
 8007dd4:	f107 0108 	add.w	r1, r7, #8
 8007dd8:	4610      	mov	r0, r2
 8007dda:	4798      	blx	r3
 8007ddc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dde:	e077      	b.n	8007ed0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fab1 	bl	800834a <USBD_CtlError>
            err++;
 8007de8:	7afb      	ldrb	r3, [r7, #11]
 8007dea:	3301      	adds	r3, #1
 8007dec:	72fb      	strb	r3, [r7, #11]
          break;
 8007dee:	e06f      	b.n	8007ed0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00b      	beq.n	8007e14 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	7c12      	ldrb	r2, [r2, #16]
 8007e08:	f107 0108 	add.w	r1, r7, #8
 8007e0c:	4610      	mov	r0, r2
 8007e0e:	4798      	blx	r3
 8007e10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e12:	e05d      	b.n	8007ed0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e14:	6839      	ldr	r1, [r7, #0]
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 fa97 	bl	800834a <USBD_CtlError>
            err++;
 8007e1c:	7afb      	ldrb	r3, [r7, #11]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	72fb      	strb	r3, [r7, #11]
          break;
 8007e22:	e055      	b.n	8007ed0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00b      	beq.n	8007e48 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	7c12      	ldrb	r2, [r2, #16]
 8007e3c:	f107 0108 	add.w	r1, r7, #8
 8007e40:	4610      	mov	r0, r2
 8007e42:	4798      	blx	r3
 8007e44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e46:	e043      	b.n	8007ed0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e48:	6839      	ldr	r1, [r7, #0]
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 fa7d 	bl	800834a <USBD_CtlError>
            err++;
 8007e50:	7afb      	ldrb	r3, [r7, #11]
 8007e52:	3301      	adds	r3, #1
 8007e54:	72fb      	strb	r3, [r7, #11]
          break;
 8007e56:	e03b      	b.n	8007ed0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e5e:	695b      	ldr	r3, [r3, #20]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00b      	beq.n	8007e7c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e6a:	695b      	ldr	r3, [r3, #20]
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	7c12      	ldrb	r2, [r2, #16]
 8007e70:	f107 0108 	add.w	r1, r7, #8
 8007e74:	4610      	mov	r0, r2
 8007e76:	4798      	blx	r3
 8007e78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e7a:	e029      	b.n	8007ed0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fa63 	bl	800834a <USBD_CtlError>
            err++;
 8007e84:	7afb      	ldrb	r3, [r7, #11]
 8007e86:	3301      	adds	r3, #1
 8007e88:	72fb      	strb	r3, [r7, #11]
          break;
 8007e8a:	e021      	b.n	8007ed0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00b      	beq.n	8007eb0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e9e:	699b      	ldr	r3, [r3, #24]
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	7c12      	ldrb	r2, [r2, #16]
 8007ea4:	f107 0108 	add.w	r1, r7, #8
 8007ea8:	4610      	mov	r0, r2
 8007eaa:	4798      	blx	r3
 8007eac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eae:	e00f      	b.n	8007ed0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007eb0:	6839      	ldr	r1, [r7, #0]
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fa49 	bl	800834a <USBD_CtlError>
            err++;
 8007eb8:	7afb      	ldrb	r3, [r7, #11]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ebe:	e007      	b.n	8007ed0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007ec0:	6839      	ldr	r1, [r7, #0]
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fa41 	bl	800834a <USBD_CtlError>
          err++;
 8007ec8:	7afb      	ldrb	r3, [r7, #11]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007ece:	bf00      	nop
      }
      break;
 8007ed0:	e037      	b.n	8007f42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	7c1b      	ldrb	r3, [r3, #16]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d109      	bne.n	8007eee <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ee2:	f107 0208 	add.w	r2, r7, #8
 8007ee6:	4610      	mov	r0, r2
 8007ee8:	4798      	blx	r3
 8007eea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007eec:	e029      	b.n	8007f42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007eee:	6839      	ldr	r1, [r7, #0]
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 fa2a 	bl	800834a <USBD_CtlError>
        err++;
 8007ef6:	7afb      	ldrb	r3, [r7, #11]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	72fb      	strb	r3, [r7, #11]
      break;
 8007efc:	e021      	b.n	8007f42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	7c1b      	ldrb	r3, [r3, #16]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d10d      	bne.n	8007f22 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f0e:	f107 0208 	add.w	r2, r7, #8
 8007f12:	4610      	mov	r0, r2
 8007f14:	4798      	blx	r3
 8007f16:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	2207      	movs	r2, #7
 8007f1e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f20:	e00f      	b.n	8007f42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f22:	6839      	ldr	r1, [r7, #0]
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fa10 	bl	800834a <USBD_CtlError>
        err++;
 8007f2a:	7afb      	ldrb	r3, [r7, #11]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	72fb      	strb	r3, [r7, #11]
      break;
 8007f30:	e007      	b.n	8007f42 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f32:	6839      	ldr	r1, [r7, #0]
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fa08 	bl	800834a <USBD_CtlError>
      err++;
 8007f3a:	7afb      	ldrb	r3, [r7, #11]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	72fb      	strb	r3, [r7, #11]
      break;
 8007f40:	bf00      	nop
  }

  if (err != 0U)
 8007f42:	7afb      	ldrb	r3, [r7, #11]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d11e      	bne.n	8007f86 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	88db      	ldrh	r3, [r3, #6]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d016      	beq.n	8007f7e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007f50:	893b      	ldrh	r3, [r7, #8]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00e      	beq.n	8007f74 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	88da      	ldrh	r2, [r3, #6]
 8007f5a:	893b      	ldrh	r3, [r7, #8]
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	bf28      	it	cs
 8007f60:	4613      	movcs	r3, r2
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f66:	893b      	ldrh	r3, [r7, #8]
 8007f68:	461a      	mov	r2, r3
 8007f6a:	68f9      	ldr	r1, [r7, #12]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fa69 	bl	8008444 <USBD_CtlSendData>
 8007f72:	e009      	b.n	8007f88 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 f9e7 	bl	800834a <USBD_CtlError>
 8007f7c:	e004      	b.n	8007f88 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 faba 	bl	80084f8 <USBD_CtlSendStatus>
 8007f84:	e000      	b.n	8007f88 <USBD_GetDescriptor+0x2cc>
    return;
 8007f86:	bf00      	nop
  }
}
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop

08007f90 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	889b      	ldrh	r3, [r3, #4]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d131      	bne.n	8008006 <USBD_SetAddress+0x76>
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	88db      	ldrh	r3, [r3, #6]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d12d      	bne.n	8008006 <USBD_SetAddress+0x76>
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	885b      	ldrh	r3, [r3, #2]
 8007fae:	2b7f      	cmp	r3, #127	@ 0x7f
 8007fb0:	d829      	bhi.n	8008006 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	885b      	ldrh	r3, [r3, #2]
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fbc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	2b03      	cmp	r3, #3
 8007fc8:	d104      	bne.n	8007fd4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007fca:	6839      	ldr	r1, [r7, #0]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f9bc 	bl	800834a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fd2:	e01d      	b.n	8008010 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	7bfa      	ldrb	r2, [r7, #15]
 8007fd8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 ff07 	bl	8008df4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 fa86 	bl	80084f8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007fec:	7bfb      	ldrb	r3, [r7, #15]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d004      	beq.n	8007ffc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2202      	movs	r2, #2
 8007ff6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ffa:	e009      	b.n	8008010 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008004:	e004      	b.n	8008010 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008006:	6839      	ldr	r1, [r7, #0]
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f99e 	bl	800834a <USBD_CtlError>
  }
}
 800800e:	bf00      	nop
 8008010:	bf00      	nop
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008022:	2300      	movs	r3, #0
 8008024:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	885b      	ldrh	r3, [r3, #2]
 800802a:	b2da      	uxtb	r2, r3
 800802c:	4b4e      	ldr	r3, [pc, #312]	@ (8008168 <USBD_SetConfig+0x150>)
 800802e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008030:	4b4d      	ldr	r3, [pc, #308]	@ (8008168 <USBD_SetConfig+0x150>)
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d905      	bls.n	8008044 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f985 	bl	800834a <USBD_CtlError>
    return USBD_FAIL;
 8008040:	2303      	movs	r3, #3
 8008042:	e08c      	b.n	800815e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800804a:	b2db      	uxtb	r3, r3
 800804c:	2b02      	cmp	r3, #2
 800804e:	d002      	beq.n	8008056 <USBD_SetConfig+0x3e>
 8008050:	2b03      	cmp	r3, #3
 8008052:	d029      	beq.n	80080a8 <USBD_SetConfig+0x90>
 8008054:	e075      	b.n	8008142 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008056:	4b44      	ldr	r3, [pc, #272]	@ (8008168 <USBD_SetConfig+0x150>)
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d020      	beq.n	80080a0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800805e:	4b42      	ldr	r3, [pc, #264]	@ (8008168 <USBD_SetConfig+0x150>)
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	461a      	mov	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008068:	4b3f      	ldr	r3, [pc, #252]	@ (8008168 <USBD_SetConfig+0x150>)
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	4619      	mov	r1, r3
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f7fe ffe3 	bl	800703a <USBD_SetClassConfig>
 8008074:	4603      	mov	r3, r0
 8008076:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008078:	7bfb      	ldrb	r3, [r7, #15]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d008      	beq.n	8008090 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800807e:	6839      	ldr	r1, [r7, #0]
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 f962 	bl	800834a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2202      	movs	r2, #2
 800808a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800808e:	e065      	b.n	800815c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fa31 	bl	80084f8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2203      	movs	r2, #3
 800809a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800809e:	e05d      	b.n	800815c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fa29 	bl	80084f8 <USBD_CtlSendStatus>
      break;
 80080a6:	e059      	b.n	800815c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80080a8:	4b2f      	ldr	r3, [pc, #188]	@ (8008168 <USBD_SetConfig+0x150>)
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d112      	bne.n	80080d6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2202      	movs	r2, #2
 80080b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80080b8:	4b2b      	ldr	r3, [pc, #172]	@ (8008168 <USBD_SetConfig+0x150>)
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	461a      	mov	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080c2:	4b29      	ldr	r3, [pc, #164]	@ (8008168 <USBD_SetConfig+0x150>)
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	4619      	mov	r1, r3
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f7fe ffd2 	bl	8007072 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fa12 	bl	80084f8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080d4:	e042      	b.n	800815c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80080d6:	4b24      	ldr	r3, [pc, #144]	@ (8008168 <USBD_SetConfig+0x150>)
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	461a      	mov	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d02a      	beq.n	800813a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	4619      	mov	r1, r3
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f7fe ffc0 	bl	8007072 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80080f2:	4b1d      	ldr	r3, [pc, #116]	@ (8008168 <USBD_SetConfig+0x150>)
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	461a      	mov	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80080fc:	4b1a      	ldr	r3, [pc, #104]	@ (8008168 <USBD_SetConfig+0x150>)
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	4619      	mov	r1, r3
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7fe ff99 	bl	800703a <USBD_SetClassConfig>
 8008108:	4603      	mov	r3, r0
 800810a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800810c:	7bfb      	ldrb	r3, [r7, #15]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00f      	beq.n	8008132 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008112:	6839      	ldr	r1, [r7, #0]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f918 	bl	800834a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	b2db      	uxtb	r3, r3
 8008120:	4619      	mov	r1, r3
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f7fe ffa5 	bl	8007072 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2202      	movs	r2, #2
 800812c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008130:	e014      	b.n	800815c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f9e0 	bl	80084f8 <USBD_CtlSendStatus>
      break;
 8008138:	e010      	b.n	800815c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f9dc 	bl	80084f8 <USBD_CtlSendStatus>
      break;
 8008140:	e00c      	b.n	800815c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008142:	6839      	ldr	r1, [r7, #0]
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f900 	bl	800834a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800814a:	4b07      	ldr	r3, [pc, #28]	@ (8008168 <USBD_SetConfig+0x150>)
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	4619      	mov	r1, r3
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f7fe ff8e 	bl	8007072 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008156:	2303      	movs	r3, #3
 8008158:	73fb      	strb	r3, [r7, #15]
      break;
 800815a:	bf00      	nop
  }

  return ret;
 800815c:	7bfb      	ldrb	r3, [r7, #15]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	20000400 	.word	0x20000400

0800816c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	88db      	ldrh	r3, [r3, #6]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d004      	beq.n	8008188 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800817e:	6839      	ldr	r1, [r7, #0]
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f8e2 	bl	800834a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008186:	e023      	b.n	80081d0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800818e:	b2db      	uxtb	r3, r3
 8008190:	2b02      	cmp	r3, #2
 8008192:	dc02      	bgt.n	800819a <USBD_GetConfig+0x2e>
 8008194:	2b00      	cmp	r3, #0
 8008196:	dc03      	bgt.n	80081a0 <USBD_GetConfig+0x34>
 8008198:	e015      	b.n	80081c6 <USBD_GetConfig+0x5a>
 800819a:	2b03      	cmp	r3, #3
 800819c:	d00b      	beq.n	80081b6 <USBD_GetConfig+0x4a>
 800819e:	e012      	b.n	80081c6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	3308      	adds	r3, #8
 80081aa:	2201      	movs	r2, #1
 80081ac:	4619      	mov	r1, r3
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 f948 	bl	8008444 <USBD_CtlSendData>
        break;
 80081b4:	e00c      	b.n	80081d0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	3304      	adds	r3, #4
 80081ba:	2201      	movs	r2, #1
 80081bc:	4619      	mov	r1, r3
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f940 	bl	8008444 <USBD_CtlSendData>
        break;
 80081c4:	e004      	b.n	80081d0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80081c6:	6839      	ldr	r1, [r7, #0]
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 f8be 	bl	800834a <USBD_CtlError>
        break;
 80081ce:	bf00      	nop
}
 80081d0:	bf00      	nop
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	3b01      	subs	r3, #1
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	d81e      	bhi.n	800822e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	88db      	ldrh	r3, [r3, #6]
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d004      	beq.n	8008202 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80081f8:	6839      	ldr	r1, [r7, #0]
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 f8a5 	bl	800834a <USBD_CtlError>
        break;
 8008200:	e01a      	b.n	8008238 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2201      	movs	r2, #1
 8008206:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800820e:	2b00      	cmp	r3, #0
 8008210:	d005      	beq.n	800821e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	f043 0202 	orr.w	r2, r3, #2
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	330c      	adds	r3, #12
 8008222:	2202      	movs	r2, #2
 8008224:	4619      	mov	r1, r3
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f90c 	bl	8008444 <USBD_CtlSendData>
      break;
 800822c:	e004      	b.n	8008238 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800822e:	6839      	ldr	r1, [r7, #0]
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 f88a 	bl	800834a <USBD_CtlError>
      break;
 8008236:	bf00      	nop
  }
}
 8008238:	bf00      	nop
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	885b      	ldrh	r3, [r3, #2]
 800824e:	2b01      	cmp	r3, #1
 8008250:	d107      	bne.n	8008262 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2201      	movs	r2, #1
 8008256:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f94c 	bl	80084f8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008260:	e013      	b.n	800828a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	885b      	ldrh	r3, [r3, #2]
 8008266:	2b02      	cmp	r3, #2
 8008268:	d10b      	bne.n	8008282 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	889b      	ldrh	r3, [r3, #4]
 800826e:	0a1b      	lsrs	r3, r3, #8
 8008270:	b29b      	uxth	r3, r3
 8008272:	b2da      	uxtb	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f93c 	bl	80084f8 <USBD_CtlSendStatus>
}
 8008280:	e003      	b.n	800828a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f860 	bl	800834a <USBD_CtlError>
}
 800828a:	bf00      	nop
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008292:	b580      	push	{r7, lr}
 8008294:	b082      	sub	sp, #8
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
 800829a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	3b01      	subs	r3, #1
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d80b      	bhi.n	80082c2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	885b      	ldrh	r3, [r3, #2]
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d10c      	bne.n	80082cc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 f91c 	bl	80084f8 <USBD_CtlSendStatus>
      }
      break;
 80082c0:	e004      	b.n	80082cc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 f840 	bl	800834a <USBD_CtlError>
      break;
 80082ca:	e000      	b.n	80082ce <USBD_ClrFeature+0x3c>
      break;
 80082cc:	bf00      	nop
  }
}
 80082ce:	bf00      	nop
 80082d0:	3708      	adds	r7, #8
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b084      	sub	sp, #16
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
 80082de:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	781a      	ldrb	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	3301      	adds	r3, #1
 80082f0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	781a      	ldrb	r2, [r3, #0]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	3301      	adds	r3, #1
 80082fe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f7ff fa40 	bl	8007786 <SWAPBYTE>
 8008306:	4603      	mov	r3, r0
 8008308:	461a      	mov	r2, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	3301      	adds	r3, #1
 8008312:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	3301      	adds	r3, #1
 8008318:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f7ff fa33 	bl	8007786 <SWAPBYTE>
 8008320:	4603      	mov	r3, r0
 8008322:	461a      	mov	r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	3301      	adds	r3, #1
 800832c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	3301      	adds	r3, #1
 8008332:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f7ff fa26 	bl	8007786 <SWAPBYTE>
 800833a:	4603      	mov	r3, r0
 800833c:	461a      	mov	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	80da      	strh	r2, [r3, #6]
}
 8008342:	bf00      	nop
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b082      	sub	sp, #8
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
 8008352:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008354:	2180      	movs	r1, #128	@ 0x80
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fce2 	bl	8008d20 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800835c:	2100      	movs	r1, #0
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fcde 	bl	8008d20 <USBD_LL_StallEP>
}
 8008364:	bf00      	nop
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b086      	sub	sp, #24
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008378:	2300      	movs	r3, #0
 800837a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d042      	beq.n	8008408 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008386:	6938      	ldr	r0, [r7, #16]
 8008388:	f000 f842 	bl	8008410 <USBD_GetLen>
 800838c:	4603      	mov	r3, r0
 800838e:	3301      	adds	r3, #1
 8008390:	005b      	lsls	r3, r3, #1
 8008392:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008396:	d808      	bhi.n	80083aa <USBD_GetString+0x3e>
 8008398:	6938      	ldr	r0, [r7, #16]
 800839a:	f000 f839 	bl	8008410 <USBD_GetLen>
 800839e:	4603      	mov	r3, r0
 80083a0:	3301      	adds	r3, #1
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	005b      	lsls	r3, r3, #1
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	e001      	b.n	80083ae <USBD_GetString+0x42>
 80083aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80083b2:	7dfb      	ldrb	r3, [r7, #23]
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	4413      	add	r3, r2
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	7812      	ldrb	r2, [r2, #0]
 80083bc:	701a      	strb	r2, [r3, #0]
  idx++;
 80083be:	7dfb      	ldrb	r3, [r7, #23]
 80083c0:	3301      	adds	r3, #1
 80083c2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
 80083c6:	68ba      	ldr	r2, [r7, #8]
 80083c8:	4413      	add	r3, r2
 80083ca:	2203      	movs	r2, #3
 80083cc:	701a      	strb	r2, [r3, #0]
  idx++;
 80083ce:	7dfb      	ldrb	r3, [r7, #23]
 80083d0:	3301      	adds	r3, #1
 80083d2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80083d4:	e013      	b.n	80083fe <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80083d6:	7dfb      	ldrb	r3, [r7, #23]
 80083d8:	68ba      	ldr	r2, [r7, #8]
 80083da:	4413      	add	r3, r2
 80083dc:	693a      	ldr	r2, [r7, #16]
 80083de:	7812      	ldrb	r2, [r2, #0]
 80083e0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	3301      	adds	r3, #1
 80083e6:	613b      	str	r3, [r7, #16]
    idx++;
 80083e8:	7dfb      	ldrb	r3, [r7, #23]
 80083ea:	3301      	adds	r3, #1
 80083ec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80083ee:	7dfb      	ldrb	r3, [r7, #23]
 80083f0:	68ba      	ldr	r2, [r7, #8]
 80083f2:	4413      	add	r3, r2
 80083f4:	2200      	movs	r2, #0
 80083f6:	701a      	strb	r2, [r3, #0]
    idx++;
 80083f8:	7dfb      	ldrb	r3, [r7, #23]
 80083fa:	3301      	adds	r3, #1
 80083fc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1e7      	bne.n	80083d6 <USBD_GetString+0x6a>
 8008406:	e000      	b.n	800840a <USBD_GetString+0x9e>
    return;
 8008408:	bf00      	nop
  }
}
 800840a:	3718      	adds	r7, #24
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008418:	2300      	movs	r3, #0
 800841a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008420:	e005      	b.n	800842e <USBD_GetLen+0x1e>
  {
    len++;
 8008422:	7bfb      	ldrb	r3, [r7, #15]
 8008424:	3301      	adds	r3, #1
 8008426:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	3301      	adds	r3, #1
 800842c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d1f5      	bne.n	8008422 <USBD_GetLen+0x12>
  }

  return len;
 8008436:	7bfb      	ldrb	r3, [r7, #15]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3714      	adds	r7, #20
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2202      	movs	r2, #2
 8008454:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	68ba      	ldr	r2, [r7, #8]
 8008468:	2100      	movs	r1, #0
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	f000 fce1 	bl	8008e32 <USBD_LL_Transmit>

  return USBD_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b084      	sub	sp, #16
 800847e:	af00      	add	r7, sp, #0
 8008480:	60f8      	str	r0, [r7, #12]
 8008482:	60b9      	str	r1, [r7, #8]
 8008484:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	2100      	movs	r1, #0
 800848c:	68f8      	ldr	r0, [r7, #12]
 800848e:	f000 fcd0 	bl	8008e32 <USBD_LL_Transmit>

  return USBD_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3710      	adds	r7, #16
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2203      	movs	r2, #3
 80084ac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	2100      	movs	r1, #0
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f000 fcd4 	bl	8008e74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b084      	sub	sp, #16
 80084da:	af00      	add	r7, sp, #0
 80084dc:	60f8      	str	r0, [r7, #12]
 80084de:	60b9      	str	r1, [r7, #8]
 80084e0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	68ba      	ldr	r2, [r7, #8]
 80084e6:	2100      	movs	r1, #0
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f000 fcc3 	bl	8008e74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084ee:	2300      	movs	r3, #0
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3710      	adds	r7, #16
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2204      	movs	r2, #4
 8008504:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008508:	2300      	movs	r3, #0
 800850a:	2200      	movs	r2, #0
 800850c:	2100      	movs	r1, #0
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fc8f 	bl	8008e32 <USBD_LL_Transmit>

  return USBD_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b082      	sub	sp, #8
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2205      	movs	r2, #5
 800852a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800852e:	2300      	movs	r3, #0
 8008530:	2200      	movs	r2, #0
 8008532:	2100      	movs	r1, #0
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 fc9d 	bl	8008e74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008548:	2200      	movs	r2, #0
 800854a:	4912      	ldr	r1, [pc, #72]	@ (8008594 <MX_USB_DEVICE_Init+0x50>)
 800854c:	4812      	ldr	r0, [pc, #72]	@ (8008598 <MX_USB_DEVICE_Init+0x54>)
 800854e:	f7fe fcf7 	bl	8006f40 <USBD_Init>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d001      	beq.n	800855c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008558:	f7f8 ff7c 	bl	8001454 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800855c:	490f      	ldr	r1, [pc, #60]	@ (800859c <MX_USB_DEVICE_Init+0x58>)
 800855e:	480e      	ldr	r0, [pc, #56]	@ (8008598 <MX_USB_DEVICE_Init+0x54>)
 8008560:	f7fe fd1e 	bl	8006fa0 <USBD_RegisterClass>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d001      	beq.n	800856e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800856a:	f7f8 ff73 	bl	8001454 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800856e:	490c      	ldr	r1, [pc, #48]	@ (80085a0 <MX_USB_DEVICE_Init+0x5c>)
 8008570:	4809      	ldr	r0, [pc, #36]	@ (8008598 <MX_USB_DEVICE_Init+0x54>)
 8008572:	f7fe fc15 	bl	8006da0 <USBD_CDC_RegisterInterface>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d001      	beq.n	8008580 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800857c:	f7f8 ff6a 	bl	8001454 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008580:	4805      	ldr	r0, [pc, #20]	@ (8008598 <MX_USB_DEVICE_Init+0x54>)
 8008582:	f7fe fd43 	bl	800700c <USBD_Start>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d001      	beq.n	8008590 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800858c:	f7f8 ff62 	bl	8001454 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008590:	bf00      	nop
 8008592:	bd80      	pop	{r7, pc}
 8008594:	200000ac 	.word	0x200000ac
 8008598:	20000404 	.word	0x20000404
 800859c:	20000018 	.word	0x20000018
 80085a0:	20000098 	.word	0x20000098

080085a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80085a8:	2200      	movs	r2, #0
 80085aa:	4905      	ldr	r1, [pc, #20]	@ (80085c0 <CDC_Init_FS+0x1c>)
 80085ac:	4805      	ldr	r0, [pc, #20]	@ (80085c4 <CDC_Init_FS+0x20>)
 80085ae:	f7fe fc11 	bl	8006dd4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80085b2:	4905      	ldr	r1, [pc, #20]	@ (80085c8 <CDC_Init_FS+0x24>)
 80085b4:	4803      	ldr	r0, [pc, #12]	@ (80085c4 <CDC_Init_FS+0x20>)
 80085b6:	f7fe fc2f 	bl	8006e18 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80085ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80085bc:	4618      	mov	r0, r3
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	20000ee0 	.word	0x20000ee0
 80085c4:	20000404 	.word	0x20000404
 80085c8:	200006e0 	.word	0x200006e0

080085cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80085cc:	b480      	push	{r7}
 80085ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80085d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	4603      	mov	r3, r0
 80085e4:	6039      	str	r1, [r7, #0]
 80085e6:	71fb      	strb	r3, [r7, #7]
 80085e8:	4613      	mov	r3, r2
 80085ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80085ec:	79fb      	ldrb	r3, [r7, #7]
 80085ee:	2b23      	cmp	r3, #35	@ 0x23
 80085f0:	d84a      	bhi.n	8008688 <CDC_Control_FS+0xac>
 80085f2:	a201      	add	r2, pc, #4	@ (adr r2, 80085f8 <CDC_Control_FS+0x1c>)
 80085f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f8:	08008689 	.word	0x08008689
 80085fc:	08008689 	.word	0x08008689
 8008600:	08008689 	.word	0x08008689
 8008604:	08008689 	.word	0x08008689
 8008608:	08008689 	.word	0x08008689
 800860c:	08008689 	.word	0x08008689
 8008610:	08008689 	.word	0x08008689
 8008614:	08008689 	.word	0x08008689
 8008618:	08008689 	.word	0x08008689
 800861c:	08008689 	.word	0x08008689
 8008620:	08008689 	.word	0x08008689
 8008624:	08008689 	.word	0x08008689
 8008628:	08008689 	.word	0x08008689
 800862c:	08008689 	.word	0x08008689
 8008630:	08008689 	.word	0x08008689
 8008634:	08008689 	.word	0x08008689
 8008638:	08008689 	.word	0x08008689
 800863c:	08008689 	.word	0x08008689
 8008640:	08008689 	.word	0x08008689
 8008644:	08008689 	.word	0x08008689
 8008648:	08008689 	.word	0x08008689
 800864c:	08008689 	.word	0x08008689
 8008650:	08008689 	.word	0x08008689
 8008654:	08008689 	.word	0x08008689
 8008658:	08008689 	.word	0x08008689
 800865c:	08008689 	.word	0x08008689
 8008660:	08008689 	.word	0x08008689
 8008664:	08008689 	.word	0x08008689
 8008668:	08008689 	.word	0x08008689
 800866c:	08008689 	.word	0x08008689
 8008670:	08008689 	.word	0x08008689
 8008674:	08008689 	.word	0x08008689
 8008678:	08008689 	.word	0x08008689
 800867c:	08008689 	.word	0x08008689
 8008680:	08008689 	.word	0x08008689
 8008684:	08008689 	.word	0x08008689
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008688:	bf00      	nop
  }

  return (USBD_OK);
 800868a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800868c:	4618      	mov	r0, r3
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80086a2:	6879      	ldr	r1, [r7, #4]
 80086a4:	4805      	ldr	r0, [pc, #20]	@ (80086bc <CDC_Receive_FS+0x24>)
 80086a6:	f7fe fbb7 	bl	8006e18 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80086aa:	4804      	ldr	r0, [pc, #16]	@ (80086bc <CDC_Receive_FS+0x24>)
 80086ac:	f7fe fc12 	bl	8006ed4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80086b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3708      	adds	r7, #8
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	20000404 	.word	0x20000404

080086c0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	460b      	mov	r3, r1
 80086ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80086cc:	2300      	movs	r3, #0
 80086ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80086d0:	4b0d      	ldr	r3, [pc, #52]	@ (8008708 <CDC_Transmit_FS+0x48>)
 80086d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80086d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d001      	beq.n	80086e6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e00b      	b.n	80086fe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80086e6:	887b      	ldrh	r3, [r7, #2]
 80086e8:	461a      	mov	r2, r3
 80086ea:	6879      	ldr	r1, [r7, #4]
 80086ec:	4806      	ldr	r0, [pc, #24]	@ (8008708 <CDC_Transmit_FS+0x48>)
 80086ee:	f7fe fb71 	bl	8006dd4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80086f2:	4805      	ldr	r0, [pc, #20]	@ (8008708 <CDC_Transmit_FS+0x48>)
 80086f4:	f7fe fbae 	bl	8006e54 <USBD_CDC_TransmitPacket>
 80086f8:	4603      	mov	r3, r0
 80086fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80086fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	20000404 	.word	0x20000404

0800870c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800870c:	b480      	push	{r7}
 800870e:	b087      	sub	sp, #28
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	4613      	mov	r3, r2
 8008718:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800871a:	2300      	movs	r3, #0
 800871c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800871e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008722:	4618      	mov	r0, r3
 8008724:	371c      	adds	r7, #28
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
	...

08008730 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	4603      	mov	r3, r0
 8008738:	6039      	str	r1, [r7, #0]
 800873a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	2212      	movs	r2, #18
 8008740:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008742:	4b03      	ldr	r3, [pc, #12]	@ (8008750 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008744:	4618      	mov	r0, r3
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr
 8008750:	200000c8 	.word	0x200000c8

08008754 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	4603      	mov	r3, r0
 800875c:	6039      	str	r1, [r7, #0]
 800875e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	2204      	movs	r2, #4
 8008764:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008766:	4b03      	ldr	r3, [pc, #12]	@ (8008774 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008768:	4618      	mov	r0, r3
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr
 8008774:	200000dc 	.word	0x200000dc

08008778 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	4603      	mov	r3, r0
 8008780:	6039      	str	r1, [r7, #0]
 8008782:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008784:	79fb      	ldrb	r3, [r7, #7]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d105      	bne.n	8008796 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800878a:	683a      	ldr	r2, [r7, #0]
 800878c:	4907      	ldr	r1, [pc, #28]	@ (80087ac <USBD_FS_ProductStrDescriptor+0x34>)
 800878e:	4808      	ldr	r0, [pc, #32]	@ (80087b0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008790:	f7ff fdec 	bl	800836c <USBD_GetString>
 8008794:	e004      	b.n	80087a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	4904      	ldr	r1, [pc, #16]	@ (80087ac <USBD_FS_ProductStrDescriptor+0x34>)
 800879a:	4805      	ldr	r0, [pc, #20]	@ (80087b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800879c:	f7ff fde6 	bl	800836c <USBD_GetString>
  }
  return USBD_StrDesc;
 80087a0:	4b02      	ldr	r3, [pc, #8]	@ (80087ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	200016e0 	.word	0x200016e0
 80087b0:	0800bc10 	.word	0x0800bc10

080087b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	4603      	mov	r3, r0
 80087bc:	6039      	str	r1, [r7, #0]
 80087be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80087c0:	683a      	ldr	r2, [r7, #0]
 80087c2:	4904      	ldr	r1, [pc, #16]	@ (80087d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80087c4:	4804      	ldr	r0, [pc, #16]	@ (80087d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80087c6:	f7ff fdd1 	bl	800836c <USBD_GetString>
  return USBD_StrDesc;
 80087ca:	4b02      	ldr	r3, [pc, #8]	@ (80087d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3708      	adds	r7, #8
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	200016e0 	.word	0x200016e0
 80087d8:	0800bc28 	.word	0x0800bc28

080087dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	4603      	mov	r3, r0
 80087e4:	6039      	str	r1, [r7, #0]
 80087e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	221a      	movs	r2, #26
 80087ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80087ee:	f000 f843 	bl	8008878 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80087f2:	4b02      	ldr	r3, [pc, #8]	@ (80087fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	200000e0 	.word	0x200000e0

08008800 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	4603      	mov	r3, r0
 8008808:	6039      	str	r1, [r7, #0]
 800880a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800880c:	79fb      	ldrb	r3, [r7, #7]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d105      	bne.n	800881e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008812:	683a      	ldr	r2, [r7, #0]
 8008814:	4907      	ldr	r1, [pc, #28]	@ (8008834 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008816:	4808      	ldr	r0, [pc, #32]	@ (8008838 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008818:	f7ff fda8 	bl	800836c <USBD_GetString>
 800881c:	e004      	b.n	8008828 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800881e:	683a      	ldr	r2, [r7, #0]
 8008820:	4904      	ldr	r1, [pc, #16]	@ (8008834 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008822:	4805      	ldr	r0, [pc, #20]	@ (8008838 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008824:	f7ff fda2 	bl	800836c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008828:	4b02      	ldr	r3, [pc, #8]	@ (8008834 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800882a:	4618      	mov	r0, r3
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	200016e0 	.word	0x200016e0
 8008838:	0800bc3c 	.word	0x0800bc3c

0800883c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	4603      	mov	r3, r0
 8008844:	6039      	str	r1, [r7, #0]
 8008846:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008848:	79fb      	ldrb	r3, [r7, #7]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d105      	bne.n	800885a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	4907      	ldr	r1, [pc, #28]	@ (8008870 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008852:	4808      	ldr	r0, [pc, #32]	@ (8008874 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008854:	f7ff fd8a 	bl	800836c <USBD_GetString>
 8008858:	e004      	b.n	8008864 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800885a:	683a      	ldr	r2, [r7, #0]
 800885c:	4904      	ldr	r1, [pc, #16]	@ (8008870 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800885e:	4805      	ldr	r0, [pc, #20]	@ (8008874 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008860:	f7ff fd84 	bl	800836c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008864:	4b02      	ldr	r3, [pc, #8]	@ (8008870 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008866:	4618      	mov	r0, r3
 8008868:	3708      	adds	r7, #8
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	200016e0 	.word	0x200016e0
 8008874:	0800bc48 	.word	0x0800bc48

08008878 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800887e:	4b0f      	ldr	r3, [pc, #60]	@ (80088bc <Get_SerialNum+0x44>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008884:	4b0e      	ldr	r3, [pc, #56]	@ (80088c0 <Get_SerialNum+0x48>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800888a:	4b0e      	ldr	r3, [pc, #56]	@ (80088c4 <Get_SerialNum+0x4c>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4413      	add	r3, r2
 8008896:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d009      	beq.n	80088b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800889e:	2208      	movs	r2, #8
 80088a0:	4909      	ldr	r1, [pc, #36]	@ (80088c8 <Get_SerialNum+0x50>)
 80088a2:	68f8      	ldr	r0, [r7, #12]
 80088a4:	f000 f814 	bl	80088d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80088a8:	2204      	movs	r2, #4
 80088aa:	4908      	ldr	r1, [pc, #32]	@ (80088cc <Get_SerialNum+0x54>)
 80088ac:	68b8      	ldr	r0, [r7, #8]
 80088ae:	f000 f80f 	bl	80088d0 <IntToUnicode>
  }
}
 80088b2:	bf00      	nop
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	1fff7a10 	.word	0x1fff7a10
 80088c0:	1fff7a14 	.word	0x1fff7a14
 80088c4:	1fff7a18 	.word	0x1fff7a18
 80088c8:	200000e2 	.word	0x200000e2
 80088cc:	200000f2 	.word	0x200000f2

080088d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b087      	sub	sp, #28
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	4613      	mov	r3, r2
 80088dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80088de:	2300      	movs	r3, #0
 80088e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80088e2:	2300      	movs	r3, #0
 80088e4:	75fb      	strb	r3, [r7, #23]
 80088e6:	e027      	b.n	8008938 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	0f1b      	lsrs	r3, r3, #28
 80088ec:	2b09      	cmp	r3, #9
 80088ee:	d80b      	bhi.n	8008908 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	0f1b      	lsrs	r3, r3, #28
 80088f4:	b2da      	uxtb	r2, r3
 80088f6:	7dfb      	ldrb	r3, [r7, #23]
 80088f8:	005b      	lsls	r3, r3, #1
 80088fa:	4619      	mov	r1, r3
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	440b      	add	r3, r1
 8008900:	3230      	adds	r2, #48	@ 0x30
 8008902:	b2d2      	uxtb	r2, r2
 8008904:	701a      	strb	r2, [r3, #0]
 8008906:	e00a      	b.n	800891e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	0f1b      	lsrs	r3, r3, #28
 800890c:	b2da      	uxtb	r2, r3
 800890e:	7dfb      	ldrb	r3, [r7, #23]
 8008910:	005b      	lsls	r3, r3, #1
 8008912:	4619      	mov	r1, r3
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	440b      	add	r3, r1
 8008918:	3237      	adds	r2, #55	@ 0x37
 800891a:	b2d2      	uxtb	r2, r2
 800891c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	011b      	lsls	r3, r3, #4
 8008922:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008924:	7dfb      	ldrb	r3, [r7, #23]
 8008926:	005b      	lsls	r3, r3, #1
 8008928:	3301      	adds	r3, #1
 800892a:	68ba      	ldr	r2, [r7, #8]
 800892c:	4413      	add	r3, r2
 800892e:	2200      	movs	r2, #0
 8008930:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008932:	7dfb      	ldrb	r3, [r7, #23]
 8008934:	3301      	adds	r3, #1
 8008936:	75fb      	strb	r3, [r7, #23]
 8008938:	7dfa      	ldrb	r2, [r7, #23]
 800893a:	79fb      	ldrb	r3, [r7, #7]
 800893c:	429a      	cmp	r2, r3
 800893e:	d3d3      	bcc.n	80088e8 <IntToUnicode+0x18>
  }
}
 8008940:	bf00      	nop
 8008942:	bf00      	nop
 8008944:	371c      	adds	r7, #28
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
	...

08008950 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b08a      	sub	sp, #40	@ 0x28
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008958:	f107 0314 	add.w	r3, r7, #20
 800895c:	2200      	movs	r2, #0
 800895e:	601a      	str	r2, [r3, #0]
 8008960:	605a      	str	r2, [r3, #4]
 8008962:	609a      	str	r2, [r3, #8]
 8008964:	60da      	str	r2, [r3, #12]
 8008966:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008970:	d13a      	bne.n	80089e8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008972:	2300      	movs	r3, #0
 8008974:	613b      	str	r3, [r7, #16]
 8008976:	4b1e      	ldr	r3, [pc, #120]	@ (80089f0 <HAL_PCD_MspInit+0xa0>)
 8008978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800897a:	4a1d      	ldr	r2, [pc, #116]	@ (80089f0 <HAL_PCD_MspInit+0xa0>)
 800897c:	f043 0301 	orr.w	r3, r3, #1
 8008980:	6313      	str	r3, [r2, #48]	@ 0x30
 8008982:	4b1b      	ldr	r3, [pc, #108]	@ (80089f0 <HAL_PCD_MspInit+0xa0>)
 8008984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008986:	f003 0301 	and.w	r3, r3, #1
 800898a:	613b      	str	r3, [r7, #16]
 800898c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800898e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008994:	2302      	movs	r3, #2
 8008996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008998:	2300      	movs	r3, #0
 800899a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800899c:	2303      	movs	r3, #3
 800899e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80089a0:	230a      	movs	r3, #10
 80089a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089a4:	f107 0314 	add.w	r3, r7, #20
 80089a8:	4619      	mov	r1, r3
 80089aa:	4812      	ldr	r0, [pc, #72]	@ (80089f4 <HAL_PCD_MspInit+0xa4>)
 80089ac:	f7f9 f9c2 	bl	8001d34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80089b0:	4b0f      	ldr	r3, [pc, #60]	@ (80089f0 <HAL_PCD_MspInit+0xa0>)
 80089b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089b4:	4a0e      	ldr	r2, [pc, #56]	@ (80089f0 <HAL_PCD_MspInit+0xa0>)
 80089b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089ba:	6353      	str	r3, [r2, #52]	@ 0x34
 80089bc:	2300      	movs	r3, #0
 80089be:	60fb      	str	r3, [r7, #12]
 80089c0:	4b0b      	ldr	r3, [pc, #44]	@ (80089f0 <HAL_PCD_MspInit+0xa0>)
 80089c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089c4:	4a0a      	ldr	r2, [pc, #40]	@ (80089f0 <HAL_PCD_MspInit+0xa0>)
 80089c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80089ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80089cc:	4b08      	ldr	r3, [pc, #32]	@ (80089f0 <HAL_PCD_MspInit+0xa0>)
 80089ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089d4:	60fb      	str	r3, [r7, #12]
 80089d6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80089d8:	2200      	movs	r2, #0
 80089da:	2100      	movs	r1, #0
 80089dc:	2043      	movs	r0, #67	@ 0x43
 80089de:	f7f9 f972 	bl	8001cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80089e2:	2043      	movs	r0, #67	@ 0x43
 80089e4:	f7f9 f98b 	bl	8001cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80089e8:	bf00      	nop
 80089ea:	3728      	adds	r7, #40	@ 0x28
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	40023800 	.word	0x40023800
 80089f4:	40020000 	.word	0x40020000

080089f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	4610      	mov	r0, r2
 8008a10:	f7fe fb49 	bl	80070a6 <USBD_LL_SetupStage>
}
 8008a14:	bf00      	nop
 8008a16:	3708      	adds	r7, #8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	460b      	mov	r3, r1
 8008a26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008a2e:	78fa      	ldrb	r2, [r7, #3]
 8008a30:	6879      	ldr	r1, [r7, #4]
 8008a32:	4613      	mov	r3, r2
 8008a34:	00db      	lsls	r3, r3, #3
 8008a36:	4413      	add	r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	440b      	add	r3, r1
 8008a3c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	78fb      	ldrb	r3, [r7, #3]
 8008a44:	4619      	mov	r1, r3
 8008a46:	f7fe fb83 	bl	8007150 <USBD_LL_DataOutStage>
}
 8008a4a:	bf00      	nop
 8008a4c:	3708      	adds	r7, #8
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b082      	sub	sp, #8
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008a64:	78fa      	ldrb	r2, [r7, #3]
 8008a66:	6879      	ldr	r1, [r7, #4]
 8008a68:	4613      	mov	r3, r2
 8008a6a:	00db      	lsls	r3, r3, #3
 8008a6c:	4413      	add	r3, r2
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	440b      	add	r3, r1
 8008a72:	3320      	adds	r3, #32
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	78fb      	ldrb	r3, [r7, #3]
 8008a78:	4619      	mov	r1, r3
 8008a7a:	f7fe fc1c 	bl	80072b6 <USBD_LL_DataInStage>
}
 8008a7e:	bf00      	nop
 8008a80:	3708      	adds	r7, #8
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b082      	sub	sp, #8
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7fe fd56 	bl	8007546 <USBD_LL_SOF>
}
 8008a9a:	bf00      	nop
 8008a9c:	3708      	adds	r7, #8
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b084      	sub	sp, #16
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	79db      	ldrb	r3, [r3, #7]
 8008ab2:	2b02      	cmp	r3, #2
 8008ab4:	d001      	beq.n	8008aba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008ab6:	f7f8 fccd 	bl	8001454 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ac0:	7bfa      	ldrb	r2, [r7, #15]
 8008ac2:	4611      	mov	r1, r2
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7fe fcfa 	bl	80074be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7fe fca2 	bl	800741a <USBD_LL_Reset>
}
 8008ad6:	bf00      	nop
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
	...

08008ae0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7fe fcf5 	bl	80074de <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	6812      	ldr	r2, [r2, #0]
 8008b02:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008b06:	f043 0301 	orr.w	r3, r3, #1
 8008b0a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	7adb      	ldrb	r3, [r3, #11]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d005      	beq.n	8008b20 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b14:	4b04      	ldr	r3, [pc, #16]	@ (8008b28 <HAL_PCD_SuspendCallback+0x48>)
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	4a03      	ldr	r2, [pc, #12]	@ (8008b28 <HAL_PCD_SuspendCallback+0x48>)
 8008b1a:	f043 0306 	orr.w	r3, r3, #6
 8008b1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008b20:	bf00      	nop
 8008b22:	3708      	adds	r7, #8
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	e000ed00 	.word	0xe000ed00

08008b2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fe fceb 	bl	8007516 <USBD_LL_Resume>
}
 8008b40:	bf00      	nop
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	460b      	mov	r3, r1
 8008b52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b5a:	78fa      	ldrb	r2, [r7, #3]
 8008b5c:	4611      	mov	r1, r2
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7fe fd43 	bl	80075ea <USBD_LL_IsoOUTIncomplete>
}
 8008b64:	bf00      	nop
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	460b      	mov	r3, r1
 8008b76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b7e:	78fa      	ldrb	r2, [r7, #3]
 8008b80:	4611      	mov	r1, r2
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7fe fcff 	bl	8007586 <USBD_LL_IsoINIncomplete>
}
 8008b88:	bf00      	nop
 8008b8a:	3708      	adds	r7, #8
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7fe fd55 	bl	800764e <USBD_LL_DevConnected>
}
 8008ba4:	bf00      	nop
 8008ba6:	3708      	adds	r7, #8
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7fe fd52 	bl	8007664 <USBD_LL_DevDisconnected>
}
 8008bc0:	bf00      	nop
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d13c      	bne.n	8008c52 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008bd8:	4a20      	ldr	r2, [pc, #128]	@ (8008c5c <USBD_LL_Init+0x94>)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a1e      	ldr	r2, [pc, #120]	@ (8008c5c <USBD_LL_Init+0x94>)
 8008be4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008be8:	4b1c      	ldr	r3, [pc, #112]	@ (8008c5c <USBD_LL_Init+0x94>)
 8008bea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008bee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8008c5c <USBD_LL_Init+0x94>)
 8008bf2:	2204      	movs	r2, #4
 8008bf4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008bf6:	4b19      	ldr	r3, [pc, #100]	@ (8008c5c <USBD_LL_Init+0x94>)
 8008bf8:	2202      	movs	r2, #2
 8008bfa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008bfc:	4b17      	ldr	r3, [pc, #92]	@ (8008c5c <USBD_LL_Init+0x94>)
 8008bfe:	2200      	movs	r2, #0
 8008c00:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008c02:	4b16      	ldr	r3, [pc, #88]	@ (8008c5c <USBD_LL_Init+0x94>)
 8008c04:	2202      	movs	r2, #2
 8008c06:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008c08:	4b14      	ldr	r3, [pc, #80]	@ (8008c5c <USBD_LL_Init+0x94>)
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008c0e:	4b13      	ldr	r3, [pc, #76]	@ (8008c5c <USBD_LL_Init+0x94>)
 8008c10:	2200      	movs	r2, #0
 8008c12:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008c14:	4b11      	ldr	r3, [pc, #68]	@ (8008c5c <USBD_LL_Init+0x94>)
 8008c16:	2200      	movs	r2, #0
 8008c18:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008c1a:	4b10      	ldr	r3, [pc, #64]	@ (8008c5c <USBD_LL_Init+0x94>)
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008c20:	4b0e      	ldr	r3, [pc, #56]	@ (8008c5c <USBD_LL_Init+0x94>)
 8008c22:	2200      	movs	r2, #0
 8008c24:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008c26:	480d      	ldr	r0, [pc, #52]	@ (8008c5c <USBD_LL_Init+0x94>)
 8008c28:	f7f9 fa08 	bl	800203c <HAL_PCD_Init>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d001      	beq.n	8008c36 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008c32:	f7f8 fc0f 	bl	8001454 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008c36:	2180      	movs	r1, #128	@ 0x80
 8008c38:	4808      	ldr	r0, [pc, #32]	@ (8008c5c <USBD_LL_Init+0x94>)
 8008c3a:	f7fa fc34 	bl	80034a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008c3e:	2240      	movs	r2, #64	@ 0x40
 8008c40:	2100      	movs	r1, #0
 8008c42:	4806      	ldr	r0, [pc, #24]	@ (8008c5c <USBD_LL_Init+0x94>)
 8008c44:	f7fa fbe8 	bl	8003418 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008c48:	2280      	movs	r2, #128	@ 0x80
 8008c4a:	2101      	movs	r1, #1
 8008c4c:	4803      	ldr	r0, [pc, #12]	@ (8008c5c <USBD_LL_Init+0x94>)
 8008c4e:	f7fa fbe3 	bl	8003418 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3708      	adds	r7, #8
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	200018e0 	.word	0x200018e0

08008c60 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7f9 faef 	bl	800225a <HAL_PCD_Start>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c80:	7bfb      	ldrb	r3, [r7, #15]
 8008c82:	4618      	mov	r0, r3
 8008c84:	f000 f942 	bl	8008f0c <USBD_Get_USB_Status>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b084      	sub	sp, #16
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
 8008c9e:	4608      	mov	r0, r1
 8008ca0:	4611      	mov	r1, r2
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	70fb      	strb	r3, [r7, #3]
 8008ca8:	460b      	mov	r3, r1
 8008caa:	70bb      	strb	r3, [r7, #2]
 8008cac:	4613      	mov	r3, r2
 8008cae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008cbe:	78bb      	ldrb	r3, [r7, #2]
 8008cc0:	883a      	ldrh	r2, [r7, #0]
 8008cc2:	78f9      	ldrb	r1, [r7, #3]
 8008cc4:	f7f9 ffc3 	bl	8002c4e <HAL_PCD_EP_Open>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ccc:	7bfb      	ldrb	r3, [r7, #15]
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f000 f91c 	bl	8008f0c <USBD_Get_USB_Status>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b084      	sub	sp, #16
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
 8008cea:	460b      	mov	r3, r1
 8008cec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008cfc:	78fa      	ldrb	r2, [r7, #3]
 8008cfe:	4611      	mov	r1, r2
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7fa f80e 	bl	8002d22 <HAL_PCD_EP_Close>
 8008d06:	4603      	mov	r3, r0
 8008d08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d0a:	7bfb      	ldrb	r3, [r7, #15]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f000 f8fd 	bl	8008f0c <USBD_Get_USB_Status>
 8008d12:	4603      	mov	r3, r0
 8008d14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d16:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	460b      	mov	r3, r1
 8008d2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d30:	2300      	movs	r3, #0
 8008d32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d3a:	78fa      	ldrb	r2, [r7, #3]
 8008d3c:	4611      	mov	r1, r2
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7fa f8c6 	bl	8002ed0 <HAL_PCD_EP_SetStall>
 8008d44:	4603      	mov	r3, r0
 8008d46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d48:	7bfb      	ldrb	r3, [r7, #15]
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f000 f8de 	bl	8008f0c <USBD_Get_USB_Status>
 8008d50:	4603      	mov	r3, r0
 8008d52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d54:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b084      	sub	sp, #16
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	460b      	mov	r3, r1
 8008d68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d78:	78fa      	ldrb	r2, [r7, #3]
 8008d7a:	4611      	mov	r1, r2
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7fa f90a 	bl	8002f96 <HAL_PCD_EP_ClrStall>
 8008d82:	4603      	mov	r3, r0
 8008d84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d86:	7bfb      	ldrb	r3, [r7, #15]
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f000 f8bf 	bl	8008f0c <USBD_Get_USB_Status>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d92:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	460b      	mov	r3, r1
 8008da6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008dae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008db0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	da0b      	bge.n	8008dd0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008db8:	78fb      	ldrb	r3, [r7, #3]
 8008dba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008dbe:	68f9      	ldr	r1, [r7, #12]
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	00db      	lsls	r3, r3, #3
 8008dc4:	4413      	add	r3, r2
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	440b      	add	r3, r1
 8008dca:	3316      	adds	r3, #22
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	e00b      	b.n	8008de8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008dd0:	78fb      	ldrb	r3, [r7, #3]
 8008dd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008dd6:	68f9      	ldr	r1, [r7, #12]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	00db      	lsls	r3, r3, #3
 8008ddc:	4413      	add	r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	440b      	add	r3, r1
 8008de2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008de6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3714      	adds	r7, #20
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e00:	2300      	movs	r3, #0
 8008e02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e04:	2300      	movs	r3, #0
 8008e06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e0e:	78fa      	ldrb	r2, [r7, #3]
 8008e10:	4611      	mov	r1, r2
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7f9 fef7 	bl	8002c06 <HAL_PCD_SetAddress>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e1c:	7bfb      	ldrb	r3, [r7, #15]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f000 f874 	bl	8008f0c <USBD_Get_USB_Status>
 8008e24:	4603      	mov	r3, r0
 8008e26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e28:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b086      	sub	sp, #24
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	60f8      	str	r0, [r7, #12]
 8008e3a:	607a      	str	r2, [r7, #4]
 8008e3c:	603b      	str	r3, [r7, #0]
 8008e3e:	460b      	mov	r3, r1
 8008e40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e42:	2300      	movs	r3, #0
 8008e44:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e46:	2300      	movs	r3, #0
 8008e48:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008e50:	7af9      	ldrb	r1, [r7, #11]
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	f7fa f801 	bl	8002e5c <HAL_PCD_EP_Transmit>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e5e:	7dfb      	ldrb	r3, [r7, #23]
 8008e60:	4618      	mov	r0, r3
 8008e62:	f000 f853 	bl	8008f0c <USBD_Get_USB_Status>
 8008e66:	4603      	mov	r3, r0
 8008e68:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e6a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3718      	adds	r7, #24
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b086      	sub	sp, #24
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	607a      	str	r2, [r7, #4]
 8008e7e:	603b      	str	r3, [r7, #0]
 8008e80:	460b      	mov	r3, r1
 8008e82:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e84:	2300      	movs	r3, #0
 8008e86:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008e92:	7af9      	ldrb	r1, [r7, #11]
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	f7f9 ff8d 	bl	8002db6 <HAL_PCD_EP_Receive>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ea0:	7dfb      	ldrb	r3, [r7, #23]
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f000 f832 	bl	8008f0c <USBD_Get_USB_Status>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008eac:	7dbb      	ldrb	r3, [r7, #22]
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3718      	adds	r7, #24
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b082      	sub	sp, #8
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ec8:	78fa      	ldrb	r2, [r7, #3]
 8008eca:	4611      	mov	r1, r2
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7f9 ffad 	bl	8002e2c <HAL_PCD_EP_GetRxCount>
 8008ed2:	4603      	mov	r3, r0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3708      	adds	r7, #8
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008ee4:	4b03      	ldr	r3, [pc, #12]	@ (8008ef4 <USBD_static_malloc+0x18>)
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	370c      	adds	r7, #12
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	20001dc4 	.word	0x20001dc4

08008ef8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]

}
 8008f00:	bf00      	nop
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	4603      	mov	r3, r0
 8008f14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f16:	2300      	movs	r3, #0
 8008f18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008f1a:	79fb      	ldrb	r3, [r7, #7]
 8008f1c:	2b03      	cmp	r3, #3
 8008f1e:	d817      	bhi.n	8008f50 <USBD_Get_USB_Status+0x44>
 8008f20:	a201      	add	r2, pc, #4	@ (adr r2, 8008f28 <USBD_Get_USB_Status+0x1c>)
 8008f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f26:	bf00      	nop
 8008f28:	08008f39 	.word	0x08008f39
 8008f2c:	08008f3f 	.word	0x08008f3f
 8008f30:	08008f45 	.word	0x08008f45
 8008f34:	08008f4b 	.word	0x08008f4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f3c:	e00b      	b.n	8008f56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f3e:	2303      	movs	r3, #3
 8008f40:	73fb      	strb	r3, [r7, #15]
    break;
 8008f42:	e008      	b.n	8008f56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f44:	2301      	movs	r3, #1
 8008f46:	73fb      	strb	r3, [r7, #15]
    break;
 8008f48:	e005      	b.n	8008f56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	73fb      	strb	r3, [r7, #15]
    break;
 8008f4e:	e002      	b.n	8008f56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008f50:	2303      	movs	r3, #3
 8008f52:	73fb      	strb	r3, [r7, #15]
    break;
 8008f54:	bf00      	nop
  }
  return usb_status;
 8008f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3714      	adds	r7, #20
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <__cvt>:
 8008f64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f68:	ec57 6b10 	vmov	r6, r7, d0
 8008f6c:	2f00      	cmp	r7, #0
 8008f6e:	460c      	mov	r4, r1
 8008f70:	4619      	mov	r1, r3
 8008f72:	463b      	mov	r3, r7
 8008f74:	bfbb      	ittet	lt
 8008f76:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008f7a:	461f      	movlt	r7, r3
 8008f7c:	2300      	movge	r3, #0
 8008f7e:	232d      	movlt	r3, #45	@ 0x2d
 8008f80:	700b      	strb	r3, [r1, #0]
 8008f82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f84:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008f88:	4691      	mov	r9, r2
 8008f8a:	f023 0820 	bic.w	r8, r3, #32
 8008f8e:	bfbc      	itt	lt
 8008f90:	4632      	movlt	r2, r6
 8008f92:	4616      	movlt	r6, r2
 8008f94:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008f98:	d005      	beq.n	8008fa6 <__cvt+0x42>
 8008f9a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008f9e:	d100      	bne.n	8008fa2 <__cvt+0x3e>
 8008fa0:	3401      	adds	r4, #1
 8008fa2:	2102      	movs	r1, #2
 8008fa4:	e000      	b.n	8008fa8 <__cvt+0x44>
 8008fa6:	2103      	movs	r1, #3
 8008fa8:	ab03      	add	r3, sp, #12
 8008faa:	9301      	str	r3, [sp, #4]
 8008fac:	ab02      	add	r3, sp, #8
 8008fae:	9300      	str	r3, [sp, #0]
 8008fb0:	ec47 6b10 	vmov	d0, r6, r7
 8008fb4:	4653      	mov	r3, sl
 8008fb6:	4622      	mov	r2, r4
 8008fb8:	f000 fe5a 	bl	8009c70 <_dtoa_r>
 8008fbc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008fc0:	4605      	mov	r5, r0
 8008fc2:	d119      	bne.n	8008ff8 <__cvt+0x94>
 8008fc4:	f019 0f01 	tst.w	r9, #1
 8008fc8:	d00e      	beq.n	8008fe8 <__cvt+0x84>
 8008fca:	eb00 0904 	add.w	r9, r0, r4
 8008fce:	2200      	movs	r2, #0
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	4630      	mov	r0, r6
 8008fd4:	4639      	mov	r1, r7
 8008fd6:	f7f7 fd7f 	bl	8000ad8 <__aeabi_dcmpeq>
 8008fda:	b108      	cbz	r0, 8008fe0 <__cvt+0x7c>
 8008fdc:	f8cd 900c 	str.w	r9, [sp, #12]
 8008fe0:	2230      	movs	r2, #48	@ 0x30
 8008fe2:	9b03      	ldr	r3, [sp, #12]
 8008fe4:	454b      	cmp	r3, r9
 8008fe6:	d31e      	bcc.n	8009026 <__cvt+0xc2>
 8008fe8:	9b03      	ldr	r3, [sp, #12]
 8008fea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008fec:	1b5b      	subs	r3, r3, r5
 8008fee:	4628      	mov	r0, r5
 8008ff0:	6013      	str	r3, [r2, #0]
 8008ff2:	b004      	add	sp, #16
 8008ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ff8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008ffc:	eb00 0904 	add.w	r9, r0, r4
 8009000:	d1e5      	bne.n	8008fce <__cvt+0x6a>
 8009002:	7803      	ldrb	r3, [r0, #0]
 8009004:	2b30      	cmp	r3, #48	@ 0x30
 8009006:	d10a      	bne.n	800901e <__cvt+0xba>
 8009008:	2200      	movs	r2, #0
 800900a:	2300      	movs	r3, #0
 800900c:	4630      	mov	r0, r6
 800900e:	4639      	mov	r1, r7
 8009010:	f7f7 fd62 	bl	8000ad8 <__aeabi_dcmpeq>
 8009014:	b918      	cbnz	r0, 800901e <__cvt+0xba>
 8009016:	f1c4 0401 	rsb	r4, r4, #1
 800901a:	f8ca 4000 	str.w	r4, [sl]
 800901e:	f8da 3000 	ldr.w	r3, [sl]
 8009022:	4499      	add	r9, r3
 8009024:	e7d3      	b.n	8008fce <__cvt+0x6a>
 8009026:	1c59      	adds	r1, r3, #1
 8009028:	9103      	str	r1, [sp, #12]
 800902a:	701a      	strb	r2, [r3, #0]
 800902c:	e7d9      	b.n	8008fe2 <__cvt+0x7e>

0800902e <__exponent>:
 800902e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009030:	2900      	cmp	r1, #0
 8009032:	bfba      	itte	lt
 8009034:	4249      	neglt	r1, r1
 8009036:	232d      	movlt	r3, #45	@ 0x2d
 8009038:	232b      	movge	r3, #43	@ 0x2b
 800903a:	2909      	cmp	r1, #9
 800903c:	7002      	strb	r2, [r0, #0]
 800903e:	7043      	strb	r3, [r0, #1]
 8009040:	dd29      	ble.n	8009096 <__exponent+0x68>
 8009042:	f10d 0307 	add.w	r3, sp, #7
 8009046:	461d      	mov	r5, r3
 8009048:	270a      	movs	r7, #10
 800904a:	461a      	mov	r2, r3
 800904c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009050:	fb07 1416 	mls	r4, r7, r6, r1
 8009054:	3430      	adds	r4, #48	@ 0x30
 8009056:	f802 4c01 	strb.w	r4, [r2, #-1]
 800905a:	460c      	mov	r4, r1
 800905c:	2c63      	cmp	r4, #99	@ 0x63
 800905e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009062:	4631      	mov	r1, r6
 8009064:	dcf1      	bgt.n	800904a <__exponent+0x1c>
 8009066:	3130      	adds	r1, #48	@ 0x30
 8009068:	1e94      	subs	r4, r2, #2
 800906a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800906e:	1c41      	adds	r1, r0, #1
 8009070:	4623      	mov	r3, r4
 8009072:	42ab      	cmp	r3, r5
 8009074:	d30a      	bcc.n	800908c <__exponent+0x5e>
 8009076:	f10d 0309 	add.w	r3, sp, #9
 800907a:	1a9b      	subs	r3, r3, r2
 800907c:	42ac      	cmp	r4, r5
 800907e:	bf88      	it	hi
 8009080:	2300      	movhi	r3, #0
 8009082:	3302      	adds	r3, #2
 8009084:	4403      	add	r3, r0
 8009086:	1a18      	subs	r0, r3, r0
 8009088:	b003      	add	sp, #12
 800908a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800908c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009090:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009094:	e7ed      	b.n	8009072 <__exponent+0x44>
 8009096:	2330      	movs	r3, #48	@ 0x30
 8009098:	3130      	adds	r1, #48	@ 0x30
 800909a:	7083      	strb	r3, [r0, #2]
 800909c:	70c1      	strb	r1, [r0, #3]
 800909e:	1d03      	adds	r3, r0, #4
 80090a0:	e7f1      	b.n	8009086 <__exponent+0x58>
	...

080090a4 <_printf_float>:
 80090a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a8:	b08d      	sub	sp, #52	@ 0x34
 80090aa:	460c      	mov	r4, r1
 80090ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80090b0:	4616      	mov	r6, r2
 80090b2:	461f      	mov	r7, r3
 80090b4:	4605      	mov	r5, r0
 80090b6:	f000 fcdb 	bl	8009a70 <_localeconv_r>
 80090ba:	6803      	ldr	r3, [r0, #0]
 80090bc:	9304      	str	r3, [sp, #16]
 80090be:	4618      	mov	r0, r3
 80090c0:	f7f7 f8de 	bl	8000280 <strlen>
 80090c4:	2300      	movs	r3, #0
 80090c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80090c8:	f8d8 3000 	ldr.w	r3, [r8]
 80090cc:	9005      	str	r0, [sp, #20]
 80090ce:	3307      	adds	r3, #7
 80090d0:	f023 0307 	bic.w	r3, r3, #7
 80090d4:	f103 0208 	add.w	r2, r3, #8
 80090d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80090dc:	f8d4 b000 	ldr.w	fp, [r4]
 80090e0:	f8c8 2000 	str.w	r2, [r8]
 80090e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80090ec:	9307      	str	r3, [sp, #28]
 80090ee:	f8cd 8018 	str.w	r8, [sp, #24]
 80090f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80090f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090fa:	4b9c      	ldr	r3, [pc, #624]	@ (800936c <_printf_float+0x2c8>)
 80090fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009100:	f7f7 fd1c 	bl	8000b3c <__aeabi_dcmpun>
 8009104:	bb70      	cbnz	r0, 8009164 <_printf_float+0xc0>
 8009106:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800910a:	4b98      	ldr	r3, [pc, #608]	@ (800936c <_printf_float+0x2c8>)
 800910c:	f04f 32ff 	mov.w	r2, #4294967295
 8009110:	f7f7 fcf6 	bl	8000b00 <__aeabi_dcmple>
 8009114:	bb30      	cbnz	r0, 8009164 <_printf_float+0xc0>
 8009116:	2200      	movs	r2, #0
 8009118:	2300      	movs	r3, #0
 800911a:	4640      	mov	r0, r8
 800911c:	4649      	mov	r1, r9
 800911e:	f7f7 fce5 	bl	8000aec <__aeabi_dcmplt>
 8009122:	b110      	cbz	r0, 800912a <_printf_float+0x86>
 8009124:	232d      	movs	r3, #45	@ 0x2d
 8009126:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800912a:	4a91      	ldr	r2, [pc, #580]	@ (8009370 <_printf_float+0x2cc>)
 800912c:	4b91      	ldr	r3, [pc, #580]	@ (8009374 <_printf_float+0x2d0>)
 800912e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009132:	bf94      	ite	ls
 8009134:	4690      	movls	r8, r2
 8009136:	4698      	movhi	r8, r3
 8009138:	2303      	movs	r3, #3
 800913a:	6123      	str	r3, [r4, #16]
 800913c:	f02b 0304 	bic.w	r3, fp, #4
 8009140:	6023      	str	r3, [r4, #0]
 8009142:	f04f 0900 	mov.w	r9, #0
 8009146:	9700      	str	r7, [sp, #0]
 8009148:	4633      	mov	r3, r6
 800914a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800914c:	4621      	mov	r1, r4
 800914e:	4628      	mov	r0, r5
 8009150:	f000 f9d2 	bl	80094f8 <_printf_common>
 8009154:	3001      	adds	r0, #1
 8009156:	f040 808d 	bne.w	8009274 <_printf_float+0x1d0>
 800915a:	f04f 30ff 	mov.w	r0, #4294967295
 800915e:	b00d      	add	sp, #52	@ 0x34
 8009160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009164:	4642      	mov	r2, r8
 8009166:	464b      	mov	r3, r9
 8009168:	4640      	mov	r0, r8
 800916a:	4649      	mov	r1, r9
 800916c:	f7f7 fce6 	bl	8000b3c <__aeabi_dcmpun>
 8009170:	b140      	cbz	r0, 8009184 <_printf_float+0xe0>
 8009172:	464b      	mov	r3, r9
 8009174:	2b00      	cmp	r3, #0
 8009176:	bfbc      	itt	lt
 8009178:	232d      	movlt	r3, #45	@ 0x2d
 800917a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800917e:	4a7e      	ldr	r2, [pc, #504]	@ (8009378 <_printf_float+0x2d4>)
 8009180:	4b7e      	ldr	r3, [pc, #504]	@ (800937c <_printf_float+0x2d8>)
 8009182:	e7d4      	b.n	800912e <_printf_float+0x8a>
 8009184:	6863      	ldr	r3, [r4, #4]
 8009186:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800918a:	9206      	str	r2, [sp, #24]
 800918c:	1c5a      	adds	r2, r3, #1
 800918e:	d13b      	bne.n	8009208 <_printf_float+0x164>
 8009190:	2306      	movs	r3, #6
 8009192:	6063      	str	r3, [r4, #4]
 8009194:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009198:	2300      	movs	r3, #0
 800919a:	6022      	str	r2, [r4, #0]
 800919c:	9303      	str	r3, [sp, #12]
 800919e:	ab0a      	add	r3, sp, #40	@ 0x28
 80091a0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80091a4:	ab09      	add	r3, sp, #36	@ 0x24
 80091a6:	9300      	str	r3, [sp, #0]
 80091a8:	6861      	ldr	r1, [r4, #4]
 80091aa:	ec49 8b10 	vmov	d0, r8, r9
 80091ae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80091b2:	4628      	mov	r0, r5
 80091b4:	f7ff fed6 	bl	8008f64 <__cvt>
 80091b8:	9b06      	ldr	r3, [sp, #24]
 80091ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80091bc:	2b47      	cmp	r3, #71	@ 0x47
 80091be:	4680      	mov	r8, r0
 80091c0:	d129      	bne.n	8009216 <_printf_float+0x172>
 80091c2:	1cc8      	adds	r0, r1, #3
 80091c4:	db02      	blt.n	80091cc <_printf_float+0x128>
 80091c6:	6863      	ldr	r3, [r4, #4]
 80091c8:	4299      	cmp	r1, r3
 80091ca:	dd41      	ble.n	8009250 <_printf_float+0x1ac>
 80091cc:	f1aa 0a02 	sub.w	sl, sl, #2
 80091d0:	fa5f fa8a 	uxtb.w	sl, sl
 80091d4:	3901      	subs	r1, #1
 80091d6:	4652      	mov	r2, sl
 80091d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80091dc:	9109      	str	r1, [sp, #36]	@ 0x24
 80091de:	f7ff ff26 	bl	800902e <__exponent>
 80091e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80091e4:	1813      	adds	r3, r2, r0
 80091e6:	2a01      	cmp	r2, #1
 80091e8:	4681      	mov	r9, r0
 80091ea:	6123      	str	r3, [r4, #16]
 80091ec:	dc02      	bgt.n	80091f4 <_printf_float+0x150>
 80091ee:	6822      	ldr	r2, [r4, #0]
 80091f0:	07d2      	lsls	r2, r2, #31
 80091f2:	d501      	bpl.n	80091f8 <_printf_float+0x154>
 80091f4:	3301      	adds	r3, #1
 80091f6:	6123      	str	r3, [r4, #16]
 80091f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d0a2      	beq.n	8009146 <_printf_float+0xa2>
 8009200:	232d      	movs	r3, #45	@ 0x2d
 8009202:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009206:	e79e      	b.n	8009146 <_printf_float+0xa2>
 8009208:	9a06      	ldr	r2, [sp, #24]
 800920a:	2a47      	cmp	r2, #71	@ 0x47
 800920c:	d1c2      	bne.n	8009194 <_printf_float+0xf0>
 800920e:	2b00      	cmp	r3, #0
 8009210:	d1c0      	bne.n	8009194 <_printf_float+0xf0>
 8009212:	2301      	movs	r3, #1
 8009214:	e7bd      	b.n	8009192 <_printf_float+0xee>
 8009216:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800921a:	d9db      	bls.n	80091d4 <_printf_float+0x130>
 800921c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009220:	d118      	bne.n	8009254 <_printf_float+0x1b0>
 8009222:	2900      	cmp	r1, #0
 8009224:	6863      	ldr	r3, [r4, #4]
 8009226:	dd0b      	ble.n	8009240 <_printf_float+0x19c>
 8009228:	6121      	str	r1, [r4, #16]
 800922a:	b913      	cbnz	r3, 8009232 <_printf_float+0x18e>
 800922c:	6822      	ldr	r2, [r4, #0]
 800922e:	07d0      	lsls	r0, r2, #31
 8009230:	d502      	bpl.n	8009238 <_printf_float+0x194>
 8009232:	3301      	adds	r3, #1
 8009234:	440b      	add	r3, r1
 8009236:	6123      	str	r3, [r4, #16]
 8009238:	65a1      	str	r1, [r4, #88]	@ 0x58
 800923a:	f04f 0900 	mov.w	r9, #0
 800923e:	e7db      	b.n	80091f8 <_printf_float+0x154>
 8009240:	b913      	cbnz	r3, 8009248 <_printf_float+0x1a4>
 8009242:	6822      	ldr	r2, [r4, #0]
 8009244:	07d2      	lsls	r2, r2, #31
 8009246:	d501      	bpl.n	800924c <_printf_float+0x1a8>
 8009248:	3302      	adds	r3, #2
 800924a:	e7f4      	b.n	8009236 <_printf_float+0x192>
 800924c:	2301      	movs	r3, #1
 800924e:	e7f2      	b.n	8009236 <_printf_float+0x192>
 8009250:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009254:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009256:	4299      	cmp	r1, r3
 8009258:	db05      	blt.n	8009266 <_printf_float+0x1c2>
 800925a:	6823      	ldr	r3, [r4, #0]
 800925c:	6121      	str	r1, [r4, #16]
 800925e:	07d8      	lsls	r0, r3, #31
 8009260:	d5ea      	bpl.n	8009238 <_printf_float+0x194>
 8009262:	1c4b      	adds	r3, r1, #1
 8009264:	e7e7      	b.n	8009236 <_printf_float+0x192>
 8009266:	2900      	cmp	r1, #0
 8009268:	bfd4      	ite	le
 800926a:	f1c1 0202 	rsble	r2, r1, #2
 800926e:	2201      	movgt	r2, #1
 8009270:	4413      	add	r3, r2
 8009272:	e7e0      	b.n	8009236 <_printf_float+0x192>
 8009274:	6823      	ldr	r3, [r4, #0]
 8009276:	055a      	lsls	r2, r3, #21
 8009278:	d407      	bmi.n	800928a <_printf_float+0x1e6>
 800927a:	6923      	ldr	r3, [r4, #16]
 800927c:	4642      	mov	r2, r8
 800927e:	4631      	mov	r1, r6
 8009280:	4628      	mov	r0, r5
 8009282:	47b8      	blx	r7
 8009284:	3001      	adds	r0, #1
 8009286:	d12b      	bne.n	80092e0 <_printf_float+0x23c>
 8009288:	e767      	b.n	800915a <_printf_float+0xb6>
 800928a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800928e:	f240 80dd 	bls.w	800944c <_printf_float+0x3a8>
 8009292:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009296:	2200      	movs	r2, #0
 8009298:	2300      	movs	r3, #0
 800929a:	f7f7 fc1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800929e:	2800      	cmp	r0, #0
 80092a0:	d033      	beq.n	800930a <_printf_float+0x266>
 80092a2:	4a37      	ldr	r2, [pc, #220]	@ (8009380 <_printf_float+0x2dc>)
 80092a4:	2301      	movs	r3, #1
 80092a6:	4631      	mov	r1, r6
 80092a8:	4628      	mov	r0, r5
 80092aa:	47b8      	blx	r7
 80092ac:	3001      	adds	r0, #1
 80092ae:	f43f af54 	beq.w	800915a <_printf_float+0xb6>
 80092b2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80092b6:	4543      	cmp	r3, r8
 80092b8:	db02      	blt.n	80092c0 <_printf_float+0x21c>
 80092ba:	6823      	ldr	r3, [r4, #0]
 80092bc:	07d8      	lsls	r0, r3, #31
 80092be:	d50f      	bpl.n	80092e0 <_printf_float+0x23c>
 80092c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092c4:	4631      	mov	r1, r6
 80092c6:	4628      	mov	r0, r5
 80092c8:	47b8      	blx	r7
 80092ca:	3001      	adds	r0, #1
 80092cc:	f43f af45 	beq.w	800915a <_printf_float+0xb6>
 80092d0:	f04f 0900 	mov.w	r9, #0
 80092d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80092d8:	f104 0a1a 	add.w	sl, r4, #26
 80092dc:	45c8      	cmp	r8, r9
 80092de:	dc09      	bgt.n	80092f4 <_printf_float+0x250>
 80092e0:	6823      	ldr	r3, [r4, #0]
 80092e2:	079b      	lsls	r3, r3, #30
 80092e4:	f100 8103 	bmi.w	80094ee <_printf_float+0x44a>
 80092e8:	68e0      	ldr	r0, [r4, #12]
 80092ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092ec:	4298      	cmp	r0, r3
 80092ee:	bfb8      	it	lt
 80092f0:	4618      	movlt	r0, r3
 80092f2:	e734      	b.n	800915e <_printf_float+0xba>
 80092f4:	2301      	movs	r3, #1
 80092f6:	4652      	mov	r2, sl
 80092f8:	4631      	mov	r1, r6
 80092fa:	4628      	mov	r0, r5
 80092fc:	47b8      	blx	r7
 80092fe:	3001      	adds	r0, #1
 8009300:	f43f af2b 	beq.w	800915a <_printf_float+0xb6>
 8009304:	f109 0901 	add.w	r9, r9, #1
 8009308:	e7e8      	b.n	80092dc <_printf_float+0x238>
 800930a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800930c:	2b00      	cmp	r3, #0
 800930e:	dc39      	bgt.n	8009384 <_printf_float+0x2e0>
 8009310:	4a1b      	ldr	r2, [pc, #108]	@ (8009380 <_printf_float+0x2dc>)
 8009312:	2301      	movs	r3, #1
 8009314:	4631      	mov	r1, r6
 8009316:	4628      	mov	r0, r5
 8009318:	47b8      	blx	r7
 800931a:	3001      	adds	r0, #1
 800931c:	f43f af1d 	beq.w	800915a <_printf_float+0xb6>
 8009320:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009324:	ea59 0303 	orrs.w	r3, r9, r3
 8009328:	d102      	bne.n	8009330 <_printf_float+0x28c>
 800932a:	6823      	ldr	r3, [r4, #0]
 800932c:	07d9      	lsls	r1, r3, #31
 800932e:	d5d7      	bpl.n	80092e0 <_printf_float+0x23c>
 8009330:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009334:	4631      	mov	r1, r6
 8009336:	4628      	mov	r0, r5
 8009338:	47b8      	blx	r7
 800933a:	3001      	adds	r0, #1
 800933c:	f43f af0d 	beq.w	800915a <_printf_float+0xb6>
 8009340:	f04f 0a00 	mov.w	sl, #0
 8009344:	f104 0b1a 	add.w	fp, r4, #26
 8009348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800934a:	425b      	negs	r3, r3
 800934c:	4553      	cmp	r3, sl
 800934e:	dc01      	bgt.n	8009354 <_printf_float+0x2b0>
 8009350:	464b      	mov	r3, r9
 8009352:	e793      	b.n	800927c <_printf_float+0x1d8>
 8009354:	2301      	movs	r3, #1
 8009356:	465a      	mov	r2, fp
 8009358:	4631      	mov	r1, r6
 800935a:	4628      	mov	r0, r5
 800935c:	47b8      	blx	r7
 800935e:	3001      	adds	r0, #1
 8009360:	f43f aefb 	beq.w	800915a <_printf_float+0xb6>
 8009364:	f10a 0a01 	add.w	sl, sl, #1
 8009368:	e7ee      	b.n	8009348 <_printf_float+0x2a4>
 800936a:	bf00      	nop
 800936c:	7fefffff 	.word	0x7fefffff
 8009370:	0800bc68 	.word	0x0800bc68
 8009374:	0800bc6c 	.word	0x0800bc6c
 8009378:	0800bc70 	.word	0x0800bc70
 800937c:	0800bc74 	.word	0x0800bc74
 8009380:	0800bc78 	.word	0x0800bc78
 8009384:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009386:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800938a:	4553      	cmp	r3, sl
 800938c:	bfa8      	it	ge
 800938e:	4653      	movge	r3, sl
 8009390:	2b00      	cmp	r3, #0
 8009392:	4699      	mov	r9, r3
 8009394:	dc36      	bgt.n	8009404 <_printf_float+0x360>
 8009396:	f04f 0b00 	mov.w	fp, #0
 800939a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800939e:	f104 021a 	add.w	r2, r4, #26
 80093a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80093a4:	9306      	str	r3, [sp, #24]
 80093a6:	eba3 0309 	sub.w	r3, r3, r9
 80093aa:	455b      	cmp	r3, fp
 80093ac:	dc31      	bgt.n	8009412 <_printf_float+0x36e>
 80093ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093b0:	459a      	cmp	sl, r3
 80093b2:	dc3a      	bgt.n	800942a <_printf_float+0x386>
 80093b4:	6823      	ldr	r3, [r4, #0]
 80093b6:	07da      	lsls	r2, r3, #31
 80093b8:	d437      	bmi.n	800942a <_printf_float+0x386>
 80093ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093bc:	ebaa 0903 	sub.w	r9, sl, r3
 80093c0:	9b06      	ldr	r3, [sp, #24]
 80093c2:	ebaa 0303 	sub.w	r3, sl, r3
 80093c6:	4599      	cmp	r9, r3
 80093c8:	bfa8      	it	ge
 80093ca:	4699      	movge	r9, r3
 80093cc:	f1b9 0f00 	cmp.w	r9, #0
 80093d0:	dc33      	bgt.n	800943a <_printf_float+0x396>
 80093d2:	f04f 0800 	mov.w	r8, #0
 80093d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093da:	f104 0b1a 	add.w	fp, r4, #26
 80093de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093e0:	ebaa 0303 	sub.w	r3, sl, r3
 80093e4:	eba3 0309 	sub.w	r3, r3, r9
 80093e8:	4543      	cmp	r3, r8
 80093ea:	f77f af79 	ble.w	80092e0 <_printf_float+0x23c>
 80093ee:	2301      	movs	r3, #1
 80093f0:	465a      	mov	r2, fp
 80093f2:	4631      	mov	r1, r6
 80093f4:	4628      	mov	r0, r5
 80093f6:	47b8      	blx	r7
 80093f8:	3001      	adds	r0, #1
 80093fa:	f43f aeae 	beq.w	800915a <_printf_float+0xb6>
 80093fe:	f108 0801 	add.w	r8, r8, #1
 8009402:	e7ec      	b.n	80093de <_printf_float+0x33a>
 8009404:	4642      	mov	r2, r8
 8009406:	4631      	mov	r1, r6
 8009408:	4628      	mov	r0, r5
 800940a:	47b8      	blx	r7
 800940c:	3001      	adds	r0, #1
 800940e:	d1c2      	bne.n	8009396 <_printf_float+0x2f2>
 8009410:	e6a3      	b.n	800915a <_printf_float+0xb6>
 8009412:	2301      	movs	r3, #1
 8009414:	4631      	mov	r1, r6
 8009416:	4628      	mov	r0, r5
 8009418:	9206      	str	r2, [sp, #24]
 800941a:	47b8      	blx	r7
 800941c:	3001      	adds	r0, #1
 800941e:	f43f ae9c 	beq.w	800915a <_printf_float+0xb6>
 8009422:	9a06      	ldr	r2, [sp, #24]
 8009424:	f10b 0b01 	add.w	fp, fp, #1
 8009428:	e7bb      	b.n	80093a2 <_printf_float+0x2fe>
 800942a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800942e:	4631      	mov	r1, r6
 8009430:	4628      	mov	r0, r5
 8009432:	47b8      	blx	r7
 8009434:	3001      	adds	r0, #1
 8009436:	d1c0      	bne.n	80093ba <_printf_float+0x316>
 8009438:	e68f      	b.n	800915a <_printf_float+0xb6>
 800943a:	9a06      	ldr	r2, [sp, #24]
 800943c:	464b      	mov	r3, r9
 800943e:	4442      	add	r2, r8
 8009440:	4631      	mov	r1, r6
 8009442:	4628      	mov	r0, r5
 8009444:	47b8      	blx	r7
 8009446:	3001      	adds	r0, #1
 8009448:	d1c3      	bne.n	80093d2 <_printf_float+0x32e>
 800944a:	e686      	b.n	800915a <_printf_float+0xb6>
 800944c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009450:	f1ba 0f01 	cmp.w	sl, #1
 8009454:	dc01      	bgt.n	800945a <_printf_float+0x3b6>
 8009456:	07db      	lsls	r3, r3, #31
 8009458:	d536      	bpl.n	80094c8 <_printf_float+0x424>
 800945a:	2301      	movs	r3, #1
 800945c:	4642      	mov	r2, r8
 800945e:	4631      	mov	r1, r6
 8009460:	4628      	mov	r0, r5
 8009462:	47b8      	blx	r7
 8009464:	3001      	adds	r0, #1
 8009466:	f43f ae78 	beq.w	800915a <_printf_float+0xb6>
 800946a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800946e:	4631      	mov	r1, r6
 8009470:	4628      	mov	r0, r5
 8009472:	47b8      	blx	r7
 8009474:	3001      	adds	r0, #1
 8009476:	f43f ae70 	beq.w	800915a <_printf_float+0xb6>
 800947a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800947e:	2200      	movs	r2, #0
 8009480:	2300      	movs	r3, #0
 8009482:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009486:	f7f7 fb27 	bl	8000ad8 <__aeabi_dcmpeq>
 800948a:	b9c0      	cbnz	r0, 80094be <_printf_float+0x41a>
 800948c:	4653      	mov	r3, sl
 800948e:	f108 0201 	add.w	r2, r8, #1
 8009492:	4631      	mov	r1, r6
 8009494:	4628      	mov	r0, r5
 8009496:	47b8      	blx	r7
 8009498:	3001      	adds	r0, #1
 800949a:	d10c      	bne.n	80094b6 <_printf_float+0x412>
 800949c:	e65d      	b.n	800915a <_printf_float+0xb6>
 800949e:	2301      	movs	r3, #1
 80094a0:	465a      	mov	r2, fp
 80094a2:	4631      	mov	r1, r6
 80094a4:	4628      	mov	r0, r5
 80094a6:	47b8      	blx	r7
 80094a8:	3001      	adds	r0, #1
 80094aa:	f43f ae56 	beq.w	800915a <_printf_float+0xb6>
 80094ae:	f108 0801 	add.w	r8, r8, #1
 80094b2:	45d0      	cmp	r8, sl
 80094b4:	dbf3      	blt.n	800949e <_printf_float+0x3fa>
 80094b6:	464b      	mov	r3, r9
 80094b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80094bc:	e6df      	b.n	800927e <_printf_float+0x1da>
 80094be:	f04f 0800 	mov.w	r8, #0
 80094c2:	f104 0b1a 	add.w	fp, r4, #26
 80094c6:	e7f4      	b.n	80094b2 <_printf_float+0x40e>
 80094c8:	2301      	movs	r3, #1
 80094ca:	4642      	mov	r2, r8
 80094cc:	e7e1      	b.n	8009492 <_printf_float+0x3ee>
 80094ce:	2301      	movs	r3, #1
 80094d0:	464a      	mov	r2, r9
 80094d2:	4631      	mov	r1, r6
 80094d4:	4628      	mov	r0, r5
 80094d6:	47b8      	blx	r7
 80094d8:	3001      	adds	r0, #1
 80094da:	f43f ae3e 	beq.w	800915a <_printf_float+0xb6>
 80094de:	f108 0801 	add.w	r8, r8, #1
 80094e2:	68e3      	ldr	r3, [r4, #12]
 80094e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80094e6:	1a5b      	subs	r3, r3, r1
 80094e8:	4543      	cmp	r3, r8
 80094ea:	dcf0      	bgt.n	80094ce <_printf_float+0x42a>
 80094ec:	e6fc      	b.n	80092e8 <_printf_float+0x244>
 80094ee:	f04f 0800 	mov.w	r8, #0
 80094f2:	f104 0919 	add.w	r9, r4, #25
 80094f6:	e7f4      	b.n	80094e2 <_printf_float+0x43e>

080094f8 <_printf_common>:
 80094f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094fc:	4616      	mov	r6, r2
 80094fe:	4698      	mov	r8, r3
 8009500:	688a      	ldr	r2, [r1, #8]
 8009502:	690b      	ldr	r3, [r1, #16]
 8009504:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009508:	4293      	cmp	r3, r2
 800950a:	bfb8      	it	lt
 800950c:	4613      	movlt	r3, r2
 800950e:	6033      	str	r3, [r6, #0]
 8009510:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009514:	4607      	mov	r7, r0
 8009516:	460c      	mov	r4, r1
 8009518:	b10a      	cbz	r2, 800951e <_printf_common+0x26>
 800951a:	3301      	adds	r3, #1
 800951c:	6033      	str	r3, [r6, #0]
 800951e:	6823      	ldr	r3, [r4, #0]
 8009520:	0699      	lsls	r1, r3, #26
 8009522:	bf42      	ittt	mi
 8009524:	6833      	ldrmi	r3, [r6, #0]
 8009526:	3302      	addmi	r3, #2
 8009528:	6033      	strmi	r3, [r6, #0]
 800952a:	6825      	ldr	r5, [r4, #0]
 800952c:	f015 0506 	ands.w	r5, r5, #6
 8009530:	d106      	bne.n	8009540 <_printf_common+0x48>
 8009532:	f104 0a19 	add.w	sl, r4, #25
 8009536:	68e3      	ldr	r3, [r4, #12]
 8009538:	6832      	ldr	r2, [r6, #0]
 800953a:	1a9b      	subs	r3, r3, r2
 800953c:	42ab      	cmp	r3, r5
 800953e:	dc26      	bgt.n	800958e <_printf_common+0x96>
 8009540:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009544:	6822      	ldr	r2, [r4, #0]
 8009546:	3b00      	subs	r3, #0
 8009548:	bf18      	it	ne
 800954a:	2301      	movne	r3, #1
 800954c:	0692      	lsls	r2, r2, #26
 800954e:	d42b      	bmi.n	80095a8 <_printf_common+0xb0>
 8009550:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009554:	4641      	mov	r1, r8
 8009556:	4638      	mov	r0, r7
 8009558:	47c8      	blx	r9
 800955a:	3001      	adds	r0, #1
 800955c:	d01e      	beq.n	800959c <_printf_common+0xa4>
 800955e:	6823      	ldr	r3, [r4, #0]
 8009560:	6922      	ldr	r2, [r4, #16]
 8009562:	f003 0306 	and.w	r3, r3, #6
 8009566:	2b04      	cmp	r3, #4
 8009568:	bf02      	ittt	eq
 800956a:	68e5      	ldreq	r5, [r4, #12]
 800956c:	6833      	ldreq	r3, [r6, #0]
 800956e:	1aed      	subeq	r5, r5, r3
 8009570:	68a3      	ldr	r3, [r4, #8]
 8009572:	bf0c      	ite	eq
 8009574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009578:	2500      	movne	r5, #0
 800957a:	4293      	cmp	r3, r2
 800957c:	bfc4      	itt	gt
 800957e:	1a9b      	subgt	r3, r3, r2
 8009580:	18ed      	addgt	r5, r5, r3
 8009582:	2600      	movs	r6, #0
 8009584:	341a      	adds	r4, #26
 8009586:	42b5      	cmp	r5, r6
 8009588:	d11a      	bne.n	80095c0 <_printf_common+0xc8>
 800958a:	2000      	movs	r0, #0
 800958c:	e008      	b.n	80095a0 <_printf_common+0xa8>
 800958e:	2301      	movs	r3, #1
 8009590:	4652      	mov	r2, sl
 8009592:	4641      	mov	r1, r8
 8009594:	4638      	mov	r0, r7
 8009596:	47c8      	blx	r9
 8009598:	3001      	adds	r0, #1
 800959a:	d103      	bne.n	80095a4 <_printf_common+0xac>
 800959c:	f04f 30ff 	mov.w	r0, #4294967295
 80095a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095a4:	3501      	adds	r5, #1
 80095a6:	e7c6      	b.n	8009536 <_printf_common+0x3e>
 80095a8:	18e1      	adds	r1, r4, r3
 80095aa:	1c5a      	adds	r2, r3, #1
 80095ac:	2030      	movs	r0, #48	@ 0x30
 80095ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80095b2:	4422      	add	r2, r4
 80095b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80095b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80095bc:	3302      	adds	r3, #2
 80095be:	e7c7      	b.n	8009550 <_printf_common+0x58>
 80095c0:	2301      	movs	r3, #1
 80095c2:	4622      	mov	r2, r4
 80095c4:	4641      	mov	r1, r8
 80095c6:	4638      	mov	r0, r7
 80095c8:	47c8      	blx	r9
 80095ca:	3001      	adds	r0, #1
 80095cc:	d0e6      	beq.n	800959c <_printf_common+0xa4>
 80095ce:	3601      	adds	r6, #1
 80095d0:	e7d9      	b.n	8009586 <_printf_common+0x8e>
	...

080095d4 <_printf_i>:
 80095d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095d8:	7e0f      	ldrb	r7, [r1, #24]
 80095da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80095dc:	2f78      	cmp	r7, #120	@ 0x78
 80095de:	4691      	mov	r9, r2
 80095e0:	4680      	mov	r8, r0
 80095e2:	460c      	mov	r4, r1
 80095e4:	469a      	mov	sl, r3
 80095e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80095ea:	d807      	bhi.n	80095fc <_printf_i+0x28>
 80095ec:	2f62      	cmp	r7, #98	@ 0x62
 80095ee:	d80a      	bhi.n	8009606 <_printf_i+0x32>
 80095f0:	2f00      	cmp	r7, #0
 80095f2:	f000 80d2 	beq.w	800979a <_printf_i+0x1c6>
 80095f6:	2f58      	cmp	r7, #88	@ 0x58
 80095f8:	f000 80b9 	beq.w	800976e <_printf_i+0x19a>
 80095fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009600:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009604:	e03a      	b.n	800967c <_printf_i+0xa8>
 8009606:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800960a:	2b15      	cmp	r3, #21
 800960c:	d8f6      	bhi.n	80095fc <_printf_i+0x28>
 800960e:	a101      	add	r1, pc, #4	@ (adr r1, 8009614 <_printf_i+0x40>)
 8009610:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009614:	0800966d 	.word	0x0800966d
 8009618:	08009681 	.word	0x08009681
 800961c:	080095fd 	.word	0x080095fd
 8009620:	080095fd 	.word	0x080095fd
 8009624:	080095fd 	.word	0x080095fd
 8009628:	080095fd 	.word	0x080095fd
 800962c:	08009681 	.word	0x08009681
 8009630:	080095fd 	.word	0x080095fd
 8009634:	080095fd 	.word	0x080095fd
 8009638:	080095fd 	.word	0x080095fd
 800963c:	080095fd 	.word	0x080095fd
 8009640:	08009781 	.word	0x08009781
 8009644:	080096ab 	.word	0x080096ab
 8009648:	0800973b 	.word	0x0800973b
 800964c:	080095fd 	.word	0x080095fd
 8009650:	080095fd 	.word	0x080095fd
 8009654:	080097a3 	.word	0x080097a3
 8009658:	080095fd 	.word	0x080095fd
 800965c:	080096ab 	.word	0x080096ab
 8009660:	080095fd 	.word	0x080095fd
 8009664:	080095fd 	.word	0x080095fd
 8009668:	08009743 	.word	0x08009743
 800966c:	6833      	ldr	r3, [r6, #0]
 800966e:	1d1a      	adds	r2, r3, #4
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	6032      	str	r2, [r6, #0]
 8009674:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009678:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800967c:	2301      	movs	r3, #1
 800967e:	e09d      	b.n	80097bc <_printf_i+0x1e8>
 8009680:	6833      	ldr	r3, [r6, #0]
 8009682:	6820      	ldr	r0, [r4, #0]
 8009684:	1d19      	adds	r1, r3, #4
 8009686:	6031      	str	r1, [r6, #0]
 8009688:	0606      	lsls	r6, r0, #24
 800968a:	d501      	bpl.n	8009690 <_printf_i+0xbc>
 800968c:	681d      	ldr	r5, [r3, #0]
 800968e:	e003      	b.n	8009698 <_printf_i+0xc4>
 8009690:	0645      	lsls	r5, r0, #25
 8009692:	d5fb      	bpl.n	800968c <_printf_i+0xb8>
 8009694:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009698:	2d00      	cmp	r5, #0
 800969a:	da03      	bge.n	80096a4 <_printf_i+0xd0>
 800969c:	232d      	movs	r3, #45	@ 0x2d
 800969e:	426d      	negs	r5, r5
 80096a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096a4:	4859      	ldr	r0, [pc, #356]	@ (800980c <_printf_i+0x238>)
 80096a6:	230a      	movs	r3, #10
 80096a8:	e011      	b.n	80096ce <_printf_i+0xfa>
 80096aa:	6821      	ldr	r1, [r4, #0]
 80096ac:	6833      	ldr	r3, [r6, #0]
 80096ae:	0608      	lsls	r0, r1, #24
 80096b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80096b4:	d402      	bmi.n	80096bc <_printf_i+0xe8>
 80096b6:	0649      	lsls	r1, r1, #25
 80096b8:	bf48      	it	mi
 80096ba:	b2ad      	uxthmi	r5, r5
 80096bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80096be:	4853      	ldr	r0, [pc, #332]	@ (800980c <_printf_i+0x238>)
 80096c0:	6033      	str	r3, [r6, #0]
 80096c2:	bf14      	ite	ne
 80096c4:	230a      	movne	r3, #10
 80096c6:	2308      	moveq	r3, #8
 80096c8:	2100      	movs	r1, #0
 80096ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80096ce:	6866      	ldr	r6, [r4, #4]
 80096d0:	60a6      	str	r6, [r4, #8]
 80096d2:	2e00      	cmp	r6, #0
 80096d4:	bfa2      	ittt	ge
 80096d6:	6821      	ldrge	r1, [r4, #0]
 80096d8:	f021 0104 	bicge.w	r1, r1, #4
 80096dc:	6021      	strge	r1, [r4, #0]
 80096de:	b90d      	cbnz	r5, 80096e4 <_printf_i+0x110>
 80096e0:	2e00      	cmp	r6, #0
 80096e2:	d04b      	beq.n	800977c <_printf_i+0x1a8>
 80096e4:	4616      	mov	r6, r2
 80096e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80096ea:	fb03 5711 	mls	r7, r3, r1, r5
 80096ee:	5dc7      	ldrb	r7, [r0, r7]
 80096f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80096f4:	462f      	mov	r7, r5
 80096f6:	42bb      	cmp	r3, r7
 80096f8:	460d      	mov	r5, r1
 80096fa:	d9f4      	bls.n	80096e6 <_printf_i+0x112>
 80096fc:	2b08      	cmp	r3, #8
 80096fe:	d10b      	bne.n	8009718 <_printf_i+0x144>
 8009700:	6823      	ldr	r3, [r4, #0]
 8009702:	07df      	lsls	r7, r3, #31
 8009704:	d508      	bpl.n	8009718 <_printf_i+0x144>
 8009706:	6923      	ldr	r3, [r4, #16]
 8009708:	6861      	ldr	r1, [r4, #4]
 800970a:	4299      	cmp	r1, r3
 800970c:	bfde      	ittt	le
 800970e:	2330      	movle	r3, #48	@ 0x30
 8009710:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009714:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009718:	1b92      	subs	r2, r2, r6
 800971a:	6122      	str	r2, [r4, #16]
 800971c:	f8cd a000 	str.w	sl, [sp]
 8009720:	464b      	mov	r3, r9
 8009722:	aa03      	add	r2, sp, #12
 8009724:	4621      	mov	r1, r4
 8009726:	4640      	mov	r0, r8
 8009728:	f7ff fee6 	bl	80094f8 <_printf_common>
 800972c:	3001      	adds	r0, #1
 800972e:	d14a      	bne.n	80097c6 <_printf_i+0x1f2>
 8009730:	f04f 30ff 	mov.w	r0, #4294967295
 8009734:	b004      	add	sp, #16
 8009736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800973a:	6823      	ldr	r3, [r4, #0]
 800973c:	f043 0320 	orr.w	r3, r3, #32
 8009740:	6023      	str	r3, [r4, #0]
 8009742:	4833      	ldr	r0, [pc, #204]	@ (8009810 <_printf_i+0x23c>)
 8009744:	2778      	movs	r7, #120	@ 0x78
 8009746:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800974a:	6823      	ldr	r3, [r4, #0]
 800974c:	6831      	ldr	r1, [r6, #0]
 800974e:	061f      	lsls	r7, r3, #24
 8009750:	f851 5b04 	ldr.w	r5, [r1], #4
 8009754:	d402      	bmi.n	800975c <_printf_i+0x188>
 8009756:	065f      	lsls	r7, r3, #25
 8009758:	bf48      	it	mi
 800975a:	b2ad      	uxthmi	r5, r5
 800975c:	6031      	str	r1, [r6, #0]
 800975e:	07d9      	lsls	r1, r3, #31
 8009760:	bf44      	itt	mi
 8009762:	f043 0320 	orrmi.w	r3, r3, #32
 8009766:	6023      	strmi	r3, [r4, #0]
 8009768:	b11d      	cbz	r5, 8009772 <_printf_i+0x19e>
 800976a:	2310      	movs	r3, #16
 800976c:	e7ac      	b.n	80096c8 <_printf_i+0xf4>
 800976e:	4827      	ldr	r0, [pc, #156]	@ (800980c <_printf_i+0x238>)
 8009770:	e7e9      	b.n	8009746 <_printf_i+0x172>
 8009772:	6823      	ldr	r3, [r4, #0]
 8009774:	f023 0320 	bic.w	r3, r3, #32
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	e7f6      	b.n	800976a <_printf_i+0x196>
 800977c:	4616      	mov	r6, r2
 800977e:	e7bd      	b.n	80096fc <_printf_i+0x128>
 8009780:	6833      	ldr	r3, [r6, #0]
 8009782:	6825      	ldr	r5, [r4, #0]
 8009784:	6961      	ldr	r1, [r4, #20]
 8009786:	1d18      	adds	r0, r3, #4
 8009788:	6030      	str	r0, [r6, #0]
 800978a:	062e      	lsls	r6, r5, #24
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	d501      	bpl.n	8009794 <_printf_i+0x1c0>
 8009790:	6019      	str	r1, [r3, #0]
 8009792:	e002      	b.n	800979a <_printf_i+0x1c6>
 8009794:	0668      	lsls	r0, r5, #25
 8009796:	d5fb      	bpl.n	8009790 <_printf_i+0x1bc>
 8009798:	8019      	strh	r1, [r3, #0]
 800979a:	2300      	movs	r3, #0
 800979c:	6123      	str	r3, [r4, #16]
 800979e:	4616      	mov	r6, r2
 80097a0:	e7bc      	b.n	800971c <_printf_i+0x148>
 80097a2:	6833      	ldr	r3, [r6, #0]
 80097a4:	1d1a      	adds	r2, r3, #4
 80097a6:	6032      	str	r2, [r6, #0]
 80097a8:	681e      	ldr	r6, [r3, #0]
 80097aa:	6862      	ldr	r2, [r4, #4]
 80097ac:	2100      	movs	r1, #0
 80097ae:	4630      	mov	r0, r6
 80097b0:	f7f6 fd16 	bl	80001e0 <memchr>
 80097b4:	b108      	cbz	r0, 80097ba <_printf_i+0x1e6>
 80097b6:	1b80      	subs	r0, r0, r6
 80097b8:	6060      	str	r0, [r4, #4]
 80097ba:	6863      	ldr	r3, [r4, #4]
 80097bc:	6123      	str	r3, [r4, #16]
 80097be:	2300      	movs	r3, #0
 80097c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097c4:	e7aa      	b.n	800971c <_printf_i+0x148>
 80097c6:	6923      	ldr	r3, [r4, #16]
 80097c8:	4632      	mov	r2, r6
 80097ca:	4649      	mov	r1, r9
 80097cc:	4640      	mov	r0, r8
 80097ce:	47d0      	blx	sl
 80097d0:	3001      	adds	r0, #1
 80097d2:	d0ad      	beq.n	8009730 <_printf_i+0x15c>
 80097d4:	6823      	ldr	r3, [r4, #0]
 80097d6:	079b      	lsls	r3, r3, #30
 80097d8:	d413      	bmi.n	8009802 <_printf_i+0x22e>
 80097da:	68e0      	ldr	r0, [r4, #12]
 80097dc:	9b03      	ldr	r3, [sp, #12]
 80097de:	4298      	cmp	r0, r3
 80097e0:	bfb8      	it	lt
 80097e2:	4618      	movlt	r0, r3
 80097e4:	e7a6      	b.n	8009734 <_printf_i+0x160>
 80097e6:	2301      	movs	r3, #1
 80097e8:	4632      	mov	r2, r6
 80097ea:	4649      	mov	r1, r9
 80097ec:	4640      	mov	r0, r8
 80097ee:	47d0      	blx	sl
 80097f0:	3001      	adds	r0, #1
 80097f2:	d09d      	beq.n	8009730 <_printf_i+0x15c>
 80097f4:	3501      	adds	r5, #1
 80097f6:	68e3      	ldr	r3, [r4, #12]
 80097f8:	9903      	ldr	r1, [sp, #12]
 80097fa:	1a5b      	subs	r3, r3, r1
 80097fc:	42ab      	cmp	r3, r5
 80097fe:	dcf2      	bgt.n	80097e6 <_printf_i+0x212>
 8009800:	e7eb      	b.n	80097da <_printf_i+0x206>
 8009802:	2500      	movs	r5, #0
 8009804:	f104 0619 	add.w	r6, r4, #25
 8009808:	e7f5      	b.n	80097f6 <_printf_i+0x222>
 800980a:	bf00      	nop
 800980c:	0800bc7a 	.word	0x0800bc7a
 8009810:	0800bc8b 	.word	0x0800bc8b

08009814 <std>:
 8009814:	2300      	movs	r3, #0
 8009816:	b510      	push	{r4, lr}
 8009818:	4604      	mov	r4, r0
 800981a:	e9c0 3300 	strd	r3, r3, [r0]
 800981e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009822:	6083      	str	r3, [r0, #8]
 8009824:	8181      	strh	r1, [r0, #12]
 8009826:	6643      	str	r3, [r0, #100]	@ 0x64
 8009828:	81c2      	strh	r2, [r0, #14]
 800982a:	6183      	str	r3, [r0, #24]
 800982c:	4619      	mov	r1, r3
 800982e:	2208      	movs	r2, #8
 8009830:	305c      	adds	r0, #92	@ 0x5c
 8009832:	f000 f914 	bl	8009a5e <memset>
 8009836:	4b0d      	ldr	r3, [pc, #52]	@ (800986c <std+0x58>)
 8009838:	6263      	str	r3, [r4, #36]	@ 0x24
 800983a:	4b0d      	ldr	r3, [pc, #52]	@ (8009870 <std+0x5c>)
 800983c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800983e:	4b0d      	ldr	r3, [pc, #52]	@ (8009874 <std+0x60>)
 8009840:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009842:	4b0d      	ldr	r3, [pc, #52]	@ (8009878 <std+0x64>)
 8009844:	6323      	str	r3, [r4, #48]	@ 0x30
 8009846:	4b0d      	ldr	r3, [pc, #52]	@ (800987c <std+0x68>)
 8009848:	6224      	str	r4, [r4, #32]
 800984a:	429c      	cmp	r4, r3
 800984c:	d006      	beq.n	800985c <std+0x48>
 800984e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009852:	4294      	cmp	r4, r2
 8009854:	d002      	beq.n	800985c <std+0x48>
 8009856:	33d0      	adds	r3, #208	@ 0xd0
 8009858:	429c      	cmp	r4, r3
 800985a:	d105      	bne.n	8009868 <std+0x54>
 800985c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009864:	f000 b978 	b.w	8009b58 <__retarget_lock_init_recursive>
 8009868:	bd10      	pop	{r4, pc}
 800986a:	bf00      	nop
 800986c:	080099d9 	.word	0x080099d9
 8009870:	080099fb 	.word	0x080099fb
 8009874:	08009a33 	.word	0x08009a33
 8009878:	08009a57 	.word	0x08009a57
 800987c:	20001fe4 	.word	0x20001fe4

08009880 <stdio_exit_handler>:
 8009880:	4a02      	ldr	r2, [pc, #8]	@ (800988c <stdio_exit_handler+0xc>)
 8009882:	4903      	ldr	r1, [pc, #12]	@ (8009890 <stdio_exit_handler+0x10>)
 8009884:	4803      	ldr	r0, [pc, #12]	@ (8009894 <stdio_exit_handler+0x14>)
 8009886:	f000 b869 	b.w	800995c <_fwalk_sglue>
 800988a:	bf00      	nop
 800988c:	200000fc 	.word	0x200000fc
 8009890:	0800b4b5 	.word	0x0800b4b5
 8009894:	2000010c 	.word	0x2000010c

08009898 <cleanup_stdio>:
 8009898:	6841      	ldr	r1, [r0, #4]
 800989a:	4b0c      	ldr	r3, [pc, #48]	@ (80098cc <cleanup_stdio+0x34>)
 800989c:	4299      	cmp	r1, r3
 800989e:	b510      	push	{r4, lr}
 80098a0:	4604      	mov	r4, r0
 80098a2:	d001      	beq.n	80098a8 <cleanup_stdio+0x10>
 80098a4:	f001 fe06 	bl	800b4b4 <_fflush_r>
 80098a8:	68a1      	ldr	r1, [r4, #8]
 80098aa:	4b09      	ldr	r3, [pc, #36]	@ (80098d0 <cleanup_stdio+0x38>)
 80098ac:	4299      	cmp	r1, r3
 80098ae:	d002      	beq.n	80098b6 <cleanup_stdio+0x1e>
 80098b0:	4620      	mov	r0, r4
 80098b2:	f001 fdff 	bl	800b4b4 <_fflush_r>
 80098b6:	68e1      	ldr	r1, [r4, #12]
 80098b8:	4b06      	ldr	r3, [pc, #24]	@ (80098d4 <cleanup_stdio+0x3c>)
 80098ba:	4299      	cmp	r1, r3
 80098bc:	d004      	beq.n	80098c8 <cleanup_stdio+0x30>
 80098be:	4620      	mov	r0, r4
 80098c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098c4:	f001 bdf6 	b.w	800b4b4 <_fflush_r>
 80098c8:	bd10      	pop	{r4, pc}
 80098ca:	bf00      	nop
 80098cc:	20001fe4 	.word	0x20001fe4
 80098d0:	2000204c 	.word	0x2000204c
 80098d4:	200020b4 	.word	0x200020b4

080098d8 <global_stdio_init.part.0>:
 80098d8:	b510      	push	{r4, lr}
 80098da:	4b0b      	ldr	r3, [pc, #44]	@ (8009908 <global_stdio_init.part.0+0x30>)
 80098dc:	4c0b      	ldr	r4, [pc, #44]	@ (800990c <global_stdio_init.part.0+0x34>)
 80098de:	4a0c      	ldr	r2, [pc, #48]	@ (8009910 <global_stdio_init.part.0+0x38>)
 80098e0:	601a      	str	r2, [r3, #0]
 80098e2:	4620      	mov	r0, r4
 80098e4:	2200      	movs	r2, #0
 80098e6:	2104      	movs	r1, #4
 80098e8:	f7ff ff94 	bl	8009814 <std>
 80098ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80098f0:	2201      	movs	r2, #1
 80098f2:	2109      	movs	r1, #9
 80098f4:	f7ff ff8e 	bl	8009814 <std>
 80098f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80098fc:	2202      	movs	r2, #2
 80098fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009902:	2112      	movs	r1, #18
 8009904:	f7ff bf86 	b.w	8009814 <std>
 8009908:	2000211c 	.word	0x2000211c
 800990c:	20001fe4 	.word	0x20001fe4
 8009910:	08009881 	.word	0x08009881

08009914 <__sfp_lock_acquire>:
 8009914:	4801      	ldr	r0, [pc, #4]	@ (800991c <__sfp_lock_acquire+0x8>)
 8009916:	f000 b920 	b.w	8009b5a <__retarget_lock_acquire_recursive>
 800991a:	bf00      	nop
 800991c:	20002125 	.word	0x20002125

08009920 <__sfp_lock_release>:
 8009920:	4801      	ldr	r0, [pc, #4]	@ (8009928 <__sfp_lock_release+0x8>)
 8009922:	f000 b91b 	b.w	8009b5c <__retarget_lock_release_recursive>
 8009926:	bf00      	nop
 8009928:	20002125 	.word	0x20002125

0800992c <__sinit>:
 800992c:	b510      	push	{r4, lr}
 800992e:	4604      	mov	r4, r0
 8009930:	f7ff fff0 	bl	8009914 <__sfp_lock_acquire>
 8009934:	6a23      	ldr	r3, [r4, #32]
 8009936:	b11b      	cbz	r3, 8009940 <__sinit+0x14>
 8009938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800993c:	f7ff bff0 	b.w	8009920 <__sfp_lock_release>
 8009940:	4b04      	ldr	r3, [pc, #16]	@ (8009954 <__sinit+0x28>)
 8009942:	6223      	str	r3, [r4, #32]
 8009944:	4b04      	ldr	r3, [pc, #16]	@ (8009958 <__sinit+0x2c>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d1f5      	bne.n	8009938 <__sinit+0xc>
 800994c:	f7ff ffc4 	bl	80098d8 <global_stdio_init.part.0>
 8009950:	e7f2      	b.n	8009938 <__sinit+0xc>
 8009952:	bf00      	nop
 8009954:	08009899 	.word	0x08009899
 8009958:	2000211c 	.word	0x2000211c

0800995c <_fwalk_sglue>:
 800995c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009960:	4607      	mov	r7, r0
 8009962:	4688      	mov	r8, r1
 8009964:	4614      	mov	r4, r2
 8009966:	2600      	movs	r6, #0
 8009968:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800996c:	f1b9 0901 	subs.w	r9, r9, #1
 8009970:	d505      	bpl.n	800997e <_fwalk_sglue+0x22>
 8009972:	6824      	ldr	r4, [r4, #0]
 8009974:	2c00      	cmp	r4, #0
 8009976:	d1f7      	bne.n	8009968 <_fwalk_sglue+0xc>
 8009978:	4630      	mov	r0, r6
 800997a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800997e:	89ab      	ldrh	r3, [r5, #12]
 8009980:	2b01      	cmp	r3, #1
 8009982:	d907      	bls.n	8009994 <_fwalk_sglue+0x38>
 8009984:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009988:	3301      	adds	r3, #1
 800998a:	d003      	beq.n	8009994 <_fwalk_sglue+0x38>
 800998c:	4629      	mov	r1, r5
 800998e:	4638      	mov	r0, r7
 8009990:	47c0      	blx	r8
 8009992:	4306      	orrs	r6, r0
 8009994:	3568      	adds	r5, #104	@ 0x68
 8009996:	e7e9      	b.n	800996c <_fwalk_sglue+0x10>

08009998 <siprintf>:
 8009998:	b40e      	push	{r1, r2, r3}
 800999a:	b500      	push	{lr}
 800999c:	b09c      	sub	sp, #112	@ 0x70
 800999e:	ab1d      	add	r3, sp, #116	@ 0x74
 80099a0:	9002      	str	r0, [sp, #8]
 80099a2:	9006      	str	r0, [sp, #24]
 80099a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80099a8:	4809      	ldr	r0, [pc, #36]	@ (80099d0 <siprintf+0x38>)
 80099aa:	9107      	str	r1, [sp, #28]
 80099ac:	9104      	str	r1, [sp, #16]
 80099ae:	4909      	ldr	r1, [pc, #36]	@ (80099d4 <siprintf+0x3c>)
 80099b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80099b4:	9105      	str	r1, [sp, #20]
 80099b6:	6800      	ldr	r0, [r0, #0]
 80099b8:	9301      	str	r3, [sp, #4]
 80099ba:	a902      	add	r1, sp, #8
 80099bc:	f001 fbfa 	bl	800b1b4 <_svfiprintf_r>
 80099c0:	9b02      	ldr	r3, [sp, #8]
 80099c2:	2200      	movs	r2, #0
 80099c4:	701a      	strb	r2, [r3, #0]
 80099c6:	b01c      	add	sp, #112	@ 0x70
 80099c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80099cc:	b003      	add	sp, #12
 80099ce:	4770      	bx	lr
 80099d0:	20000108 	.word	0x20000108
 80099d4:	ffff0208 	.word	0xffff0208

080099d8 <__sread>:
 80099d8:	b510      	push	{r4, lr}
 80099da:	460c      	mov	r4, r1
 80099dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099e0:	f000 f86c 	bl	8009abc <_read_r>
 80099e4:	2800      	cmp	r0, #0
 80099e6:	bfab      	itete	ge
 80099e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80099ea:	89a3      	ldrhlt	r3, [r4, #12]
 80099ec:	181b      	addge	r3, r3, r0
 80099ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80099f2:	bfac      	ite	ge
 80099f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80099f6:	81a3      	strhlt	r3, [r4, #12]
 80099f8:	bd10      	pop	{r4, pc}

080099fa <__swrite>:
 80099fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099fe:	461f      	mov	r7, r3
 8009a00:	898b      	ldrh	r3, [r1, #12]
 8009a02:	05db      	lsls	r3, r3, #23
 8009a04:	4605      	mov	r5, r0
 8009a06:	460c      	mov	r4, r1
 8009a08:	4616      	mov	r6, r2
 8009a0a:	d505      	bpl.n	8009a18 <__swrite+0x1e>
 8009a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a10:	2302      	movs	r3, #2
 8009a12:	2200      	movs	r2, #0
 8009a14:	f000 f840 	bl	8009a98 <_lseek_r>
 8009a18:	89a3      	ldrh	r3, [r4, #12]
 8009a1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009a22:	81a3      	strh	r3, [r4, #12]
 8009a24:	4632      	mov	r2, r6
 8009a26:	463b      	mov	r3, r7
 8009a28:	4628      	mov	r0, r5
 8009a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a2e:	f000 b857 	b.w	8009ae0 <_write_r>

08009a32 <__sseek>:
 8009a32:	b510      	push	{r4, lr}
 8009a34:	460c      	mov	r4, r1
 8009a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a3a:	f000 f82d 	bl	8009a98 <_lseek_r>
 8009a3e:	1c43      	adds	r3, r0, #1
 8009a40:	89a3      	ldrh	r3, [r4, #12]
 8009a42:	bf15      	itete	ne
 8009a44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009a46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009a4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009a4e:	81a3      	strheq	r3, [r4, #12]
 8009a50:	bf18      	it	ne
 8009a52:	81a3      	strhne	r3, [r4, #12]
 8009a54:	bd10      	pop	{r4, pc}

08009a56 <__sclose>:
 8009a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a5a:	f000 b80d 	b.w	8009a78 <_close_r>

08009a5e <memset>:
 8009a5e:	4402      	add	r2, r0
 8009a60:	4603      	mov	r3, r0
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d100      	bne.n	8009a68 <memset+0xa>
 8009a66:	4770      	bx	lr
 8009a68:	f803 1b01 	strb.w	r1, [r3], #1
 8009a6c:	e7f9      	b.n	8009a62 <memset+0x4>
	...

08009a70 <_localeconv_r>:
 8009a70:	4800      	ldr	r0, [pc, #0]	@ (8009a74 <_localeconv_r+0x4>)
 8009a72:	4770      	bx	lr
 8009a74:	20000248 	.word	0x20000248

08009a78 <_close_r>:
 8009a78:	b538      	push	{r3, r4, r5, lr}
 8009a7a:	4d06      	ldr	r5, [pc, #24]	@ (8009a94 <_close_r+0x1c>)
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	4604      	mov	r4, r0
 8009a80:	4608      	mov	r0, r1
 8009a82:	602b      	str	r3, [r5, #0]
 8009a84:	f7f7 ff08 	bl	8001898 <_close>
 8009a88:	1c43      	adds	r3, r0, #1
 8009a8a:	d102      	bne.n	8009a92 <_close_r+0x1a>
 8009a8c:	682b      	ldr	r3, [r5, #0]
 8009a8e:	b103      	cbz	r3, 8009a92 <_close_r+0x1a>
 8009a90:	6023      	str	r3, [r4, #0]
 8009a92:	bd38      	pop	{r3, r4, r5, pc}
 8009a94:	20002120 	.word	0x20002120

08009a98 <_lseek_r>:
 8009a98:	b538      	push	{r3, r4, r5, lr}
 8009a9a:	4d07      	ldr	r5, [pc, #28]	@ (8009ab8 <_lseek_r+0x20>)
 8009a9c:	4604      	mov	r4, r0
 8009a9e:	4608      	mov	r0, r1
 8009aa0:	4611      	mov	r1, r2
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	602a      	str	r2, [r5, #0]
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	f7f7 ff1d 	bl	80018e6 <_lseek>
 8009aac:	1c43      	adds	r3, r0, #1
 8009aae:	d102      	bne.n	8009ab6 <_lseek_r+0x1e>
 8009ab0:	682b      	ldr	r3, [r5, #0]
 8009ab2:	b103      	cbz	r3, 8009ab6 <_lseek_r+0x1e>
 8009ab4:	6023      	str	r3, [r4, #0]
 8009ab6:	bd38      	pop	{r3, r4, r5, pc}
 8009ab8:	20002120 	.word	0x20002120

08009abc <_read_r>:
 8009abc:	b538      	push	{r3, r4, r5, lr}
 8009abe:	4d07      	ldr	r5, [pc, #28]	@ (8009adc <_read_r+0x20>)
 8009ac0:	4604      	mov	r4, r0
 8009ac2:	4608      	mov	r0, r1
 8009ac4:	4611      	mov	r1, r2
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	602a      	str	r2, [r5, #0]
 8009aca:	461a      	mov	r2, r3
 8009acc:	f7f7 feab 	bl	8001826 <_read>
 8009ad0:	1c43      	adds	r3, r0, #1
 8009ad2:	d102      	bne.n	8009ada <_read_r+0x1e>
 8009ad4:	682b      	ldr	r3, [r5, #0]
 8009ad6:	b103      	cbz	r3, 8009ada <_read_r+0x1e>
 8009ad8:	6023      	str	r3, [r4, #0]
 8009ada:	bd38      	pop	{r3, r4, r5, pc}
 8009adc:	20002120 	.word	0x20002120

08009ae0 <_write_r>:
 8009ae0:	b538      	push	{r3, r4, r5, lr}
 8009ae2:	4d07      	ldr	r5, [pc, #28]	@ (8009b00 <_write_r+0x20>)
 8009ae4:	4604      	mov	r4, r0
 8009ae6:	4608      	mov	r0, r1
 8009ae8:	4611      	mov	r1, r2
 8009aea:	2200      	movs	r2, #0
 8009aec:	602a      	str	r2, [r5, #0]
 8009aee:	461a      	mov	r2, r3
 8009af0:	f7f7 feb6 	bl	8001860 <_write>
 8009af4:	1c43      	adds	r3, r0, #1
 8009af6:	d102      	bne.n	8009afe <_write_r+0x1e>
 8009af8:	682b      	ldr	r3, [r5, #0]
 8009afa:	b103      	cbz	r3, 8009afe <_write_r+0x1e>
 8009afc:	6023      	str	r3, [r4, #0]
 8009afe:	bd38      	pop	{r3, r4, r5, pc}
 8009b00:	20002120 	.word	0x20002120

08009b04 <__errno>:
 8009b04:	4b01      	ldr	r3, [pc, #4]	@ (8009b0c <__errno+0x8>)
 8009b06:	6818      	ldr	r0, [r3, #0]
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	20000108 	.word	0x20000108

08009b10 <__libc_init_array>:
 8009b10:	b570      	push	{r4, r5, r6, lr}
 8009b12:	4d0d      	ldr	r5, [pc, #52]	@ (8009b48 <__libc_init_array+0x38>)
 8009b14:	4c0d      	ldr	r4, [pc, #52]	@ (8009b4c <__libc_init_array+0x3c>)
 8009b16:	1b64      	subs	r4, r4, r5
 8009b18:	10a4      	asrs	r4, r4, #2
 8009b1a:	2600      	movs	r6, #0
 8009b1c:	42a6      	cmp	r6, r4
 8009b1e:	d109      	bne.n	8009b34 <__libc_init_array+0x24>
 8009b20:	4d0b      	ldr	r5, [pc, #44]	@ (8009b50 <__libc_init_array+0x40>)
 8009b22:	4c0c      	ldr	r4, [pc, #48]	@ (8009b54 <__libc_init_array+0x44>)
 8009b24:	f002 f864 	bl	800bbf0 <_init>
 8009b28:	1b64      	subs	r4, r4, r5
 8009b2a:	10a4      	asrs	r4, r4, #2
 8009b2c:	2600      	movs	r6, #0
 8009b2e:	42a6      	cmp	r6, r4
 8009b30:	d105      	bne.n	8009b3e <__libc_init_array+0x2e>
 8009b32:	bd70      	pop	{r4, r5, r6, pc}
 8009b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b38:	4798      	blx	r3
 8009b3a:	3601      	adds	r6, #1
 8009b3c:	e7ee      	b.n	8009b1c <__libc_init_array+0xc>
 8009b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b42:	4798      	blx	r3
 8009b44:	3601      	adds	r6, #1
 8009b46:	e7f2      	b.n	8009b2e <__libc_init_array+0x1e>
 8009b48:	0800bfe0 	.word	0x0800bfe0
 8009b4c:	0800bfe0 	.word	0x0800bfe0
 8009b50:	0800bfe0 	.word	0x0800bfe0
 8009b54:	0800bfe4 	.word	0x0800bfe4

08009b58 <__retarget_lock_init_recursive>:
 8009b58:	4770      	bx	lr

08009b5a <__retarget_lock_acquire_recursive>:
 8009b5a:	4770      	bx	lr

08009b5c <__retarget_lock_release_recursive>:
 8009b5c:	4770      	bx	lr

08009b5e <quorem>:
 8009b5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b62:	6903      	ldr	r3, [r0, #16]
 8009b64:	690c      	ldr	r4, [r1, #16]
 8009b66:	42a3      	cmp	r3, r4
 8009b68:	4607      	mov	r7, r0
 8009b6a:	db7e      	blt.n	8009c6a <quorem+0x10c>
 8009b6c:	3c01      	subs	r4, #1
 8009b6e:	f101 0814 	add.w	r8, r1, #20
 8009b72:	00a3      	lsls	r3, r4, #2
 8009b74:	f100 0514 	add.w	r5, r0, #20
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b7e:	9301      	str	r3, [sp, #4]
 8009b80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b88:	3301      	adds	r3, #1
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009b90:	fbb2 f6f3 	udiv	r6, r2, r3
 8009b94:	d32e      	bcc.n	8009bf4 <quorem+0x96>
 8009b96:	f04f 0a00 	mov.w	sl, #0
 8009b9a:	46c4      	mov	ip, r8
 8009b9c:	46ae      	mov	lr, r5
 8009b9e:	46d3      	mov	fp, sl
 8009ba0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009ba4:	b298      	uxth	r0, r3
 8009ba6:	fb06 a000 	mla	r0, r6, r0, sl
 8009baa:	0c02      	lsrs	r2, r0, #16
 8009bac:	0c1b      	lsrs	r3, r3, #16
 8009bae:	fb06 2303 	mla	r3, r6, r3, r2
 8009bb2:	f8de 2000 	ldr.w	r2, [lr]
 8009bb6:	b280      	uxth	r0, r0
 8009bb8:	b292      	uxth	r2, r2
 8009bba:	1a12      	subs	r2, r2, r0
 8009bbc:	445a      	add	r2, fp
 8009bbe:	f8de 0000 	ldr.w	r0, [lr]
 8009bc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009bcc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009bd0:	b292      	uxth	r2, r2
 8009bd2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009bd6:	45e1      	cmp	r9, ip
 8009bd8:	f84e 2b04 	str.w	r2, [lr], #4
 8009bdc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009be0:	d2de      	bcs.n	8009ba0 <quorem+0x42>
 8009be2:	9b00      	ldr	r3, [sp, #0]
 8009be4:	58eb      	ldr	r3, [r5, r3]
 8009be6:	b92b      	cbnz	r3, 8009bf4 <quorem+0x96>
 8009be8:	9b01      	ldr	r3, [sp, #4]
 8009bea:	3b04      	subs	r3, #4
 8009bec:	429d      	cmp	r5, r3
 8009bee:	461a      	mov	r2, r3
 8009bf0:	d32f      	bcc.n	8009c52 <quorem+0xf4>
 8009bf2:	613c      	str	r4, [r7, #16]
 8009bf4:	4638      	mov	r0, r7
 8009bf6:	f001 f979 	bl	800aeec <__mcmp>
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	db25      	blt.n	8009c4a <quorem+0xec>
 8009bfe:	4629      	mov	r1, r5
 8009c00:	2000      	movs	r0, #0
 8009c02:	f858 2b04 	ldr.w	r2, [r8], #4
 8009c06:	f8d1 c000 	ldr.w	ip, [r1]
 8009c0a:	fa1f fe82 	uxth.w	lr, r2
 8009c0e:	fa1f f38c 	uxth.w	r3, ip
 8009c12:	eba3 030e 	sub.w	r3, r3, lr
 8009c16:	4403      	add	r3, r0
 8009c18:	0c12      	lsrs	r2, r2, #16
 8009c1a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009c1e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c28:	45c1      	cmp	r9, r8
 8009c2a:	f841 3b04 	str.w	r3, [r1], #4
 8009c2e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009c32:	d2e6      	bcs.n	8009c02 <quorem+0xa4>
 8009c34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c3c:	b922      	cbnz	r2, 8009c48 <quorem+0xea>
 8009c3e:	3b04      	subs	r3, #4
 8009c40:	429d      	cmp	r5, r3
 8009c42:	461a      	mov	r2, r3
 8009c44:	d30b      	bcc.n	8009c5e <quorem+0x100>
 8009c46:	613c      	str	r4, [r7, #16]
 8009c48:	3601      	adds	r6, #1
 8009c4a:	4630      	mov	r0, r6
 8009c4c:	b003      	add	sp, #12
 8009c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c52:	6812      	ldr	r2, [r2, #0]
 8009c54:	3b04      	subs	r3, #4
 8009c56:	2a00      	cmp	r2, #0
 8009c58:	d1cb      	bne.n	8009bf2 <quorem+0x94>
 8009c5a:	3c01      	subs	r4, #1
 8009c5c:	e7c6      	b.n	8009bec <quorem+0x8e>
 8009c5e:	6812      	ldr	r2, [r2, #0]
 8009c60:	3b04      	subs	r3, #4
 8009c62:	2a00      	cmp	r2, #0
 8009c64:	d1ef      	bne.n	8009c46 <quorem+0xe8>
 8009c66:	3c01      	subs	r4, #1
 8009c68:	e7ea      	b.n	8009c40 <quorem+0xe2>
 8009c6a:	2000      	movs	r0, #0
 8009c6c:	e7ee      	b.n	8009c4c <quorem+0xee>
	...

08009c70 <_dtoa_r>:
 8009c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c74:	69c7      	ldr	r7, [r0, #28]
 8009c76:	b099      	sub	sp, #100	@ 0x64
 8009c78:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009c7c:	ec55 4b10 	vmov	r4, r5, d0
 8009c80:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009c82:	9109      	str	r1, [sp, #36]	@ 0x24
 8009c84:	4683      	mov	fp, r0
 8009c86:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c88:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009c8a:	b97f      	cbnz	r7, 8009cac <_dtoa_r+0x3c>
 8009c8c:	2010      	movs	r0, #16
 8009c8e:	f000 fdfd 	bl	800a88c <malloc>
 8009c92:	4602      	mov	r2, r0
 8009c94:	f8cb 001c 	str.w	r0, [fp, #28]
 8009c98:	b920      	cbnz	r0, 8009ca4 <_dtoa_r+0x34>
 8009c9a:	4ba7      	ldr	r3, [pc, #668]	@ (8009f38 <_dtoa_r+0x2c8>)
 8009c9c:	21ef      	movs	r1, #239	@ 0xef
 8009c9e:	48a7      	ldr	r0, [pc, #668]	@ (8009f3c <_dtoa_r+0x2cc>)
 8009ca0:	f001 fc68 	bl	800b574 <__assert_func>
 8009ca4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009ca8:	6007      	str	r7, [r0, #0]
 8009caa:	60c7      	str	r7, [r0, #12]
 8009cac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009cb0:	6819      	ldr	r1, [r3, #0]
 8009cb2:	b159      	cbz	r1, 8009ccc <_dtoa_r+0x5c>
 8009cb4:	685a      	ldr	r2, [r3, #4]
 8009cb6:	604a      	str	r2, [r1, #4]
 8009cb8:	2301      	movs	r3, #1
 8009cba:	4093      	lsls	r3, r2
 8009cbc:	608b      	str	r3, [r1, #8]
 8009cbe:	4658      	mov	r0, fp
 8009cc0:	f000 feda 	bl	800aa78 <_Bfree>
 8009cc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	601a      	str	r2, [r3, #0]
 8009ccc:	1e2b      	subs	r3, r5, #0
 8009cce:	bfb9      	ittee	lt
 8009cd0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009cd4:	9303      	strlt	r3, [sp, #12]
 8009cd6:	2300      	movge	r3, #0
 8009cd8:	6033      	strge	r3, [r6, #0]
 8009cda:	9f03      	ldr	r7, [sp, #12]
 8009cdc:	4b98      	ldr	r3, [pc, #608]	@ (8009f40 <_dtoa_r+0x2d0>)
 8009cde:	bfbc      	itt	lt
 8009ce0:	2201      	movlt	r2, #1
 8009ce2:	6032      	strlt	r2, [r6, #0]
 8009ce4:	43bb      	bics	r3, r7
 8009ce6:	d112      	bne.n	8009d0e <_dtoa_r+0x9e>
 8009ce8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009cea:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009cee:	6013      	str	r3, [r2, #0]
 8009cf0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009cf4:	4323      	orrs	r3, r4
 8009cf6:	f000 854d 	beq.w	800a794 <_dtoa_r+0xb24>
 8009cfa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009cfc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009f54 <_dtoa_r+0x2e4>
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f000 854f 	beq.w	800a7a4 <_dtoa_r+0xb34>
 8009d06:	f10a 0303 	add.w	r3, sl, #3
 8009d0a:	f000 bd49 	b.w	800a7a0 <_dtoa_r+0xb30>
 8009d0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d12:	2200      	movs	r2, #0
 8009d14:	ec51 0b17 	vmov	r0, r1, d7
 8009d18:	2300      	movs	r3, #0
 8009d1a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009d1e:	f7f6 fedb 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d22:	4680      	mov	r8, r0
 8009d24:	b158      	cbz	r0, 8009d3e <_dtoa_r+0xce>
 8009d26:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009d28:	2301      	movs	r3, #1
 8009d2a:	6013      	str	r3, [r2, #0]
 8009d2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009d2e:	b113      	cbz	r3, 8009d36 <_dtoa_r+0xc6>
 8009d30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009d32:	4b84      	ldr	r3, [pc, #528]	@ (8009f44 <_dtoa_r+0x2d4>)
 8009d34:	6013      	str	r3, [r2, #0]
 8009d36:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009f58 <_dtoa_r+0x2e8>
 8009d3a:	f000 bd33 	b.w	800a7a4 <_dtoa_r+0xb34>
 8009d3e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009d42:	aa16      	add	r2, sp, #88	@ 0x58
 8009d44:	a917      	add	r1, sp, #92	@ 0x5c
 8009d46:	4658      	mov	r0, fp
 8009d48:	f001 f980 	bl	800b04c <__d2b>
 8009d4c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009d50:	4681      	mov	r9, r0
 8009d52:	2e00      	cmp	r6, #0
 8009d54:	d077      	beq.n	8009e46 <_dtoa_r+0x1d6>
 8009d56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d58:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009d5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d64:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009d68:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009d6c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009d70:	4619      	mov	r1, r3
 8009d72:	2200      	movs	r2, #0
 8009d74:	4b74      	ldr	r3, [pc, #464]	@ (8009f48 <_dtoa_r+0x2d8>)
 8009d76:	f7f6 fa8f 	bl	8000298 <__aeabi_dsub>
 8009d7a:	a369      	add	r3, pc, #420	@ (adr r3, 8009f20 <_dtoa_r+0x2b0>)
 8009d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d80:	f7f6 fc42 	bl	8000608 <__aeabi_dmul>
 8009d84:	a368      	add	r3, pc, #416	@ (adr r3, 8009f28 <_dtoa_r+0x2b8>)
 8009d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8a:	f7f6 fa87 	bl	800029c <__adddf3>
 8009d8e:	4604      	mov	r4, r0
 8009d90:	4630      	mov	r0, r6
 8009d92:	460d      	mov	r5, r1
 8009d94:	f7f6 fbce 	bl	8000534 <__aeabi_i2d>
 8009d98:	a365      	add	r3, pc, #404	@ (adr r3, 8009f30 <_dtoa_r+0x2c0>)
 8009d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9e:	f7f6 fc33 	bl	8000608 <__aeabi_dmul>
 8009da2:	4602      	mov	r2, r0
 8009da4:	460b      	mov	r3, r1
 8009da6:	4620      	mov	r0, r4
 8009da8:	4629      	mov	r1, r5
 8009daa:	f7f6 fa77 	bl	800029c <__adddf3>
 8009dae:	4604      	mov	r4, r0
 8009db0:	460d      	mov	r5, r1
 8009db2:	f7f6 fed9 	bl	8000b68 <__aeabi_d2iz>
 8009db6:	2200      	movs	r2, #0
 8009db8:	4607      	mov	r7, r0
 8009dba:	2300      	movs	r3, #0
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	4629      	mov	r1, r5
 8009dc0:	f7f6 fe94 	bl	8000aec <__aeabi_dcmplt>
 8009dc4:	b140      	cbz	r0, 8009dd8 <_dtoa_r+0x168>
 8009dc6:	4638      	mov	r0, r7
 8009dc8:	f7f6 fbb4 	bl	8000534 <__aeabi_i2d>
 8009dcc:	4622      	mov	r2, r4
 8009dce:	462b      	mov	r3, r5
 8009dd0:	f7f6 fe82 	bl	8000ad8 <__aeabi_dcmpeq>
 8009dd4:	b900      	cbnz	r0, 8009dd8 <_dtoa_r+0x168>
 8009dd6:	3f01      	subs	r7, #1
 8009dd8:	2f16      	cmp	r7, #22
 8009dda:	d851      	bhi.n	8009e80 <_dtoa_r+0x210>
 8009ddc:	4b5b      	ldr	r3, [pc, #364]	@ (8009f4c <_dtoa_r+0x2dc>)
 8009dde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009dea:	f7f6 fe7f 	bl	8000aec <__aeabi_dcmplt>
 8009dee:	2800      	cmp	r0, #0
 8009df0:	d048      	beq.n	8009e84 <_dtoa_r+0x214>
 8009df2:	3f01      	subs	r7, #1
 8009df4:	2300      	movs	r3, #0
 8009df6:	9312      	str	r3, [sp, #72]	@ 0x48
 8009df8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009dfa:	1b9b      	subs	r3, r3, r6
 8009dfc:	1e5a      	subs	r2, r3, #1
 8009dfe:	bf44      	itt	mi
 8009e00:	f1c3 0801 	rsbmi	r8, r3, #1
 8009e04:	2300      	movmi	r3, #0
 8009e06:	9208      	str	r2, [sp, #32]
 8009e08:	bf54      	ite	pl
 8009e0a:	f04f 0800 	movpl.w	r8, #0
 8009e0e:	9308      	strmi	r3, [sp, #32]
 8009e10:	2f00      	cmp	r7, #0
 8009e12:	db39      	blt.n	8009e88 <_dtoa_r+0x218>
 8009e14:	9b08      	ldr	r3, [sp, #32]
 8009e16:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009e18:	443b      	add	r3, r7
 8009e1a:	9308      	str	r3, [sp, #32]
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e22:	2b09      	cmp	r3, #9
 8009e24:	d864      	bhi.n	8009ef0 <_dtoa_r+0x280>
 8009e26:	2b05      	cmp	r3, #5
 8009e28:	bfc4      	itt	gt
 8009e2a:	3b04      	subgt	r3, #4
 8009e2c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009e2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e30:	f1a3 0302 	sub.w	r3, r3, #2
 8009e34:	bfcc      	ite	gt
 8009e36:	2400      	movgt	r4, #0
 8009e38:	2401      	movle	r4, #1
 8009e3a:	2b03      	cmp	r3, #3
 8009e3c:	d863      	bhi.n	8009f06 <_dtoa_r+0x296>
 8009e3e:	e8df f003 	tbb	[pc, r3]
 8009e42:	372a      	.short	0x372a
 8009e44:	5535      	.short	0x5535
 8009e46:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009e4a:	441e      	add	r6, r3
 8009e4c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009e50:	2b20      	cmp	r3, #32
 8009e52:	bfc1      	itttt	gt
 8009e54:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009e58:	409f      	lslgt	r7, r3
 8009e5a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009e5e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009e62:	bfd6      	itet	le
 8009e64:	f1c3 0320 	rsble	r3, r3, #32
 8009e68:	ea47 0003 	orrgt.w	r0, r7, r3
 8009e6c:	fa04 f003 	lslle.w	r0, r4, r3
 8009e70:	f7f6 fb50 	bl	8000514 <__aeabi_ui2d>
 8009e74:	2201      	movs	r2, #1
 8009e76:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009e7a:	3e01      	subs	r6, #1
 8009e7c:	9214      	str	r2, [sp, #80]	@ 0x50
 8009e7e:	e777      	b.n	8009d70 <_dtoa_r+0x100>
 8009e80:	2301      	movs	r3, #1
 8009e82:	e7b8      	b.n	8009df6 <_dtoa_r+0x186>
 8009e84:	9012      	str	r0, [sp, #72]	@ 0x48
 8009e86:	e7b7      	b.n	8009df8 <_dtoa_r+0x188>
 8009e88:	427b      	negs	r3, r7
 8009e8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	eba8 0807 	sub.w	r8, r8, r7
 8009e92:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009e94:	e7c4      	b.n	8009e20 <_dtoa_r+0x1b0>
 8009e96:	2300      	movs	r3, #0
 8009e98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	dc35      	bgt.n	8009f0c <_dtoa_r+0x29c>
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	9307      	str	r3, [sp, #28]
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009eaa:	e00b      	b.n	8009ec4 <_dtoa_r+0x254>
 8009eac:	2301      	movs	r3, #1
 8009eae:	e7f3      	b.n	8009e98 <_dtoa_r+0x228>
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009eb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009eb6:	18fb      	adds	r3, r7, r3
 8009eb8:	9300      	str	r3, [sp, #0]
 8009eba:	3301      	adds	r3, #1
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	9307      	str	r3, [sp, #28]
 8009ec0:	bfb8      	it	lt
 8009ec2:	2301      	movlt	r3, #1
 8009ec4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009ec8:	2100      	movs	r1, #0
 8009eca:	2204      	movs	r2, #4
 8009ecc:	f102 0514 	add.w	r5, r2, #20
 8009ed0:	429d      	cmp	r5, r3
 8009ed2:	d91f      	bls.n	8009f14 <_dtoa_r+0x2a4>
 8009ed4:	6041      	str	r1, [r0, #4]
 8009ed6:	4658      	mov	r0, fp
 8009ed8:	f000 fd8e 	bl	800a9f8 <_Balloc>
 8009edc:	4682      	mov	sl, r0
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	d13c      	bne.n	8009f5c <_dtoa_r+0x2ec>
 8009ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8009f50 <_dtoa_r+0x2e0>)
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	f240 11af 	movw	r1, #431	@ 0x1af
 8009eea:	e6d8      	b.n	8009c9e <_dtoa_r+0x2e>
 8009eec:	2301      	movs	r3, #1
 8009eee:	e7e0      	b.n	8009eb2 <_dtoa_r+0x242>
 8009ef0:	2401      	movs	r4, #1
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ef6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8009efc:	9300      	str	r3, [sp, #0]
 8009efe:	9307      	str	r3, [sp, #28]
 8009f00:	2200      	movs	r2, #0
 8009f02:	2312      	movs	r3, #18
 8009f04:	e7d0      	b.n	8009ea8 <_dtoa_r+0x238>
 8009f06:	2301      	movs	r3, #1
 8009f08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f0a:	e7f5      	b.n	8009ef8 <_dtoa_r+0x288>
 8009f0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f0e:	9300      	str	r3, [sp, #0]
 8009f10:	9307      	str	r3, [sp, #28]
 8009f12:	e7d7      	b.n	8009ec4 <_dtoa_r+0x254>
 8009f14:	3101      	adds	r1, #1
 8009f16:	0052      	lsls	r2, r2, #1
 8009f18:	e7d8      	b.n	8009ecc <_dtoa_r+0x25c>
 8009f1a:	bf00      	nop
 8009f1c:	f3af 8000 	nop.w
 8009f20:	636f4361 	.word	0x636f4361
 8009f24:	3fd287a7 	.word	0x3fd287a7
 8009f28:	8b60c8b3 	.word	0x8b60c8b3
 8009f2c:	3fc68a28 	.word	0x3fc68a28
 8009f30:	509f79fb 	.word	0x509f79fb
 8009f34:	3fd34413 	.word	0x3fd34413
 8009f38:	0800bca9 	.word	0x0800bca9
 8009f3c:	0800bcc0 	.word	0x0800bcc0
 8009f40:	7ff00000 	.word	0x7ff00000
 8009f44:	0800bc79 	.word	0x0800bc79
 8009f48:	3ff80000 	.word	0x3ff80000
 8009f4c:	0800bdb8 	.word	0x0800bdb8
 8009f50:	0800bd18 	.word	0x0800bd18
 8009f54:	0800bca5 	.word	0x0800bca5
 8009f58:	0800bc78 	.word	0x0800bc78
 8009f5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009f60:	6018      	str	r0, [r3, #0]
 8009f62:	9b07      	ldr	r3, [sp, #28]
 8009f64:	2b0e      	cmp	r3, #14
 8009f66:	f200 80a4 	bhi.w	800a0b2 <_dtoa_r+0x442>
 8009f6a:	2c00      	cmp	r4, #0
 8009f6c:	f000 80a1 	beq.w	800a0b2 <_dtoa_r+0x442>
 8009f70:	2f00      	cmp	r7, #0
 8009f72:	dd33      	ble.n	8009fdc <_dtoa_r+0x36c>
 8009f74:	4bad      	ldr	r3, [pc, #692]	@ (800a22c <_dtoa_r+0x5bc>)
 8009f76:	f007 020f 	and.w	r2, r7, #15
 8009f7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f7e:	ed93 7b00 	vldr	d7, [r3]
 8009f82:	05f8      	lsls	r0, r7, #23
 8009f84:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009f88:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009f8c:	d516      	bpl.n	8009fbc <_dtoa_r+0x34c>
 8009f8e:	4ba8      	ldr	r3, [pc, #672]	@ (800a230 <_dtoa_r+0x5c0>)
 8009f90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009f98:	f7f6 fc60 	bl	800085c <__aeabi_ddiv>
 8009f9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fa0:	f004 040f 	and.w	r4, r4, #15
 8009fa4:	2603      	movs	r6, #3
 8009fa6:	4da2      	ldr	r5, [pc, #648]	@ (800a230 <_dtoa_r+0x5c0>)
 8009fa8:	b954      	cbnz	r4, 8009fc0 <_dtoa_r+0x350>
 8009faa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fb2:	f7f6 fc53 	bl	800085c <__aeabi_ddiv>
 8009fb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fba:	e028      	b.n	800a00e <_dtoa_r+0x39e>
 8009fbc:	2602      	movs	r6, #2
 8009fbe:	e7f2      	b.n	8009fa6 <_dtoa_r+0x336>
 8009fc0:	07e1      	lsls	r1, r4, #31
 8009fc2:	d508      	bpl.n	8009fd6 <_dtoa_r+0x366>
 8009fc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009fcc:	f7f6 fb1c 	bl	8000608 <__aeabi_dmul>
 8009fd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fd4:	3601      	adds	r6, #1
 8009fd6:	1064      	asrs	r4, r4, #1
 8009fd8:	3508      	adds	r5, #8
 8009fda:	e7e5      	b.n	8009fa8 <_dtoa_r+0x338>
 8009fdc:	f000 80d2 	beq.w	800a184 <_dtoa_r+0x514>
 8009fe0:	427c      	negs	r4, r7
 8009fe2:	4b92      	ldr	r3, [pc, #584]	@ (800a22c <_dtoa_r+0x5bc>)
 8009fe4:	4d92      	ldr	r5, [pc, #584]	@ (800a230 <_dtoa_r+0x5c0>)
 8009fe6:	f004 020f 	and.w	r2, r4, #15
 8009fea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ff6:	f7f6 fb07 	bl	8000608 <__aeabi_dmul>
 8009ffa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ffe:	1124      	asrs	r4, r4, #4
 800a000:	2300      	movs	r3, #0
 800a002:	2602      	movs	r6, #2
 800a004:	2c00      	cmp	r4, #0
 800a006:	f040 80b2 	bne.w	800a16e <_dtoa_r+0x4fe>
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d1d3      	bne.n	8009fb6 <_dtoa_r+0x346>
 800a00e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a010:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a014:	2b00      	cmp	r3, #0
 800a016:	f000 80b7 	beq.w	800a188 <_dtoa_r+0x518>
 800a01a:	4b86      	ldr	r3, [pc, #536]	@ (800a234 <_dtoa_r+0x5c4>)
 800a01c:	2200      	movs	r2, #0
 800a01e:	4620      	mov	r0, r4
 800a020:	4629      	mov	r1, r5
 800a022:	f7f6 fd63 	bl	8000aec <__aeabi_dcmplt>
 800a026:	2800      	cmp	r0, #0
 800a028:	f000 80ae 	beq.w	800a188 <_dtoa_r+0x518>
 800a02c:	9b07      	ldr	r3, [sp, #28]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	f000 80aa 	beq.w	800a188 <_dtoa_r+0x518>
 800a034:	9b00      	ldr	r3, [sp, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	dd37      	ble.n	800a0aa <_dtoa_r+0x43a>
 800a03a:	1e7b      	subs	r3, r7, #1
 800a03c:	9304      	str	r3, [sp, #16]
 800a03e:	4620      	mov	r0, r4
 800a040:	4b7d      	ldr	r3, [pc, #500]	@ (800a238 <_dtoa_r+0x5c8>)
 800a042:	2200      	movs	r2, #0
 800a044:	4629      	mov	r1, r5
 800a046:	f7f6 fadf 	bl	8000608 <__aeabi_dmul>
 800a04a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a04e:	9c00      	ldr	r4, [sp, #0]
 800a050:	3601      	adds	r6, #1
 800a052:	4630      	mov	r0, r6
 800a054:	f7f6 fa6e 	bl	8000534 <__aeabi_i2d>
 800a058:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a05c:	f7f6 fad4 	bl	8000608 <__aeabi_dmul>
 800a060:	4b76      	ldr	r3, [pc, #472]	@ (800a23c <_dtoa_r+0x5cc>)
 800a062:	2200      	movs	r2, #0
 800a064:	f7f6 f91a 	bl	800029c <__adddf3>
 800a068:	4605      	mov	r5, r0
 800a06a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a06e:	2c00      	cmp	r4, #0
 800a070:	f040 808d 	bne.w	800a18e <_dtoa_r+0x51e>
 800a074:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a078:	4b71      	ldr	r3, [pc, #452]	@ (800a240 <_dtoa_r+0x5d0>)
 800a07a:	2200      	movs	r2, #0
 800a07c:	f7f6 f90c 	bl	8000298 <__aeabi_dsub>
 800a080:	4602      	mov	r2, r0
 800a082:	460b      	mov	r3, r1
 800a084:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a088:	462a      	mov	r2, r5
 800a08a:	4633      	mov	r3, r6
 800a08c:	f7f6 fd4c 	bl	8000b28 <__aeabi_dcmpgt>
 800a090:	2800      	cmp	r0, #0
 800a092:	f040 828b 	bne.w	800a5ac <_dtoa_r+0x93c>
 800a096:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a09a:	462a      	mov	r2, r5
 800a09c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a0a0:	f7f6 fd24 	bl	8000aec <__aeabi_dcmplt>
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	f040 8128 	bne.w	800a2fa <_dtoa_r+0x68a>
 800a0aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a0ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a0b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	f2c0 815a 	blt.w	800a36e <_dtoa_r+0x6fe>
 800a0ba:	2f0e      	cmp	r7, #14
 800a0bc:	f300 8157 	bgt.w	800a36e <_dtoa_r+0x6fe>
 800a0c0:	4b5a      	ldr	r3, [pc, #360]	@ (800a22c <_dtoa_r+0x5bc>)
 800a0c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a0c6:	ed93 7b00 	vldr	d7, [r3]
 800a0ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	ed8d 7b00 	vstr	d7, [sp]
 800a0d2:	da03      	bge.n	800a0dc <_dtoa_r+0x46c>
 800a0d4:	9b07      	ldr	r3, [sp, #28]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	f340 8101 	ble.w	800a2de <_dtoa_r+0x66e>
 800a0dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a0e0:	4656      	mov	r6, sl
 800a0e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	4629      	mov	r1, r5
 800a0ea:	f7f6 fbb7 	bl	800085c <__aeabi_ddiv>
 800a0ee:	f7f6 fd3b 	bl	8000b68 <__aeabi_d2iz>
 800a0f2:	4680      	mov	r8, r0
 800a0f4:	f7f6 fa1e 	bl	8000534 <__aeabi_i2d>
 800a0f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0fc:	f7f6 fa84 	bl	8000608 <__aeabi_dmul>
 800a100:	4602      	mov	r2, r0
 800a102:	460b      	mov	r3, r1
 800a104:	4620      	mov	r0, r4
 800a106:	4629      	mov	r1, r5
 800a108:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a10c:	f7f6 f8c4 	bl	8000298 <__aeabi_dsub>
 800a110:	f806 4b01 	strb.w	r4, [r6], #1
 800a114:	9d07      	ldr	r5, [sp, #28]
 800a116:	eba6 040a 	sub.w	r4, r6, sl
 800a11a:	42a5      	cmp	r5, r4
 800a11c:	4602      	mov	r2, r0
 800a11e:	460b      	mov	r3, r1
 800a120:	f040 8117 	bne.w	800a352 <_dtoa_r+0x6e2>
 800a124:	f7f6 f8ba 	bl	800029c <__adddf3>
 800a128:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a12c:	4604      	mov	r4, r0
 800a12e:	460d      	mov	r5, r1
 800a130:	f7f6 fcfa 	bl	8000b28 <__aeabi_dcmpgt>
 800a134:	2800      	cmp	r0, #0
 800a136:	f040 80f9 	bne.w	800a32c <_dtoa_r+0x6bc>
 800a13a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a13e:	4620      	mov	r0, r4
 800a140:	4629      	mov	r1, r5
 800a142:	f7f6 fcc9 	bl	8000ad8 <__aeabi_dcmpeq>
 800a146:	b118      	cbz	r0, 800a150 <_dtoa_r+0x4e0>
 800a148:	f018 0f01 	tst.w	r8, #1
 800a14c:	f040 80ee 	bne.w	800a32c <_dtoa_r+0x6bc>
 800a150:	4649      	mov	r1, r9
 800a152:	4658      	mov	r0, fp
 800a154:	f000 fc90 	bl	800aa78 <_Bfree>
 800a158:	2300      	movs	r3, #0
 800a15a:	7033      	strb	r3, [r6, #0]
 800a15c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a15e:	3701      	adds	r7, #1
 800a160:	601f      	str	r7, [r3, #0]
 800a162:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a164:	2b00      	cmp	r3, #0
 800a166:	f000 831d 	beq.w	800a7a4 <_dtoa_r+0xb34>
 800a16a:	601e      	str	r6, [r3, #0]
 800a16c:	e31a      	b.n	800a7a4 <_dtoa_r+0xb34>
 800a16e:	07e2      	lsls	r2, r4, #31
 800a170:	d505      	bpl.n	800a17e <_dtoa_r+0x50e>
 800a172:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a176:	f7f6 fa47 	bl	8000608 <__aeabi_dmul>
 800a17a:	3601      	adds	r6, #1
 800a17c:	2301      	movs	r3, #1
 800a17e:	1064      	asrs	r4, r4, #1
 800a180:	3508      	adds	r5, #8
 800a182:	e73f      	b.n	800a004 <_dtoa_r+0x394>
 800a184:	2602      	movs	r6, #2
 800a186:	e742      	b.n	800a00e <_dtoa_r+0x39e>
 800a188:	9c07      	ldr	r4, [sp, #28]
 800a18a:	9704      	str	r7, [sp, #16]
 800a18c:	e761      	b.n	800a052 <_dtoa_r+0x3e2>
 800a18e:	4b27      	ldr	r3, [pc, #156]	@ (800a22c <_dtoa_r+0x5bc>)
 800a190:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a192:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a196:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a19a:	4454      	add	r4, sl
 800a19c:	2900      	cmp	r1, #0
 800a19e:	d053      	beq.n	800a248 <_dtoa_r+0x5d8>
 800a1a0:	4928      	ldr	r1, [pc, #160]	@ (800a244 <_dtoa_r+0x5d4>)
 800a1a2:	2000      	movs	r0, #0
 800a1a4:	f7f6 fb5a 	bl	800085c <__aeabi_ddiv>
 800a1a8:	4633      	mov	r3, r6
 800a1aa:	462a      	mov	r2, r5
 800a1ac:	f7f6 f874 	bl	8000298 <__aeabi_dsub>
 800a1b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a1b4:	4656      	mov	r6, sl
 800a1b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1ba:	f7f6 fcd5 	bl	8000b68 <__aeabi_d2iz>
 800a1be:	4605      	mov	r5, r0
 800a1c0:	f7f6 f9b8 	bl	8000534 <__aeabi_i2d>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1cc:	f7f6 f864 	bl	8000298 <__aeabi_dsub>
 800a1d0:	3530      	adds	r5, #48	@ 0x30
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a1da:	f806 5b01 	strb.w	r5, [r6], #1
 800a1de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a1e2:	f7f6 fc83 	bl	8000aec <__aeabi_dcmplt>
 800a1e6:	2800      	cmp	r0, #0
 800a1e8:	d171      	bne.n	800a2ce <_dtoa_r+0x65e>
 800a1ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1ee:	4911      	ldr	r1, [pc, #68]	@ (800a234 <_dtoa_r+0x5c4>)
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	f7f6 f851 	bl	8000298 <__aeabi_dsub>
 800a1f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a1fa:	f7f6 fc77 	bl	8000aec <__aeabi_dcmplt>
 800a1fe:	2800      	cmp	r0, #0
 800a200:	f040 8095 	bne.w	800a32e <_dtoa_r+0x6be>
 800a204:	42a6      	cmp	r6, r4
 800a206:	f43f af50 	beq.w	800a0aa <_dtoa_r+0x43a>
 800a20a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a20e:	4b0a      	ldr	r3, [pc, #40]	@ (800a238 <_dtoa_r+0x5c8>)
 800a210:	2200      	movs	r2, #0
 800a212:	f7f6 f9f9 	bl	8000608 <__aeabi_dmul>
 800a216:	4b08      	ldr	r3, [pc, #32]	@ (800a238 <_dtoa_r+0x5c8>)
 800a218:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a21c:	2200      	movs	r2, #0
 800a21e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a222:	f7f6 f9f1 	bl	8000608 <__aeabi_dmul>
 800a226:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a22a:	e7c4      	b.n	800a1b6 <_dtoa_r+0x546>
 800a22c:	0800bdb8 	.word	0x0800bdb8
 800a230:	0800bd90 	.word	0x0800bd90
 800a234:	3ff00000 	.word	0x3ff00000
 800a238:	40240000 	.word	0x40240000
 800a23c:	401c0000 	.word	0x401c0000
 800a240:	40140000 	.word	0x40140000
 800a244:	3fe00000 	.word	0x3fe00000
 800a248:	4631      	mov	r1, r6
 800a24a:	4628      	mov	r0, r5
 800a24c:	f7f6 f9dc 	bl	8000608 <__aeabi_dmul>
 800a250:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a254:	9415      	str	r4, [sp, #84]	@ 0x54
 800a256:	4656      	mov	r6, sl
 800a258:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a25c:	f7f6 fc84 	bl	8000b68 <__aeabi_d2iz>
 800a260:	4605      	mov	r5, r0
 800a262:	f7f6 f967 	bl	8000534 <__aeabi_i2d>
 800a266:	4602      	mov	r2, r0
 800a268:	460b      	mov	r3, r1
 800a26a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a26e:	f7f6 f813 	bl	8000298 <__aeabi_dsub>
 800a272:	3530      	adds	r5, #48	@ 0x30
 800a274:	f806 5b01 	strb.w	r5, [r6], #1
 800a278:	4602      	mov	r2, r0
 800a27a:	460b      	mov	r3, r1
 800a27c:	42a6      	cmp	r6, r4
 800a27e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a282:	f04f 0200 	mov.w	r2, #0
 800a286:	d124      	bne.n	800a2d2 <_dtoa_r+0x662>
 800a288:	4bac      	ldr	r3, [pc, #688]	@ (800a53c <_dtoa_r+0x8cc>)
 800a28a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a28e:	f7f6 f805 	bl	800029c <__adddf3>
 800a292:	4602      	mov	r2, r0
 800a294:	460b      	mov	r3, r1
 800a296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a29a:	f7f6 fc45 	bl	8000b28 <__aeabi_dcmpgt>
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	d145      	bne.n	800a32e <_dtoa_r+0x6be>
 800a2a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a2a6:	49a5      	ldr	r1, [pc, #660]	@ (800a53c <_dtoa_r+0x8cc>)
 800a2a8:	2000      	movs	r0, #0
 800a2aa:	f7f5 fff5 	bl	8000298 <__aeabi_dsub>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2b6:	f7f6 fc19 	bl	8000aec <__aeabi_dcmplt>
 800a2ba:	2800      	cmp	r0, #0
 800a2bc:	f43f aef5 	beq.w	800a0aa <_dtoa_r+0x43a>
 800a2c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a2c2:	1e73      	subs	r3, r6, #1
 800a2c4:	9315      	str	r3, [sp, #84]	@ 0x54
 800a2c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a2ca:	2b30      	cmp	r3, #48	@ 0x30
 800a2cc:	d0f8      	beq.n	800a2c0 <_dtoa_r+0x650>
 800a2ce:	9f04      	ldr	r7, [sp, #16]
 800a2d0:	e73e      	b.n	800a150 <_dtoa_r+0x4e0>
 800a2d2:	4b9b      	ldr	r3, [pc, #620]	@ (800a540 <_dtoa_r+0x8d0>)
 800a2d4:	f7f6 f998 	bl	8000608 <__aeabi_dmul>
 800a2d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2dc:	e7bc      	b.n	800a258 <_dtoa_r+0x5e8>
 800a2de:	d10c      	bne.n	800a2fa <_dtoa_r+0x68a>
 800a2e0:	4b98      	ldr	r3, [pc, #608]	@ (800a544 <_dtoa_r+0x8d4>)
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2e8:	f7f6 f98e 	bl	8000608 <__aeabi_dmul>
 800a2ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2f0:	f7f6 fc10 	bl	8000b14 <__aeabi_dcmpge>
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	f000 8157 	beq.w	800a5a8 <_dtoa_r+0x938>
 800a2fa:	2400      	movs	r4, #0
 800a2fc:	4625      	mov	r5, r4
 800a2fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a300:	43db      	mvns	r3, r3
 800a302:	9304      	str	r3, [sp, #16]
 800a304:	4656      	mov	r6, sl
 800a306:	2700      	movs	r7, #0
 800a308:	4621      	mov	r1, r4
 800a30a:	4658      	mov	r0, fp
 800a30c:	f000 fbb4 	bl	800aa78 <_Bfree>
 800a310:	2d00      	cmp	r5, #0
 800a312:	d0dc      	beq.n	800a2ce <_dtoa_r+0x65e>
 800a314:	b12f      	cbz	r7, 800a322 <_dtoa_r+0x6b2>
 800a316:	42af      	cmp	r7, r5
 800a318:	d003      	beq.n	800a322 <_dtoa_r+0x6b2>
 800a31a:	4639      	mov	r1, r7
 800a31c:	4658      	mov	r0, fp
 800a31e:	f000 fbab 	bl	800aa78 <_Bfree>
 800a322:	4629      	mov	r1, r5
 800a324:	4658      	mov	r0, fp
 800a326:	f000 fba7 	bl	800aa78 <_Bfree>
 800a32a:	e7d0      	b.n	800a2ce <_dtoa_r+0x65e>
 800a32c:	9704      	str	r7, [sp, #16]
 800a32e:	4633      	mov	r3, r6
 800a330:	461e      	mov	r6, r3
 800a332:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a336:	2a39      	cmp	r2, #57	@ 0x39
 800a338:	d107      	bne.n	800a34a <_dtoa_r+0x6da>
 800a33a:	459a      	cmp	sl, r3
 800a33c:	d1f8      	bne.n	800a330 <_dtoa_r+0x6c0>
 800a33e:	9a04      	ldr	r2, [sp, #16]
 800a340:	3201      	adds	r2, #1
 800a342:	9204      	str	r2, [sp, #16]
 800a344:	2230      	movs	r2, #48	@ 0x30
 800a346:	f88a 2000 	strb.w	r2, [sl]
 800a34a:	781a      	ldrb	r2, [r3, #0]
 800a34c:	3201      	adds	r2, #1
 800a34e:	701a      	strb	r2, [r3, #0]
 800a350:	e7bd      	b.n	800a2ce <_dtoa_r+0x65e>
 800a352:	4b7b      	ldr	r3, [pc, #492]	@ (800a540 <_dtoa_r+0x8d0>)
 800a354:	2200      	movs	r2, #0
 800a356:	f7f6 f957 	bl	8000608 <__aeabi_dmul>
 800a35a:	2200      	movs	r2, #0
 800a35c:	2300      	movs	r3, #0
 800a35e:	4604      	mov	r4, r0
 800a360:	460d      	mov	r5, r1
 800a362:	f7f6 fbb9 	bl	8000ad8 <__aeabi_dcmpeq>
 800a366:	2800      	cmp	r0, #0
 800a368:	f43f aebb 	beq.w	800a0e2 <_dtoa_r+0x472>
 800a36c:	e6f0      	b.n	800a150 <_dtoa_r+0x4e0>
 800a36e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a370:	2a00      	cmp	r2, #0
 800a372:	f000 80db 	beq.w	800a52c <_dtoa_r+0x8bc>
 800a376:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a378:	2a01      	cmp	r2, #1
 800a37a:	f300 80bf 	bgt.w	800a4fc <_dtoa_r+0x88c>
 800a37e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a380:	2a00      	cmp	r2, #0
 800a382:	f000 80b7 	beq.w	800a4f4 <_dtoa_r+0x884>
 800a386:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a38a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a38c:	4646      	mov	r6, r8
 800a38e:	9a08      	ldr	r2, [sp, #32]
 800a390:	2101      	movs	r1, #1
 800a392:	441a      	add	r2, r3
 800a394:	4658      	mov	r0, fp
 800a396:	4498      	add	r8, r3
 800a398:	9208      	str	r2, [sp, #32]
 800a39a:	f000 fc21 	bl	800abe0 <__i2b>
 800a39e:	4605      	mov	r5, r0
 800a3a0:	b15e      	cbz	r6, 800a3ba <_dtoa_r+0x74a>
 800a3a2:	9b08      	ldr	r3, [sp, #32]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	dd08      	ble.n	800a3ba <_dtoa_r+0x74a>
 800a3a8:	42b3      	cmp	r3, r6
 800a3aa:	9a08      	ldr	r2, [sp, #32]
 800a3ac:	bfa8      	it	ge
 800a3ae:	4633      	movge	r3, r6
 800a3b0:	eba8 0803 	sub.w	r8, r8, r3
 800a3b4:	1af6      	subs	r6, r6, r3
 800a3b6:	1ad3      	subs	r3, r2, r3
 800a3b8:	9308      	str	r3, [sp, #32]
 800a3ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3bc:	b1f3      	cbz	r3, 800a3fc <_dtoa_r+0x78c>
 800a3be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	f000 80b7 	beq.w	800a534 <_dtoa_r+0x8c4>
 800a3c6:	b18c      	cbz	r4, 800a3ec <_dtoa_r+0x77c>
 800a3c8:	4629      	mov	r1, r5
 800a3ca:	4622      	mov	r2, r4
 800a3cc:	4658      	mov	r0, fp
 800a3ce:	f000 fcc7 	bl	800ad60 <__pow5mult>
 800a3d2:	464a      	mov	r2, r9
 800a3d4:	4601      	mov	r1, r0
 800a3d6:	4605      	mov	r5, r0
 800a3d8:	4658      	mov	r0, fp
 800a3da:	f000 fc17 	bl	800ac0c <__multiply>
 800a3de:	4649      	mov	r1, r9
 800a3e0:	9004      	str	r0, [sp, #16]
 800a3e2:	4658      	mov	r0, fp
 800a3e4:	f000 fb48 	bl	800aa78 <_Bfree>
 800a3e8:	9b04      	ldr	r3, [sp, #16]
 800a3ea:	4699      	mov	r9, r3
 800a3ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3ee:	1b1a      	subs	r2, r3, r4
 800a3f0:	d004      	beq.n	800a3fc <_dtoa_r+0x78c>
 800a3f2:	4649      	mov	r1, r9
 800a3f4:	4658      	mov	r0, fp
 800a3f6:	f000 fcb3 	bl	800ad60 <__pow5mult>
 800a3fa:	4681      	mov	r9, r0
 800a3fc:	2101      	movs	r1, #1
 800a3fe:	4658      	mov	r0, fp
 800a400:	f000 fbee 	bl	800abe0 <__i2b>
 800a404:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a406:	4604      	mov	r4, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f000 81cf 	beq.w	800a7ac <_dtoa_r+0xb3c>
 800a40e:	461a      	mov	r2, r3
 800a410:	4601      	mov	r1, r0
 800a412:	4658      	mov	r0, fp
 800a414:	f000 fca4 	bl	800ad60 <__pow5mult>
 800a418:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	4604      	mov	r4, r0
 800a41e:	f300 8095 	bgt.w	800a54c <_dtoa_r+0x8dc>
 800a422:	9b02      	ldr	r3, [sp, #8]
 800a424:	2b00      	cmp	r3, #0
 800a426:	f040 8087 	bne.w	800a538 <_dtoa_r+0x8c8>
 800a42a:	9b03      	ldr	r3, [sp, #12]
 800a42c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a430:	2b00      	cmp	r3, #0
 800a432:	f040 8089 	bne.w	800a548 <_dtoa_r+0x8d8>
 800a436:	9b03      	ldr	r3, [sp, #12]
 800a438:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a43c:	0d1b      	lsrs	r3, r3, #20
 800a43e:	051b      	lsls	r3, r3, #20
 800a440:	b12b      	cbz	r3, 800a44e <_dtoa_r+0x7de>
 800a442:	9b08      	ldr	r3, [sp, #32]
 800a444:	3301      	adds	r3, #1
 800a446:	9308      	str	r3, [sp, #32]
 800a448:	f108 0801 	add.w	r8, r8, #1
 800a44c:	2301      	movs	r3, #1
 800a44e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a450:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a452:	2b00      	cmp	r3, #0
 800a454:	f000 81b0 	beq.w	800a7b8 <_dtoa_r+0xb48>
 800a458:	6923      	ldr	r3, [r4, #16]
 800a45a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a45e:	6918      	ldr	r0, [r3, #16]
 800a460:	f000 fb72 	bl	800ab48 <__hi0bits>
 800a464:	f1c0 0020 	rsb	r0, r0, #32
 800a468:	9b08      	ldr	r3, [sp, #32]
 800a46a:	4418      	add	r0, r3
 800a46c:	f010 001f 	ands.w	r0, r0, #31
 800a470:	d077      	beq.n	800a562 <_dtoa_r+0x8f2>
 800a472:	f1c0 0320 	rsb	r3, r0, #32
 800a476:	2b04      	cmp	r3, #4
 800a478:	dd6b      	ble.n	800a552 <_dtoa_r+0x8e2>
 800a47a:	9b08      	ldr	r3, [sp, #32]
 800a47c:	f1c0 001c 	rsb	r0, r0, #28
 800a480:	4403      	add	r3, r0
 800a482:	4480      	add	r8, r0
 800a484:	4406      	add	r6, r0
 800a486:	9308      	str	r3, [sp, #32]
 800a488:	f1b8 0f00 	cmp.w	r8, #0
 800a48c:	dd05      	ble.n	800a49a <_dtoa_r+0x82a>
 800a48e:	4649      	mov	r1, r9
 800a490:	4642      	mov	r2, r8
 800a492:	4658      	mov	r0, fp
 800a494:	f000 fcbe 	bl	800ae14 <__lshift>
 800a498:	4681      	mov	r9, r0
 800a49a:	9b08      	ldr	r3, [sp, #32]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	dd05      	ble.n	800a4ac <_dtoa_r+0x83c>
 800a4a0:	4621      	mov	r1, r4
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	4658      	mov	r0, fp
 800a4a6:	f000 fcb5 	bl	800ae14 <__lshift>
 800a4aa:	4604      	mov	r4, r0
 800a4ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d059      	beq.n	800a566 <_dtoa_r+0x8f6>
 800a4b2:	4621      	mov	r1, r4
 800a4b4:	4648      	mov	r0, r9
 800a4b6:	f000 fd19 	bl	800aeec <__mcmp>
 800a4ba:	2800      	cmp	r0, #0
 800a4bc:	da53      	bge.n	800a566 <_dtoa_r+0x8f6>
 800a4be:	1e7b      	subs	r3, r7, #1
 800a4c0:	9304      	str	r3, [sp, #16]
 800a4c2:	4649      	mov	r1, r9
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	220a      	movs	r2, #10
 800a4c8:	4658      	mov	r0, fp
 800a4ca:	f000 faf7 	bl	800aabc <__multadd>
 800a4ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4d0:	4681      	mov	r9, r0
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	f000 8172 	beq.w	800a7bc <_dtoa_r+0xb4c>
 800a4d8:	2300      	movs	r3, #0
 800a4da:	4629      	mov	r1, r5
 800a4dc:	220a      	movs	r2, #10
 800a4de:	4658      	mov	r0, fp
 800a4e0:	f000 faec 	bl	800aabc <__multadd>
 800a4e4:	9b00      	ldr	r3, [sp, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	4605      	mov	r5, r0
 800a4ea:	dc67      	bgt.n	800a5bc <_dtoa_r+0x94c>
 800a4ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4ee:	2b02      	cmp	r3, #2
 800a4f0:	dc41      	bgt.n	800a576 <_dtoa_r+0x906>
 800a4f2:	e063      	b.n	800a5bc <_dtoa_r+0x94c>
 800a4f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a4f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a4fa:	e746      	b.n	800a38a <_dtoa_r+0x71a>
 800a4fc:	9b07      	ldr	r3, [sp, #28]
 800a4fe:	1e5c      	subs	r4, r3, #1
 800a500:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a502:	42a3      	cmp	r3, r4
 800a504:	bfbf      	itttt	lt
 800a506:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a508:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a50a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a50c:	1ae3      	sublt	r3, r4, r3
 800a50e:	bfb4      	ite	lt
 800a510:	18d2      	addlt	r2, r2, r3
 800a512:	1b1c      	subge	r4, r3, r4
 800a514:	9b07      	ldr	r3, [sp, #28]
 800a516:	bfbc      	itt	lt
 800a518:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a51a:	2400      	movlt	r4, #0
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	bfb5      	itete	lt
 800a520:	eba8 0603 	sublt.w	r6, r8, r3
 800a524:	9b07      	ldrge	r3, [sp, #28]
 800a526:	2300      	movlt	r3, #0
 800a528:	4646      	movge	r6, r8
 800a52a:	e730      	b.n	800a38e <_dtoa_r+0x71e>
 800a52c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a52e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a530:	4646      	mov	r6, r8
 800a532:	e735      	b.n	800a3a0 <_dtoa_r+0x730>
 800a534:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a536:	e75c      	b.n	800a3f2 <_dtoa_r+0x782>
 800a538:	2300      	movs	r3, #0
 800a53a:	e788      	b.n	800a44e <_dtoa_r+0x7de>
 800a53c:	3fe00000 	.word	0x3fe00000
 800a540:	40240000 	.word	0x40240000
 800a544:	40140000 	.word	0x40140000
 800a548:	9b02      	ldr	r3, [sp, #8]
 800a54a:	e780      	b.n	800a44e <_dtoa_r+0x7de>
 800a54c:	2300      	movs	r3, #0
 800a54e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a550:	e782      	b.n	800a458 <_dtoa_r+0x7e8>
 800a552:	d099      	beq.n	800a488 <_dtoa_r+0x818>
 800a554:	9a08      	ldr	r2, [sp, #32]
 800a556:	331c      	adds	r3, #28
 800a558:	441a      	add	r2, r3
 800a55a:	4498      	add	r8, r3
 800a55c:	441e      	add	r6, r3
 800a55e:	9208      	str	r2, [sp, #32]
 800a560:	e792      	b.n	800a488 <_dtoa_r+0x818>
 800a562:	4603      	mov	r3, r0
 800a564:	e7f6      	b.n	800a554 <_dtoa_r+0x8e4>
 800a566:	9b07      	ldr	r3, [sp, #28]
 800a568:	9704      	str	r7, [sp, #16]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	dc20      	bgt.n	800a5b0 <_dtoa_r+0x940>
 800a56e:	9300      	str	r3, [sp, #0]
 800a570:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a572:	2b02      	cmp	r3, #2
 800a574:	dd1e      	ble.n	800a5b4 <_dtoa_r+0x944>
 800a576:	9b00      	ldr	r3, [sp, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	f47f aec0 	bne.w	800a2fe <_dtoa_r+0x68e>
 800a57e:	4621      	mov	r1, r4
 800a580:	2205      	movs	r2, #5
 800a582:	4658      	mov	r0, fp
 800a584:	f000 fa9a 	bl	800aabc <__multadd>
 800a588:	4601      	mov	r1, r0
 800a58a:	4604      	mov	r4, r0
 800a58c:	4648      	mov	r0, r9
 800a58e:	f000 fcad 	bl	800aeec <__mcmp>
 800a592:	2800      	cmp	r0, #0
 800a594:	f77f aeb3 	ble.w	800a2fe <_dtoa_r+0x68e>
 800a598:	4656      	mov	r6, sl
 800a59a:	2331      	movs	r3, #49	@ 0x31
 800a59c:	f806 3b01 	strb.w	r3, [r6], #1
 800a5a0:	9b04      	ldr	r3, [sp, #16]
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	9304      	str	r3, [sp, #16]
 800a5a6:	e6ae      	b.n	800a306 <_dtoa_r+0x696>
 800a5a8:	9c07      	ldr	r4, [sp, #28]
 800a5aa:	9704      	str	r7, [sp, #16]
 800a5ac:	4625      	mov	r5, r4
 800a5ae:	e7f3      	b.n	800a598 <_dtoa_r+0x928>
 800a5b0:	9b07      	ldr	r3, [sp, #28]
 800a5b2:	9300      	str	r3, [sp, #0]
 800a5b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	f000 8104 	beq.w	800a7c4 <_dtoa_r+0xb54>
 800a5bc:	2e00      	cmp	r6, #0
 800a5be:	dd05      	ble.n	800a5cc <_dtoa_r+0x95c>
 800a5c0:	4629      	mov	r1, r5
 800a5c2:	4632      	mov	r2, r6
 800a5c4:	4658      	mov	r0, fp
 800a5c6:	f000 fc25 	bl	800ae14 <__lshift>
 800a5ca:	4605      	mov	r5, r0
 800a5cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d05a      	beq.n	800a688 <_dtoa_r+0xa18>
 800a5d2:	6869      	ldr	r1, [r5, #4]
 800a5d4:	4658      	mov	r0, fp
 800a5d6:	f000 fa0f 	bl	800a9f8 <_Balloc>
 800a5da:	4606      	mov	r6, r0
 800a5dc:	b928      	cbnz	r0, 800a5ea <_dtoa_r+0x97a>
 800a5de:	4b84      	ldr	r3, [pc, #528]	@ (800a7f0 <_dtoa_r+0xb80>)
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a5e6:	f7ff bb5a 	b.w	8009c9e <_dtoa_r+0x2e>
 800a5ea:	692a      	ldr	r2, [r5, #16]
 800a5ec:	3202      	adds	r2, #2
 800a5ee:	0092      	lsls	r2, r2, #2
 800a5f0:	f105 010c 	add.w	r1, r5, #12
 800a5f4:	300c      	adds	r0, #12
 800a5f6:	f000 ffaf 	bl	800b558 <memcpy>
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	4631      	mov	r1, r6
 800a5fe:	4658      	mov	r0, fp
 800a600:	f000 fc08 	bl	800ae14 <__lshift>
 800a604:	f10a 0301 	add.w	r3, sl, #1
 800a608:	9307      	str	r3, [sp, #28]
 800a60a:	9b00      	ldr	r3, [sp, #0]
 800a60c:	4453      	add	r3, sl
 800a60e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a610:	9b02      	ldr	r3, [sp, #8]
 800a612:	f003 0301 	and.w	r3, r3, #1
 800a616:	462f      	mov	r7, r5
 800a618:	930a      	str	r3, [sp, #40]	@ 0x28
 800a61a:	4605      	mov	r5, r0
 800a61c:	9b07      	ldr	r3, [sp, #28]
 800a61e:	4621      	mov	r1, r4
 800a620:	3b01      	subs	r3, #1
 800a622:	4648      	mov	r0, r9
 800a624:	9300      	str	r3, [sp, #0]
 800a626:	f7ff fa9a 	bl	8009b5e <quorem>
 800a62a:	4639      	mov	r1, r7
 800a62c:	9002      	str	r0, [sp, #8]
 800a62e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a632:	4648      	mov	r0, r9
 800a634:	f000 fc5a 	bl	800aeec <__mcmp>
 800a638:	462a      	mov	r2, r5
 800a63a:	9008      	str	r0, [sp, #32]
 800a63c:	4621      	mov	r1, r4
 800a63e:	4658      	mov	r0, fp
 800a640:	f000 fc70 	bl	800af24 <__mdiff>
 800a644:	68c2      	ldr	r2, [r0, #12]
 800a646:	4606      	mov	r6, r0
 800a648:	bb02      	cbnz	r2, 800a68c <_dtoa_r+0xa1c>
 800a64a:	4601      	mov	r1, r0
 800a64c:	4648      	mov	r0, r9
 800a64e:	f000 fc4d 	bl	800aeec <__mcmp>
 800a652:	4602      	mov	r2, r0
 800a654:	4631      	mov	r1, r6
 800a656:	4658      	mov	r0, fp
 800a658:	920e      	str	r2, [sp, #56]	@ 0x38
 800a65a:	f000 fa0d 	bl	800aa78 <_Bfree>
 800a65e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a660:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a662:	9e07      	ldr	r6, [sp, #28]
 800a664:	ea43 0102 	orr.w	r1, r3, r2
 800a668:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a66a:	4319      	orrs	r1, r3
 800a66c:	d110      	bne.n	800a690 <_dtoa_r+0xa20>
 800a66e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a672:	d029      	beq.n	800a6c8 <_dtoa_r+0xa58>
 800a674:	9b08      	ldr	r3, [sp, #32]
 800a676:	2b00      	cmp	r3, #0
 800a678:	dd02      	ble.n	800a680 <_dtoa_r+0xa10>
 800a67a:	9b02      	ldr	r3, [sp, #8]
 800a67c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a680:	9b00      	ldr	r3, [sp, #0]
 800a682:	f883 8000 	strb.w	r8, [r3]
 800a686:	e63f      	b.n	800a308 <_dtoa_r+0x698>
 800a688:	4628      	mov	r0, r5
 800a68a:	e7bb      	b.n	800a604 <_dtoa_r+0x994>
 800a68c:	2201      	movs	r2, #1
 800a68e:	e7e1      	b.n	800a654 <_dtoa_r+0x9e4>
 800a690:	9b08      	ldr	r3, [sp, #32]
 800a692:	2b00      	cmp	r3, #0
 800a694:	db04      	blt.n	800a6a0 <_dtoa_r+0xa30>
 800a696:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a698:	430b      	orrs	r3, r1
 800a69a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a69c:	430b      	orrs	r3, r1
 800a69e:	d120      	bne.n	800a6e2 <_dtoa_r+0xa72>
 800a6a0:	2a00      	cmp	r2, #0
 800a6a2:	dded      	ble.n	800a680 <_dtoa_r+0xa10>
 800a6a4:	4649      	mov	r1, r9
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	4658      	mov	r0, fp
 800a6aa:	f000 fbb3 	bl	800ae14 <__lshift>
 800a6ae:	4621      	mov	r1, r4
 800a6b0:	4681      	mov	r9, r0
 800a6b2:	f000 fc1b 	bl	800aeec <__mcmp>
 800a6b6:	2800      	cmp	r0, #0
 800a6b8:	dc03      	bgt.n	800a6c2 <_dtoa_r+0xa52>
 800a6ba:	d1e1      	bne.n	800a680 <_dtoa_r+0xa10>
 800a6bc:	f018 0f01 	tst.w	r8, #1
 800a6c0:	d0de      	beq.n	800a680 <_dtoa_r+0xa10>
 800a6c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a6c6:	d1d8      	bne.n	800a67a <_dtoa_r+0xa0a>
 800a6c8:	9a00      	ldr	r2, [sp, #0]
 800a6ca:	2339      	movs	r3, #57	@ 0x39
 800a6cc:	7013      	strb	r3, [r2, #0]
 800a6ce:	4633      	mov	r3, r6
 800a6d0:	461e      	mov	r6, r3
 800a6d2:	3b01      	subs	r3, #1
 800a6d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a6d8:	2a39      	cmp	r2, #57	@ 0x39
 800a6da:	d052      	beq.n	800a782 <_dtoa_r+0xb12>
 800a6dc:	3201      	adds	r2, #1
 800a6de:	701a      	strb	r2, [r3, #0]
 800a6e0:	e612      	b.n	800a308 <_dtoa_r+0x698>
 800a6e2:	2a00      	cmp	r2, #0
 800a6e4:	dd07      	ble.n	800a6f6 <_dtoa_r+0xa86>
 800a6e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a6ea:	d0ed      	beq.n	800a6c8 <_dtoa_r+0xa58>
 800a6ec:	9a00      	ldr	r2, [sp, #0]
 800a6ee:	f108 0301 	add.w	r3, r8, #1
 800a6f2:	7013      	strb	r3, [r2, #0]
 800a6f4:	e608      	b.n	800a308 <_dtoa_r+0x698>
 800a6f6:	9b07      	ldr	r3, [sp, #28]
 800a6f8:	9a07      	ldr	r2, [sp, #28]
 800a6fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a6fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a700:	4293      	cmp	r3, r2
 800a702:	d028      	beq.n	800a756 <_dtoa_r+0xae6>
 800a704:	4649      	mov	r1, r9
 800a706:	2300      	movs	r3, #0
 800a708:	220a      	movs	r2, #10
 800a70a:	4658      	mov	r0, fp
 800a70c:	f000 f9d6 	bl	800aabc <__multadd>
 800a710:	42af      	cmp	r7, r5
 800a712:	4681      	mov	r9, r0
 800a714:	f04f 0300 	mov.w	r3, #0
 800a718:	f04f 020a 	mov.w	r2, #10
 800a71c:	4639      	mov	r1, r7
 800a71e:	4658      	mov	r0, fp
 800a720:	d107      	bne.n	800a732 <_dtoa_r+0xac2>
 800a722:	f000 f9cb 	bl	800aabc <__multadd>
 800a726:	4607      	mov	r7, r0
 800a728:	4605      	mov	r5, r0
 800a72a:	9b07      	ldr	r3, [sp, #28]
 800a72c:	3301      	adds	r3, #1
 800a72e:	9307      	str	r3, [sp, #28]
 800a730:	e774      	b.n	800a61c <_dtoa_r+0x9ac>
 800a732:	f000 f9c3 	bl	800aabc <__multadd>
 800a736:	4629      	mov	r1, r5
 800a738:	4607      	mov	r7, r0
 800a73a:	2300      	movs	r3, #0
 800a73c:	220a      	movs	r2, #10
 800a73e:	4658      	mov	r0, fp
 800a740:	f000 f9bc 	bl	800aabc <__multadd>
 800a744:	4605      	mov	r5, r0
 800a746:	e7f0      	b.n	800a72a <_dtoa_r+0xaba>
 800a748:	9b00      	ldr	r3, [sp, #0]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	bfcc      	ite	gt
 800a74e:	461e      	movgt	r6, r3
 800a750:	2601      	movle	r6, #1
 800a752:	4456      	add	r6, sl
 800a754:	2700      	movs	r7, #0
 800a756:	4649      	mov	r1, r9
 800a758:	2201      	movs	r2, #1
 800a75a:	4658      	mov	r0, fp
 800a75c:	f000 fb5a 	bl	800ae14 <__lshift>
 800a760:	4621      	mov	r1, r4
 800a762:	4681      	mov	r9, r0
 800a764:	f000 fbc2 	bl	800aeec <__mcmp>
 800a768:	2800      	cmp	r0, #0
 800a76a:	dcb0      	bgt.n	800a6ce <_dtoa_r+0xa5e>
 800a76c:	d102      	bne.n	800a774 <_dtoa_r+0xb04>
 800a76e:	f018 0f01 	tst.w	r8, #1
 800a772:	d1ac      	bne.n	800a6ce <_dtoa_r+0xa5e>
 800a774:	4633      	mov	r3, r6
 800a776:	461e      	mov	r6, r3
 800a778:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a77c:	2a30      	cmp	r2, #48	@ 0x30
 800a77e:	d0fa      	beq.n	800a776 <_dtoa_r+0xb06>
 800a780:	e5c2      	b.n	800a308 <_dtoa_r+0x698>
 800a782:	459a      	cmp	sl, r3
 800a784:	d1a4      	bne.n	800a6d0 <_dtoa_r+0xa60>
 800a786:	9b04      	ldr	r3, [sp, #16]
 800a788:	3301      	adds	r3, #1
 800a78a:	9304      	str	r3, [sp, #16]
 800a78c:	2331      	movs	r3, #49	@ 0x31
 800a78e:	f88a 3000 	strb.w	r3, [sl]
 800a792:	e5b9      	b.n	800a308 <_dtoa_r+0x698>
 800a794:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a796:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a7f4 <_dtoa_r+0xb84>
 800a79a:	b11b      	cbz	r3, 800a7a4 <_dtoa_r+0xb34>
 800a79c:	f10a 0308 	add.w	r3, sl, #8
 800a7a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a7a2:	6013      	str	r3, [r2, #0]
 800a7a4:	4650      	mov	r0, sl
 800a7a6:	b019      	add	sp, #100	@ 0x64
 800a7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	f77f ae37 	ble.w	800a422 <_dtoa_r+0x7b2>
 800a7b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7b8:	2001      	movs	r0, #1
 800a7ba:	e655      	b.n	800a468 <_dtoa_r+0x7f8>
 800a7bc:	9b00      	ldr	r3, [sp, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	f77f aed6 	ble.w	800a570 <_dtoa_r+0x900>
 800a7c4:	4656      	mov	r6, sl
 800a7c6:	4621      	mov	r1, r4
 800a7c8:	4648      	mov	r0, r9
 800a7ca:	f7ff f9c8 	bl	8009b5e <quorem>
 800a7ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a7d2:	f806 8b01 	strb.w	r8, [r6], #1
 800a7d6:	9b00      	ldr	r3, [sp, #0]
 800a7d8:	eba6 020a 	sub.w	r2, r6, sl
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	ddb3      	ble.n	800a748 <_dtoa_r+0xad8>
 800a7e0:	4649      	mov	r1, r9
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	220a      	movs	r2, #10
 800a7e6:	4658      	mov	r0, fp
 800a7e8:	f000 f968 	bl	800aabc <__multadd>
 800a7ec:	4681      	mov	r9, r0
 800a7ee:	e7ea      	b.n	800a7c6 <_dtoa_r+0xb56>
 800a7f0:	0800bd18 	.word	0x0800bd18
 800a7f4:	0800bc9c 	.word	0x0800bc9c

0800a7f8 <_free_r>:
 800a7f8:	b538      	push	{r3, r4, r5, lr}
 800a7fa:	4605      	mov	r5, r0
 800a7fc:	2900      	cmp	r1, #0
 800a7fe:	d041      	beq.n	800a884 <_free_r+0x8c>
 800a800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a804:	1f0c      	subs	r4, r1, #4
 800a806:	2b00      	cmp	r3, #0
 800a808:	bfb8      	it	lt
 800a80a:	18e4      	addlt	r4, r4, r3
 800a80c:	f000 f8e8 	bl	800a9e0 <__malloc_lock>
 800a810:	4a1d      	ldr	r2, [pc, #116]	@ (800a888 <_free_r+0x90>)
 800a812:	6813      	ldr	r3, [r2, #0]
 800a814:	b933      	cbnz	r3, 800a824 <_free_r+0x2c>
 800a816:	6063      	str	r3, [r4, #4]
 800a818:	6014      	str	r4, [r2, #0]
 800a81a:	4628      	mov	r0, r5
 800a81c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a820:	f000 b8e4 	b.w	800a9ec <__malloc_unlock>
 800a824:	42a3      	cmp	r3, r4
 800a826:	d908      	bls.n	800a83a <_free_r+0x42>
 800a828:	6820      	ldr	r0, [r4, #0]
 800a82a:	1821      	adds	r1, r4, r0
 800a82c:	428b      	cmp	r3, r1
 800a82e:	bf01      	itttt	eq
 800a830:	6819      	ldreq	r1, [r3, #0]
 800a832:	685b      	ldreq	r3, [r3, #4]
 800a834:	1809      	addeq	r1, r1, r0
 800a836:	6021      	streq	r1, [r4, #0]
 800a838:	e7ed      	b.n	800a816 <_free_r+0x1e>
 800a83a:	461a      	mov	r2, r3
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	b10b      	cbz	r3, 800a844 <_free_r+0x4c>
 800a840:	42a3      	cmp	r3, r4
 800a842:	d9fa      	bls.n	800a83a <_free_r+0x42>
 800a844:	6811      	ldr	r1, [r2, #0]
 800a846:	1850      	adds	r0, r2, r1
 800a848:	42a0      	cmp	r0, r4
 800a84a:	d10b      	bne.n	800a864 <_free_r+0x6c>
 800a84c:	6820      	ldr	r0, [r4, #0]
 800a84e:	4401      	add	r1, r0
 800a850:	1850      	adds	r0, r2, r1
 800a852:	4283      	cmp	r3, r0
 800a854:	6011      	str	r1, [r2, #0]
 800a856:	d1e0      	bne.n	800a81a <_free_r+0x22>
 800a858:	6818      	ldr	r0, [r3, #0]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	6053      	str	r3, [r2, #4]
 800a85e:	4408      	add	r0, r1
 800a860:	6010      	str	r0, [r2, #0]
 800a862:	e7da      	b.n	800a81a <_free_r+0x22>
 800a864:	d902      	bls.n	800a86c <_free_r+0x74>
 800a866:	230c      	movs	r3, #12
 800a868:	602b      	str	r3, [r5, #0]
 800a86a:	e7d6      	b.n	800a81a <_free_r+0x22>
 800a86c:	6820      	ldr	r0, [r4, #0]
 800a86e:	1821      	adds	r1, r4, r0
 800a870:	428b      	cmp	r3, r1
 800a872:	bf04      	itt	eq
 800a874:	6819      	ldreq	r1, [r3, #0]
 800a876:	685b      	ldreq	r3, [r3, #4]
 800a878:	6063      	str	r3, [r4, #4]
 800a87a:	bf04      	itt	eq
 800a87c:	1809      	addeq	r1, r1, r0
 800a87e:	6021      	streq	r1, [r4, #0]
 800a880:	6054      	str	r4, [r2, #4]
 800a882:	e7ca      	b.n	800a81a <_free_r+0x22>
 800a884:	bd38      	pop	{r3, r4, r5, pc}
 800a886:	bf00      	nop
 800a888:	2000212c 	.word	0x2000212c

0800a88c <malloc>:
 800a88c:	4b02      	ldr	r3, [pc, #8]	@ (800a898 <malloc+0xc>)
 800a88e:	4601      	mov	r1, r0
 800a890:	6818      	ldr	r0, [r3, #0]
 800a892:	f000 b825 	b.w	800a8e0 <_malloc_r>
 800a896:	bf00      	nop
 800a898:	20000108 	.word	0x20000108

0800a89c <sbrk_aligned>:
 800a89c:	b570      	push	{r4, r5, r6, lr}
 800a89e:	4e0f      	ldr	r6, [pc, #60]	@ (800a8dc <sbrk_aligned+0x40>)
 800a8a0:	460c      	mov	r4, r1
 800a8a2:	6831      	ldr	r1, [r6, #0]
 800a8a4:	4605      	mov	r5, r0
 800a8a6:	b911      	cbnz	r1, 800a8ae <sbrk_aligned+0x12>
 800a8a8:	f000 fe46 	bl	800b538 <_sbrk_r>
 800a8ac:	6030      	str	r0, [r6, #0]
 800a8ae:	4621      	mov	r1, r4
 800a8b0:	4628      	mov	r0, r5
 800a8b2:	f000 fe41 	bl	800b538 <_sbrk_r>
 800a8b6:	1c43      	adds	r3, r0, #1
 800a8b8:	d103      	bne.n	800a8c2 <sbrk_aligned+0x26>
 800a8ba:	f04f 34ff 	mov.w	r4, #4294967295
 800a8be:	4620      	mov	r0, r4
 800a8c0:	bd70      	pop	{r4, r5, r6, pc}
 800a8c2:	1cc4      	adds	r4, r0, #3
 800a8c4:	f024 0403 	bic.w	r4, r4, #3
 800a8c8:	42a0      	cmp	r0, r4
 800a8ca:	d0f8      	beq.n	800a8be <sbrk_aligned+0x22>
 800a8cc:	1a21      	subs	r1, r4, r0
 800a8ce:	4628      	mov	r0, r5
 800a8d0:	f000 fe32 	bl	800b538 <_sbrk_r>
 800a8d4:	3001      	adds	r0, #1
 800a8d6:	d1f2      	bne.n	800a8be <sbrk_aligned+0x22>
 800a8d8:	e7ef      	b.n	800a8ba <sbrk_aligned+0x1e>
 800a8da:	bf00      	nop
 800a8dc:	20002128 	.word	0x20002128

0800a8e0 <_malloc_r>:
 800a8e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8e4:	1ccd      	adds	r5, r1, #3
 800a8e6:	f025 0503 	bic.w	r5, r5, #3
 800a8ea:	3508      	adds	r5, #8
 800a8ec:	2d0c      	cmp	r5, #12
 800a8ee:	bf38      	it	cc
 800a8f0:	250c      	movcc	r5, #12
 800a8f2:	2d00      	cmp	r5, #0
 800a8f4:	4606      	mov	r6, r0
 800a8f6:	db01      	blt.n	800a8fc <_malloc_r+0x1c>
 800a8f8:	42a9      	cmp	r1, r5
 800a8fa:	d904      	bls.n	800a906 <_malloc_r+0x26>
 800a8fc:	230c      	movs	r3, #12
 800a8fe:	6033      	str	r3, [r6, #0]
 800a900:	2000      	movs	r0, #0
 800a902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a906:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a9dc <_malloc_r+0xfc>
 800a90a:	f000 f869 	bl	800a9e0 <__malloc_lock>
 800a90e:	f8d8 3000 	ldr.w	r3, [r8]
 800a912:	461c      	mov	r4, r3
 800a914:	bb44      	cbnz	r4, 800a968 <_malloc_r+0x88>
 800a916:	4629      	mov	r1, r5
 800a918:	4630      	mov	r0, r6
 800a91a:	f7ff ffbf 	bl	800a89c <sbrk_aligned>
 800a91e:	1c43      	adds	r3, r0, #1
 800a920:	4604      	mov	r4, r0
 800a922:	d158      	bne.n	800a9d6 <_malloc_r+0xf6>
 800a924:	f8d8 4000 	ldr.w	r4, [r8]
 800a928:	4627      	mov	r7, r4
 800a92a:	2f00      	cmp	r7, #0
 800a92c:	d143      	bne.n	800a9b6 <_malloc_r+0xd6>
 800a92e:	2c00      	cmp	r4, #0
 800a930:	d04b      	beq.n	800a9ca <_malloc_r+0xea>
 800a932:	6823      	ldr	r3, [r4, #0]
 800a934:	4639      	mov	r1, r7
 800a936:	4630      	mov	r0, r6
 800a938:	eb04 0903 	add.w	r9, r4, r3
 800a93c:	f000 fdfc 	bl	800b538 <_sbrk_r>
 800a940:	4581      	cmp	r9, r0
 800a942:	d142      	bne.n	800a9ca <_malloc_r+0xea>
 800a944:	6821      	ldr	r1, [r4, #0]
 800a946:	1a6d      	subs	r5, r5, r1
 800a948:	4629      	mov	r1, r5
 800a94a:	4630      	mov	r0, r6
 800a94c:	f7ff ffa6 	bl	800a89c <sbrk_aligned>
 800a950:	3001      	adds	r0, #1
 800a952:	d03a      	beq.n	800a9ca <_malloc_r+0xea>
 800a954:	6823      	ldr	r3, [r4, #0]
 800a956:	442b      	add	r3, r5
 800a958:	6023      	str	r3, [r4, #0]
 800a95a:	f8d8 3000 	ldr.w	r3, [r8]
 800a95e:	685a      	ldr	r2, [r3, #4]
 800a960:	bb62      	cbnz	r2, 800a9bc <_malloc_r+0xdc>
 800a962:	f8c8 7000 	str.w	r7, [r8]
 800a966:	e00f      	b.n	800a988 <_malloc_r+0xa8>
 800a968:	6822      	ldr	r2, [r4, #0]
 800a96a:	1b52      	subs	r2, r2, r5
 800a96c:	d420      	bmi.n	800a9b0 <_malloc_r+0xd0>
 800a96e:	2a0b      	cmp	r2, #11
 800a970:	d917      	bls.n	800a9a2 <_malloc_r+0xc2>
 800a972:	1961      	adds	r1, r4, r5
 800a974:	42a3      	cmp	r3, r4
 800a976:	6025      	str	r5, [r4, #0]
 800a978:	bf18      	it	ne
 800a97a:	6059      	strne	r1, [r3, #4]
 800a97c:	6863      	ldr	r3, [r4, #4]
 800a97e:	bf08      	it	eq
 800a980:	f8c8 1000 	streq.w	r1, [r8]
 800a984:	5162      	str	r2, [r4, r5]
 800a986:	604b      	str	r3, [r1, #4]
 800a988:	4630      	mov	r0, r6
 800a98a:	f000 f82f 	bl	800a9ec <__malloc_unlock>
 800a98e:	f104 000b 	add.w	r0, r4, #11
 800a992:	1d23      	adds	r3, r4, #4
 800a994:	f020 0007 	bic.w	r0, r0, #7
 800a998:	1ac2      	subs	r2, r0, r3
 800a99a:	bf1c      	itt	ne
 800a99c:	1a1b      	subne	r3, r3, r0
 800a99e:	50a3      	strne	r3, [r4, r2]
 800a9a0:	e7af      	b.n	800a902 <_malloc_r+0x22>
 800a9a2:	6862      	ldr	r2, [r4, #4]
 800a9a4:	42a3      	cmp	r3, r4
 800a9a6:	bf0c      	ite	eq
 800a9a8:	f8c8 2000 	streq.w	r2, [r8]
 800a9ac:	605a      	strne	r2, [r3, #4]
 800a9ae:	e7eb      	b.n	800a988 <_malloc_r+0xa8>
 800a9b0:	4623      	mov	r3, r4
 800a9b2:	6864      	ldr	r4, [r4, #4]
 800a9b4:	e7ae      	b.n	800a914 <_malloc_r+0x34>
 800a9b6:	463c      	mov	r4, r7
 800a9b8:	687f      	ldr	r7, [r7, #4]
 800a9ba:	e7b6      	b.n	800a92a <_malloc_r+0x4a>
 800a9bc:	461a      	mov	r2, r3
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	42a3      	cmp	r3, r4
 800a9c2:	d1fb      	bne.n	800a9bc <_malloc_r+0xdc>
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	6053      	str	r3, [r2, #4]
 800a9c8:	e7de      	b.n	800a988 <_malloc_r+0xa8>
 800a9ca:	230c      	movs	r3, #12
 800a9cc:	6033      	str	r3, [r6, #0]
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	f000 f80c 	bl	800a9ec <__malloc_unlock>
 800a9d4:	e794      	b.n	800a900 <_malloc_r+0x20>
 800a9d6:	6005      	str	r5, [r0, #0]
 800a9d8:	e7d6      	b.n	800a988 <_malloc_r+0xa8>
 800a9da:	bf00      	nop
 800a9dc:	2000212c 	.word	0x2000212c

0800a9e0 <__malloc_lock>:
 800a9e0:	4801      	ldr	r0, [pc, #4]	@ (800a9e8 <__malloc_lock+0x8>)
 800a9e2:	f7ff b8ba 	b.w	8009b5a <__retarget_lock_acquire_recursive>
 800a9e6:	bf00      	nop
 800a9e8:	20002124 	.word	0x20002124

0800a9ec <__malloc_unlock>:
 800a9ec:	4801      	ldr	r0, [pc, #4]	@ (800a9f4 <__malloc_unlock+0x8>)
 800a9ee:	f7ff b8b5 	b.w	8009b5c <__retarget_lock_release_recursive>
 800a9f2:	bf00      	nop
 800a9f4:	20002124 	.word	0x20002124

0800a9f8 <_Balloc>:
 800a9f8:	b570      	push	{r4, r5, r6, lr}
 800a9fa:	69c6      	ldr	r6, [r0, #28]
 800a9fc:	4604      	mov	r4, r0
 800a9fe:	460d      	mov	r5, r1
 800aa00:	b976      	cbnz	r6, 800aa20 <_Balloc+0x28>
 800aa02:	2010      	movs	r0, #16
 800aa04:	f7ff ff42 	bl	800a88c <malloc>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	61e0      	str	r0, [r4, #28]
 800aa0c:	b920      	cbnz	r0, 800aa18 <_Balloc+0x20>
 800aa0e:	4b18      	ldr	r3, [pc, #96]	@ (800aa70 <_Balloc+0x78>)
 800aa10:	4818      	ldr	r0, [pc, #96]	@ (800aa74 <_Balloc+0x7c>)
 800aa12:	216b      	movs	r1, #107	@ 0x6b
 800aa14:	f000 fdae 	bl	800b574 <__assert_func>
 800aa18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa1c:	6006      	str	r6, [r0, #0]
 800aa1e:	60c6      	str	r6, [r0, #12]
 800aa20:	69e6      	ldr	r6, [r4, #28]
 800aa22:	68f3      	ldr	r3, [r6, #12]
 800aa24:	b183      	cbz	r3, 800aa48 <_Balloc+0x50>
 800aa26:	69e3      	ldr	r3, [r4, #28]
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa2e:	b9b8      	cbnz	r0, 800aa60 <_Balloc+0x68>
 800aa30:	2101      	movs	r1, #1
 800aa32:	fa01 f605 	lsl.w	r6, r1, r5
 800aa36:	1d72      	adds	r2, r6, #5
 800aa38:	0092      	lsls	r2, r2, #2
 800aa3a:	4620      	mov	r0, r4
 800aa3c:	f000 fdb8 	bl	800b5b0 <_calloc_r>
 800aa40:	b160      	cbz	r0, 800aa5c <_Balloc+0x64>
 800aa42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa46:	e00e      	b.n	800aa66 <_Balloc+0x6e>
 800aa48:	2221      	movs	r2, #33	@ 0x21
 800aa4a:	2104      	movs	r1, #4
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	f000 fdaf 	bl	800b5b0 <_calloc_r>
 800aa52:	69e3      	ldr	r3, [r4, #28]
 800aa54:	60f0      	str	r0, [r6, #12]
 800aa56:	68db      	ldr	r3, [r3, #12]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d1e4      	bne.n	800aa26 <_Balloc+0x2e>
 800aa5c:	2000      	movs	r0, #0
 800aa5e:	bd70      	pop	{r4, r5, r6, pc}
 800aa60:	6802      	ldr	r2, [r0, #0]
 800aa62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa66:	2300      	movs	r3, #0
 800aa68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa6c:	e7f7      	b.n	800aa5e <_Balloc+0x66>
 800aa6e:	bf00      	nop
 800aa70:	0800bca9 	.word	0x0800bca9
 800aa74:	0800bd29 	.word	0x0800bd29

0800aa78 <_Bfree>:
 800aa78:	b570      	push	{r4, r5, r6, lr}
 800aa7a:	69c6      	ldr	r6, [r0, #28]
 800aa7c:	4605      	mov	r5, r0
 800aa7e:	460c      	mov	r4, r1
 800aa80:	b976      	cbnz	r6, 800aaa0 <_Bfree+0x28>
 800aa82:	2010      	movs	r0, #16
 800aa84:	f7ff ff02 	bl	800a88c <malloc>
 800aa88:	4602      	mov	r2, r0
 800aa8a:	61e8      	str	r0, [r5, #28]
 800aa8c:	b920      	cbnz	r0, 800aa98 <_Bfree+0x20>
 800aa8e:	4b09      	ldr	r3, [pc, #36]	@ (800aab4 <_Bfree+0x3c>)
 800aa90:	4809      	ldr	r0, [pc, #36]	@ (800aab8 <_Bfree+0x40>)
 800aa92:	218f      	movs	r1, #143	@ 0x8f
 800aa94:	f000 fd6e 	bl	800b574 <__assert_func>
 800aa98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa9c:	6006      	str	r6, [r0, #0]
 800aa9e:	60c6      	str	r6, [r0, #12]
 800aaa0:	b13c      	cbz	r4, 800aab2 <_Bfree+0x3a>
 800aaa2:	69eb      	ldr	r3, [r5, #28]
 800aaa4:	6862      	ldr	r2, [r4, #4]
 800aaa6:	68db      	ldr	r3, [r3, #12]
 800aaa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aaac:	6021      	str	r1, [r4, #0]
 800aaae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aab2:	bd70      	pop	{r4, r5, r6, pc}
 800aab4:	0800bca9 	.word	0x0800bca9
 800aab8:	0800bd29 	.word	0x0800bd29

0800aabc <__multadd>:
 800aabc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aac0:	690d      	ldr	r5, [r1, #16]
 800aac2:	4607      	mov	r7, r0
 800aac4:	460c      	mov	r4, r1
 800aac6:	461e      	mov	r6, r3
 800aac8:	f101 0c14 	add.w	ip, r1, #20
 800aacc:	2000      	movs	r0, #0
 800aace:	f8dc 3000 	ldr.w	r3, [ip]
 800aad2:	b299      	uxth	r1, r3
 800aad4:	fb02 6101 	mla	r1, r2, r1, r6
 800aad8:	0c1e      	lsrs	r6, r3, #16
 800aada:	0c0b      	lsrs	r3, r1, #16
 800aadc:	fb02 3306 	mla	r3, r2, r6, r3
 800aae0:	b289      	uxth	r1, r1
 800aae2:	3001      	adds	r0, #1
 800aae4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aae8:	4285      	cmp	r5, r0
 800aaea:	f84c 1b04 	str.w	r1, [ip], #4
 800aaee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aaf2:	dcec      	bgt.n	800aace <__multadd+0x12>
 800aaf4:	b30e      	cbz	r6, 800ab3a <__multadd+0x7e>
 800aaf6:	68a3      	ldr	r3, [r4, #8]
 800aaf8:	42ab      	cmp	r3, r5
 800aafa:	dc19      	bgt.n	800ab30 <__multadd+0x74>
 800aafc:	6861      	ldr	r1, [r4, #4]
 800aafe:	4638      	mov	r0, r7
 800ab00:	3101      	adds	r1, #1
 800ab02:	f7ff ff79 	bl	800a9f8 <_Balloc>
 800ab06:	4680      	mov	r8, r0
 800ab08:	b928      	cbnz	r0, 800ab16 <__multadd+0x5a>
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	4b0c      	ldr	r3, [pc, #48]	@ (800ab40 <__multadd+0x84>)
 800ab0e:	480d      	ldr	r0, [pc, #52]	@ (800ab44 <__multadd+0x88>)
 800ab10:	21ba      	movs	r1, #186	@ 0xba
 800ab12:	f000 fd2f 	bl	800b574 <__assert_func>
 800ab16:	6922      	ldr	r2, [r4, #16]
 800ab18:	3202      	adds	r2, #2
 800ab1a:	f104 010c 	add.w	r1, r4, #12
 800ab1e:	0092      	lsls	r2, r2, #2
 800ab20:	300c      	adds	r0, #12
 800ab22:	f000 fd19 	bl	800b558 <memcpy>
 800ab26:	4621      	mov	r1, r4
 800ab28:	4638      	mov	r0, r7
 800ab2a:	f7ff ffa5 	bl	800aa78 <_Bfree>
 800ab2e:	4644      	mov	r4, r8
 800ab30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab34:	3501      	adds	r5, #1
 800ab36:	615e      	str	r6, [r3, #20]
 800ab38:	6125      	str	r5, [r4, #16]
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab40:	0800bd18 	.word	0x0800bd18
 800ab44:	0800bd29 	.word	0x0800bd29

0800ab48 <__hi0bits>:
 800ab48:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	bf36      	itet	cc
 800ab50:	0403      	lslcc	r3, r0, #16
 800ab52:	2000      	movcs	r0, #0
 800ab54:	2010      	movcc	r0, #16
 800ab56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ab5a:	bf3c      	itt	cc
 800ab5c:	021b      	lslcc	r3, r3, #8
 800ab5e:	3008      	addcc	r0, #8
 800ab60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab64:	bf3c      	itt	cc
 800ab66:	011b      	lslcc	r3, r3, #4
 800ab68:	3004      	addcc	r0, #4
 800ab6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab6e:	bf3c      	itt	cc
 800ab70:	009b      	lslcc	r3, r3, #2
 800ab72:	3002      	addcc	r0, #2
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	db05      	blt.n	800ab84 <__hi0bits+0x3c>
 800ab78:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ab7c:	f100 0001 	add.w	r0, r0, #1
 800ab80:	bf08      	it	eq
 800ab82:	2020      	moveq	r0, #32
 800ab84:	4770      	bx	lr

0800ab86 <__lo0bits>:
 800ab86:	6803      	ldr	r3, [r0, #0]
 800ab88:	4602      	mov	r2, r0
 800ab8a:	f013 0007 	ands.w	r0, r3, #7
 800ab8e:	d00b      	beq.n	800aba8 <__lo0bits+0x22>
 800ab90:	07d9      	lsls	r1, r3, #31
 800ab92:	d421      	bmi.n	800abd8 <__lo0bits+0x52>
 800ab94:	0798      	lsls	r0, r3, #30
 800ab96:	bf49      	itett	mi
 800ab98:	085b      	lsrmi	r3, r3, #1
 800ab9a:	089b      	lsrpl	r3, r3, #2
 800ab9c:	2001      	movmi	r0, #1
 800ab9e:	6013      	strmi	r3, [r2, #0]
 800aba0:	bf5c      	itt	pl
 800aba2:	6013      	strpl	r3, [r2, #0]
 800aba4:	2002      	movpl	r0, #2
 800aba6:	4770      	bx	lr
 800aba8:	b299      	uxth	r1, r3
 800abaa:	b909      	cbnz	r1, 800abb0 <__lo0bits+0x2a>
 800abac:	0c1b      	lsrs	r3, r3, #16
 800abae:	2010      	movs	r0, #16
 800abb0:	b2d9      	uxtb	r1, r3
 800abb2:	b909      	cbnz	r1, 800abb8 <__lo0bits+0x32>
 800abb4:	3008      	adds	r0, #8
 800abb6:	0a1b      	lsrs	r3, r3, #8
 800abb8:	0719      	lsls	r1, r3, #28
 800abba:	bf04      	itt	eq
 800abbc:	091b      	lsreq	r3, r3, #4
 800abbe:	3004      	addeq	r0, #4
 800abc0:	0799      	lsls	r1, r3, #30
 800abc2:	bf04      	itt	eq
 800abc4:	089b      	lsreq	r3, r3, #2
 800abc6:	3002      	addeq	r0, #2
 800abc8:	07d9      	lsls	r1, r3, #31
 800abca:	d403      	bmi.n	800abd4 <__lo0bits+0x4e>
 800abcc:	085b      	lsrs	r3, r3, #1
 800abce:	f100 0001 	add.w	r0, r0, #1
 800abd2:	d003      	beq.n	800abdc <__lo0bits+0x56>
 800abd4:	6013      	str	r3, [r2, #0]
 800abd6:	4770      	bx	lr
 800abd8:	2000      	movs	r0, #0
 800abda:	4770      	bx	lr
 800abdc:	2020      	movs	r0, #32
 800abde:	4770      	bx	lr

0800abe0 <__i2b>:
 800abe0:	b510      	push	{r4, lr}
 800abe2:	460c      	mov	r4, r1
 800abe4:	2101      	movs	r1, #1
 800abe6:	f7ff ff07 	bl	800a9f8 <_Balloc>
 800abea:	4602      	mov	r2, r0
 800abec:	b928      	cbnz	r0, 800abfa <__i2b+0x1a>
 800abee:	4b05      	ldr	r3, [pc, #20]	@ (800ac04 <__i2b+0x24>)
 800abf0:	4805      	ldr	r0, [pc, #20]	@ (800ac08 <__i2b+0x28>)
 800abf2:	f240 1145 	movw	r1, #325	@ 0x145
 800abf6:	f000 fcbd 	bl	800b574 <__assert_func>
 800abfa:	2301      	movs	r3, #1
 800abfc:	6144      	str	r4, [r0, #20]
 800abfe:	6103      	str	r3, [r0, #16]
 800ac00:	bd10      	pop	{r4, pc}
 800ac02:	bf00      	nop
 800ac04:	0800bd18 	.word	0x0800bd18
 800ac08:	0800bd29 	.word	0x0800bd29

0800ac0c <__multiply>:
 800ac0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac10:	4614      	mov	r4, r2
 800ac12:	690a      	ldr	r2, [r1, #16]
 800ac14:	6923      	ldr	r3, [r4, #16]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	bfa8      	it	ge
 800ac1a:	4623      	movge	r3, r4
 800ac1c:	460f      	mov	r7, r1
 800ac1e:	bfa4      	itt	ge
 800ac20:	460c      	movge	r4, r1
 800ac22:	461f      	movge	r7, r3
 800ac24:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ac28:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ac2c:	68a3      	ldr	r3, [r4, #8]
 800ac2e:	6861      	ldr	r1, [r4, #4]
 800ac30:	eb0a 0609 	add.w	r6, sl, r9
 800ac34:	42b3      	cmp	r3, r6
 800ac36:	b085      	sub	sp, #20
 800ac38:	bfb8      	it	lt
 800ac3a:	3101      	addlt	r1, #1
 800ac3c:	f7ff fedc 	bl	800a9f8 <_Balloc>
 800ac40:	b930      	cbnz	r0, 800ac50 <__multiply+0x44>
 800ac42:	4602      	mov	r2, r0
 800ac44:	4b44      	ldr	r3, [pc, #272]	@ (800ad58 <__multiply+0x14c>)
 800ac46:	4845      	ldr	r0, [pc, #276]	@ (800ad5c <__multiply+0x150>)
 800ac48:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ac4c:	f000 fc92 	bl	800b574 <__assert_func>
 800ac50:	f100 0514 	add.w	r5, r0, #20
 800ac54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ac58:	462b      	mov	r3, r5
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	4543      	cmp	r3, r8
 800ac5e:	d321      	bcc.n	800aca4 <__multiply+0x98>
 800ac60:	f107 0114 	add.w	r1, r7, #20
 800ac64:	f104 0214 	add.w	r2, r4, #20
 800ac68:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ac6c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ac70:	9302      	str	r3, [sp, #8]
 800ac72:	1b13      	subs	r3, r2, r4
 800ac74:	3b15      	subs	r3, #21
 800ac76:	f023 0303 	bic.w	r3, r3, #3
 800ac7a:	3304      	adds	r3, #4
 800ac7c:	f104 0715 	add.w	r7, r4, #21
 800ac80:	42ba      	cmp	r2, r7
 800ac82:	bf38      	it	cc
 800ac84:	2304      	movcc	r3, #4
 800ac86:	9301      	str	r3, [sp, #4]
 800ac88:	9b02      	ldr	r3, [sp, #8]
 800ac8a:	9103      	str	r1, [sp, #12]
 800ac8c:	428b      	cmp	r3, r1
 800ac8e:	d80c      	bhi.n	800acaa <__multiply+0x9e>
 800ac90:	2e00      	cmp	r6, #0
 800ac92:	dd03      	ble.n	800ac9c <__multiply+0x90>
 800ac94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d05b      	beq.n	800ad54 <__multiply+0x148>
 800ac9c:	6106      	str	r6, [r0, #16]
 800ac9e:	b005      	add	sp, #20
 800aca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aca4:	f843 2b04 	str.w	r2, [r3], #4
 800aca8:	e7d8      	b.n	800ac5c <__multiply+0x50>
 800acaa:	f8b1 a000 	ldrh.w	sl, [r1]
 800acae:	f1ba 0f00 	cmp.w	sl, #0
 800acb2:	d024      	beq.n	800acfe <__multiply+0xf2>
 800acb4:	f104 0e14 	add.w	lr, r4, #20
 800acb8:	46a9      	mov	r9, r5
 800acba:	f04f 0c00 	mov.w	ip, #0
 800acbe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800acc2:	f8d9 3000 	ldr.w	r3, [r9]
 800acc6:	fa1f fb87 	uxth.w	fp, r7
 800acca:	b29b      	uxth	r3, r3
 800accc:	fb0a 330b 	mla	r3, sl, fp, r3
 800acd0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800acd4:	f8d9 7000 	ldr.w	r7, [r9]
 800acd8:	4463      	add	r3, ip
 800acda:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800acde:	fb0a c70b 	mla	r7, sl, fp, ip
 800ace2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800acec:	4572      	cmp	r2, lr
 800acee:	f849 3b04 	str.w	r3, [r9], #4
 800acf2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800acf6:	d8e2      	bhi.n	800acbe <__multiply+0xb2>
 800acf8:	9b01      	ldr	r3, [sp, #4]
 800acfa:	f845 c003 	str.w	ip, [r5, r3]
 800acfe:	9b03      	ldr	r3, [sp, #12]
 800ad00:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ad04:	3104      	adds	r1, #4
 800ad06:	f1b9 0f00 	cmp.w	r9, #0
 800ad0a:	d021      	beq.n	800ad50 <__multiply+0x144>
 800ad0c:	682b      	ldr	r3, [r5, #0]
 800ad0e:	f104 0c14 	add.w	ip, r4, #20
 800ad12:	46ae      	mov	lr, r5
 800ad14:	f04f 0a00 	mov.w	sl, #0
 800ad18:	f8bc b000 	ldrh.w	fp, [ip]
 800ad1c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ad20:	fb09 770b 	mla	r7, r9, fp, r7
 800ad24:	4457      	add	r7, sl
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ad2c:	f84e 3b04 	str.w	r3, [lr], #4
 800ad30:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ad34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad38:	f8be 3000 	ldrh.w	r3, [lr]
 800ad3c:	fb09 330a 	mla	r3, r9, sl, r3
 800ad40:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ad44:	4562      	cmp	r2, ip
 800ad46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad4a:	d8e5      	bhi.n	800ad18 <__multiply+0x10c>
 800ad4c:	9f01      	ldr	r7, [sp, #4]
 800ad4e:	51eb      	str	r3, [r5, r7]
 800ad50:	3504      	adds	r5, #4
 800ad52:	e799      	b.n	800ac88 <__multiply+0x7c>
 800ad54:	3e01      	subs	r6, #1
 800ad56:	e79b      	b.n	800ac90 <__multiply+0x84>
 800ad58:	0800bd18 	.word	0x0800bd18
 800ad5c:	0800bd29 	.word	0x0800bd29

0800ad60 <__pow5mult>:
 800ad60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad64:	4615      	mov	r5, r2
 800ad66:	f012 0203 	ands.w	r2, r2, #3
 800ad6a:	4607      	mov	r7, r0
 800ad6c:	460e      	mov	r6, r1
 800ad6e:	d007      	beq.n	800ad80 <__pow5mult+0x20>
 800ad70:	4c25      	ldr	r4, [pc, #148]	@ (800ae08 <__pow5mult+0xa8>)
 800ad72:	3a01      	subs	r2, #1
 800ad74:	2300      	movs	r3, #0
 800ad76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad7a:	f7ff fe9f 	bl	800aabc <__multadd>
 800ad7e:	4606      	mov	r6, r0
 800ad80:	10ad      	asrs	r5, r5, #2
 800ad82:	d03d      	beq.n	800ae00 <__pow5mult+0xa0>
 800ad84:	69fc      	ldr	r4, [r7, #28]
 800ad86:	b97c      	cbnz	r4, 800ada8 <__pow5mult+0x48>
 800ad88:	2010      	movs	r0, #16
 800ad8a:	f7ff fd7f 	bl	800a88c <malloc>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	61f8      	str	r0, [r7, #28]
 800ad92:	b928      	cbnz	r0, 800ada0 <__pow5mult+0x40>
 800ad94:	4b1d      	ldr	r3, [pc, #116]	@ (800ae0c <__pow5mult+0xac>)
 800ad96:	481e      	ldr	r0, [pc, #120]	@ (800ae10 <__pow5mult+0xb0>)
 800ad98:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ad9c:	f000 fbea 	bl	800b574 <__assert_func>
 800ada0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ada4:	6004      	str	r4, [r0, #0]
 800ada6:	60c4      	str	r4, [r0, #12]
 800ada8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800adac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800adb0:	b94c      	cbnz	r4, 800adc6 <__pow5mult+0x66>
 800adb2:	f240 2171 	movw	r1, #625	@ 0x271
 800adb6:	4638      	mov	r0, r7
 800adb8:	f7ff ff12 	bl	800abe0 <__i2b>
 800adbc:	2300      	movs	r3, #0
 800adbe:	f8c8 0008 	str.w	r0, [r8, #8]
 800adc2:	4604      	mov	r4, r0
 800adc4:	6003      	str	r3, [r0, #0]
 800adc6:	f04f 0900 	mov.w	r9, #0
 800adca:	07eb      	lsls	r3, r5, #31
 800adcc:	d50a      	bpl.n	800ade4 <__pow5mult+0x84>
 800adce:	4631      	mov	r1, r6
 800add0:	4622      	mov	r2, r4
 800add2:	4638      	mov	r0, r7
 800add4:	f7ff ff1a 	bl	800ac0c <__multiply>
 800add8:	4631      	mov	r1, r6
 800adda:	4680      	mov	r8, r0
 800addc:	4638      	mov	r0, r7
 800adde:	f7ff fe4b 	bl	800aa78 <_Bfree>
 800ade2:	4646      	mov	r6, r8
 800ade4:	106d      	asrs	r5, r5, #1
 800ade6:	d00b      	beq.n	800ae00 <__pow5mult+0xa0>
 800ade8:	6820      	ldr	r0, [r4, #0]
 800adea:	b938      	cbnz	r0, 800adfc <__pow5mult+0x9c>
 800adec:	4622      	mov	r2, r4
 800adee:	4621      	mov	r1, r4
 800adf0:	4638      	mov	r0, r7
 800adf2:	f7ff ff0b 	bl	800ac0c <__multiply>
 800adf6:	6020      	str	r0, [r4, #0]
 800adf8:	f8c0 9000 	str.w	r9, [r0]
 800adfc:	4604      	mov	r4, r0
 800adfe:	e7e4      	b.n	800adca <__pow5mult+0x6a>
 800ae00:	4630      	mov	r0, r6
 800ae02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae06:	bf00      	nop
 800ae08:	0800bd84 	.word	0x0800bd84
 800ae0c:	0800bca9 	.word	0x0800bca9
 800ae10:	0800bd29 	.word	0x0800bd29

0800ae14 <__lshift>:
 800ae14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae18:	460c      	mov	r4, r1
 800ae1a:	6849      	ldr	r1, [r1, #4]
 800ae1c:	6923      	ldr	r3, [r4, #16]
 800ae1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae22:	68a3      	ldr	r3, [r4, #8]
 800ae24:	4607      	mov	r7, r0
 800ae26:	4691      	mov	r9, r2
 800ae28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae2c:	f108 0601 	add.w	r6, r8, #1
 800ae30:	42b3      	cmp	r3, r6
 800ae32:	db0b      	blt.n	800ae4c <__lshift+0x38>
 800ae34:	4638      	mov	r0, r7
 800ae36:	f7ff fddf 	bl	800a9f8 <_Balloc>
 800ae3a:	4605      	mov	r5, r0
 800ae3c:	b948      	cbnz	r0, 800ae52 <__lshift+0x3e>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	4b28      	ldr	r3, [pc, #160]	@ (800aee4 <__lshift+0xd0>)
 800ae42:	4829      	ldr	r0, [pc, #164]	@ (800aee8 <__lshift+0xd4>)
 800ae44:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ae48:	f000 fb94 	bl	800b574 <__assert_func>
 800ae4c:	3101      	adds	r1, #1
 800ae4e:	005b      	lsls	r3, r3, #1
 800ae50:	e7ee      	b.n	800ae30 <__lshift+0x1c>
 800ae52:	2300      	movs	r3, #0
 800ae54:	f100 0114 	add.w	r1, r0, #20
 800ae58:	f100 0210 	add.w	r2, r0, #16
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	4553      	cmp	r3, sl
 800ae60:	db33      	blt.n	800aeca <__lshift+0xb6>
 800ae62:	6920      	ldr	r0, [r4, #16]
 800ae64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae68:	f104 0314 	add.w	r3, r4, #20
 800ae6c:	f019 091f 	ands.w	r9, r9, #31
 800ae70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ae78:	d02b      	beq.n	800aed2 <__lshift+0xbe>
 800ae7a:	f1c9 0e20 	rsb	lr, r9, #32
 800ae7e:	468a      	mov	sl, r1
 800ae80:	2200      	movs	r2, #0
 800ae82:	6818      	ldr	r0, [r3, #0]
 800ae84:	fa00 f009 	lsl.w	r0, r0, r9
 800ae88:	4310      	orrs	r0, r2
 800ae8a:	f84a 0b04 	str.w	r0, [sl], #4
 800ae8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae92:	459c      	cmp	ip, r3
 800ae94:	fa22 f20e 	lsr.w	r2, r2, lr
 800ae98:	d8f3      	bhi.n	800ae82 <__lshift+0x6e>
 800ae9a:	ebac 0304 	sub.w	r3, ip, r4
 800ae9e:	3b15      	subs	r3, #21
 800aea0:	f023 0303 	bic.w	r3, r3, #3
 800aea4:	3304      	adds	r3, #4
 800aea6:	f104 0015 	add.w	r0, r4, #21
 800aeaa:	4584      	cmp	ip, r0
 800aeac:	bf38      	it	cc
 800aeae:	2304      	movcc	r3, #4
 800aeb0:	50ca      	str	r2, [r1, r3]
 800aeb2:	b10a      	cbz	r2, 800aeb8 <__lshift+0xa4>
 800aeb4:	f108 0602 	add.w	r6, r8, #2
 800aeb8:	3e01      	subs	r6, #1
 800aeba:	4638      	mov	r0, r7
 800aebc:	612e      	str	r6, [r5, #16]
 800aebe:	4621      	mov	r1, r4
 800aec0:	f7ff fdda 	bl	800aa78 <_Bfree>
 800aec4:	4628      	mov	r0, r5
 800aec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeca:	f842 0f04 	str.w	r0, [r2, #4]!
 800aece:	3301      	adds	r3, #1
 800aed0:	e7c5      	b.n	800ae5e <__lshift+0x4a>
 800aed2:	3904      	subs	r1, #4
 800aed4:	f853 2b04 	ldr.w	r2, [r3], #4
 800aed8:	f841 2f04 	str.w	r2, [r1, #4]!
 800aedc:	459c      	cmp	ip, r3
 800aede:	d8f9      	bhi.n	800aed4 <__lshift+0xc0>
 800aee0:	e7ea      	b.n	800aeb8 <__lshift+0xa4>
 800aee2:	bf00      	nop
 800aee4:	0800bd18 	.word	0x0800bd18
 800aee8:	0800bd29 	.word	0x0800bd29

0800aeec <__mcmp>:
 800aeec:	690a      	ldr	r2, [r1, #16]
 800aeee:	4603      	mov	r3, r0
 800aef0:	6900      	ldr	r0, [r0, #16]
 800aef2:	1a80      	subs	r0, r0, r2
 800aef4:	b530      	push	{r4, r5, lr}
 800aef6:	d10e      	bne.n	800af16 <__mcmp+0x2a>
 800aef8:	3314      	adds	r3, #20
 800aefa:	3114      	adds	r1, #20
 800aefc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800af00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800af04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800af08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800af0c:	4295      	cmp	r5, r2
 800af0e:	d003      	beq.n	800af18 <__mcmp+0x2c>
 800af10:	d205      	bcs.n	800af1e <__mcmp+0x32>
 800af12:	f04f 30ff 	mov.w	r0, #4294967295
 800af16:	bd30      	pop	{r4, r5, pc}
 800af18:	42a3      	cmp	r3, r4
 800af1a:	d3f3      	bcc.n	800af04 <__mcmp+0x18>
 800af1c:	e7fb      	b.n	800af16 <__mcmp+0x2a>
 800af1e:	2001      	movs	r0, #1
 800af20:	e7f9      	b.n	800af16 <__mcmp+0x2a>
	...

0800af24 <__mdiff>:
 800af24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af28:	4689      	mov	r9, r1
 800af2a:	4606      	mov	r6, r0
 800af2c:	4611      	mov	r1, r2
 800af2e:	4648      	mov	r0, r9
 800af30:	4614      	mov	r4, r2
 800af32:	f7ff ffdb 	bl	800aeec <__mcmp>
 800af36:	1e05      	subs	r5, r0, #0
 800af38:	d112      	bne.n	800af60 <__mdiff+0x3c>
 800af3a:	4629      	mov	r1, r5
 800af3c:	4630      	mov	r0, r6
 800af3e:	f7ff fd5b 	bl	800a9f8 <_Balloc>
 800af42:	4602      	mov	r2, r0
 800af44:	b928      	cbnz	r0, 800af52 <__mdiff+0x2e>
 800af46:	4b3f      	ldr	r3, [pc, #252]	@ (800b044 <__mdiff+0x120>)
 800af48:	f240 2137 	movw	r1, #567	@ 0x237
 800af4c:	483e      	ldr	r0, [pc, #248]	@ (800b048 <__mdiff+0x124>)
 800af4e:	f000 fb11 	bl	800b574 <__assert_func>
 800af52:	2301      	movs	r3, #1
 800af54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800af58:	4610      	mov	r0, r2
 800af5a:	b003      	add	sp, #12
 800af5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af60:	bfbc      	itt	lt
 800af62:	464b      	movlt	r3, r9
 800af64:	46a1      	movlt	r9, r4
 800af66:	4630      	mov	r0, r6
 800af68:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800af6c:	bfba      	itte	lt
 800af6e:	461c      	movlt	r4, r3
 800af70:	2501      	movlt	r5, #1
 800af72:	2500      	movge	r5, #0
 800af74:	f7ff fd40 	bl	800a9f8 <_Balloc>
 800af78:	4602      	mov	r2, r0
 800af7a:	b918      	cbnz	r0, 800af84 <__mdiff+0x60>
 800af7c:	4b31      	ldr	r3, [pc, #196]	@ (800b044 <__mdiff+0x120>)
 800af7e:	f240 2145 	movw	r1, #581	@ 0x245
 800af82:	e7e3      	b.n	800af4c <__mdiff+0x28>
 800af84:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800af88:	6926      	ldr	r6, [r4, #16]
 800af8a:	60c5      	str	r5, [r0, #12]
 800af8c:	f109 0310 	add.w	r3, r9, #16
 800af90:	f109 0514 	add.w	r5, r9, #20
 800af94:	f104 0e14 	add.w	lr, r4, #20
 800af98:	f100 0b14 	add.w	fp, r0, #20
 800af9c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800afa0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800afa4:	9301      	str	r3, [sp, #4]
 800afa6:	46d9      	mov	r9, fp
 800afa8:	f04f 0c00 	mov.w	ip, #0
 800afac:	9b01      	ldr	r3, [sp, #4]
 800afae:	f85e 0b04 	ldr.w	r0, [lr], #4
 800afb2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800afb6:	9301      	str	r3, [sp, #4]
 800afb8:	fa1f f38a 	uxth.w	r3, sl
 800afbc:	4619      	mov	r1, r3
 800afbe:	b283      	uxth	r3, r0
 800afc0:	1acb      	subs	r3, r1, r3
 800afc2:	0c00      	lsrs	r0, r0, #16
 800afc4:	4463      	add	r3, ip
 800afc6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800afca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800afce:	b29b      	uxth	r3, r3
 800afd0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800afd4:	4576      	cmp	r6, lr
 800afd6:	f849 3b04 	str.w	r3, [r9], #4
 800afda:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800afde:	d8e5      	bhi.n	800afac <__mdiff+0x88>
 800afe0:	1b33      	subs	r3, r6, r4
 800afe2:	3b15      	subs	r3, #21
 800afe4:	f023 0303 	bic.w	r3, r3, #3
 800afe8:	3415      	adds	r4, #21
 800afea:	3304      	adds	r3, #4
 800afec:	42a6      	cmp	r6, r4
 800afee:	bf38      	it	cc
 800aff0:	2304      	movcc	r3, #4
 800aff2:	441d      	add	r5, r3
 800aff4:	445b      	add	r3, fp
 800aff6:	461e      	mov	r6, r3
 800aff8:	462c      	mov	r4, r5
 800affa:	4544      	cmp	r4, r8
 800affc:	d30e      	bcc.n	800b01c <__mdiff+0xf8>
 800affe:	f108 0103 	add.w	r1, r8, #3
 800b002:	1b49      	subs	r1, r1, r5
 800b004:	f021 0103 	bic.w	r1, r1, #3
 800b008:	3d03      	subs	r5, #3
 800b00a:	45a8      	cmp	r8, r5
 800b00c:	bf38      	it	cc
 800b00e:	2100      	movcc	r1, #0
 800b010:	440b      	add	r3, r1
 800b012:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b016:	b191      	cbz	r1, 800b03e <__mdiff+0x11a>
 800b018:	6117      	str	r7, [r2, #16]
 800b01a:	e79d      	b.n	800af58 <__mdiff+0x34>
 800b01c:	f854 1b04 	ldr.w	r1, [r4], #4
 800b020:	46e6      	mov	lr, ip
 800b022:	0c08      	lsrs	r0, r1, #16
 800b024:	fa1c fc81 	uxtah	ip, ip, r1
 800b028:	4471      	add	r1, lr
 800b02a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b02e:	b289      	uxth	r1, r1
 800b030:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b034:	f846 1b04 	str.w	r1, [r6], #4
 800b038:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b03c:	e7dd      	b.n	800affa <__mdiff+0xd6>
 800b03e:	3f01      	subs	r7, #1
 800b040:	e7e7      	b.n	800b012 <__mdiff+0xee>
 800b042:	bf00      	nop
 800b044:	0800bd18 	.word	0x0800bd18
 800b048:	0800bd29 	.word	0x0800bd29

0800b04c <__d2b>:
 800b04c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b050:	460f      	mov	r7, r1
 800b052:	2101      	movs	r1, #1
 800b054:	ec59 8b10 	vmov	r8, r9, d0
 800b058:	4616      	mov	r6, r2
 800b05a:	f7ff fccd 	bl	800a9f8 <_Balloc>
 800b05e:	4604      	mov	r4, r0
 800b060:	b930      	cbnz	r0, 800b070 <__d2b+0x24>
 800b062:	4602      	mov	r2, r0
 800b064:	4b23      	ldr	r3, [pc, #140]	@ (800b0f4 <__d2b+0xa8>)
 800b066:	4824      	ldr	r0, [pc, #144]	@ (800b0f8 <__d2b+0xac>)
 800b068:	f240 310f 	movw	r1, #783	@ 0x30f
 800b06c:	f000 fa82 	bl	800b574 <__assert_func>
 800b070:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b074:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b078:	b10d      	cbz	r5, 800b07e <__d2b+0x32>
 800b07a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b07e:	9301      	str	r3, [sp, #4]
 800b080:	f1b8 0300 	subs.w	r3, r8, #0
 800b084:	d023      	beq.n	800b0ce <__d2b+0x82>
 800b086:	4668      	mov	r0, sp
 800b088:	9300      	str	r3, [sp, #0]
 800b08a:	f7ff fd7c 	bl	800ab86 <__lo0bits>
 800b08e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b092:	b1d0      	cbz	r0, 800b0ca <__d2b+0x7e>
 800b094:	f1c0 0320 	rsb	r3, r0, #32
 800b098:	fa02 f303 	lsl.w	r3, r2, r3
 800b09c:	430b      	orrs	r3, r1
 800b09e:	40c2      	lsrs	r2, r0
 800b0a0:	6163      	str	r3, [r4, #20]
 800b0a2:	9201      	str	r2, [sp, #4]
 800b0a4:	9b01      	ldr	r3, [sp, #4]
 800b0a6:	61a3      	str	r3, [r4, #24]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	bf0c      	ite	eq
 800b0ac:	2201      	moveq	r2, #1
 800b0ae:	2202      	movne	r2, #2
 800b0b0:	6122      	str	r2, [r4, #16]
 800b0b2:	b1a5      	cbz	r5, 800b0de <__d2b+0x92>
 800b0b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b0b8:	4405      	add	r5, r0
 800b0ba:	603d      	str	r5, [r7, #0]
 800b0bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b0c0:	6030      	str	r0, [r6, #0]
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	b003      	add	sp, #12
 800b0c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0ca:	6161      	str	r1, [r4, #20]
 800b0cc:	e7ea      	b.n	800b0a4 <__d2b+0x58>
 800b0ce:	a801      	add	r0, sp, #4
 800b0d0:	f7ff fd59 	bl	800ab86 <__lo0bits>
 800b0d4:	9b01      	ldr	r3, [sp, #4]
 800b0d6:	6163      	str	r3, [r4, #20]
 800b0d8:	3020      	adds	r0, #32
 800b0da:	2201      	movs	r2, #1
 800b0dc:	e7e8      	b.n	800b0b0 <__d2b+0x64>
 800b0de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b0e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b0e6:	6038      	str	r0, [r7, #0]
 800b0e8:	6918      	ldr	r0, [r3, #16]
 800b0ea:	f7ff fd2d 	bl	800ab48 <__hi0bits>
 800b0ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b0f2:	e7e5      	b.n	800b0c0 <__d2b+0x74>
 800b0f4:	0800bd18 	.word	0x0800bd18
 800b0f8:	0800bd29 	.word	0x0800bd29

0800b0fc <__ssputs_r>:
 800b0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b100:	688e      	ldr	r6, [r1, #8]
 800b102:	461f      	mov	r7, r3
 800b104:	42be      	cmp	r6, r7
 800b106:	680b      	ldr	r3, [r1, #0]
 800b108:	4682      	mov	sl, r0
 800b10a:	460c      	mov	r4, r1
 800b10c:	4690      	mov	r8, r2
 800b10e:	d82d      	bhi.n	800b16c <__ssputs_r+0x70>
 800b110:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b114:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b118:	d026      	beq.n	800b168 <__ssputs_r+0x6c>
 800b11a:	6965      	ldr	r5, [r4, #20]
 800b11c:	6909      	ldr	r1, [r1, #16]
 800b11e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b122:	eba3 0901 	sub.w	r9, r3, r1
 800b126:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b12a:	1c7b      	adds	r3, r7, #1
 800b12c:	444b      	add	r3, r9
 800b12e:	106d      	asrs	r5, r5, #1
 800b130:	429d      	cmp	r5, r3
 800b132:	bf38      	it	cc
 800b134:	461d      	movcc	r5, r3
 800b136:	0553      	lsls	r3, r2, #21
 800b138:	d527      	bpl.n	800b18a <__ssputs_r+0x8e>
 800b13a:	4629      	mov	r1, r5
 800b13c:	f7ff fbd0 	bl	800a8e0 <_malloc_r>
 800b140:	4606      	mov	r6, r0
 800b142:	b360      	cbz	r0, 800b19e <__ssputs_r+0xa2>
 800b144:	6921      	ldr	r1, [r4, #16]
 800b146:	464a      	mov	r2, r9
 800b148:	f000 fa06 	bl	800b558 <memcpy>
 800b14c:	89a3      	ldrh	r3, [r4, #12]
 800b14e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b156:	81a3      	strh	r3, [r4, #12]
 800b158:	6126      	str	r6, [r4, #16]
 800b15a:	6165      	str	r5, [r4, #20]
 800b15c:	444e      	add	r6, r9
 800b15e:	eba5 0509 	sub.w	r5, r5, r9
 800b162:	6026      	str	r6, [r4, #0]
 800b164:	60a5      	str	r5, [r4, #8]
 800b166:	463e      	mov	r6, r7
 800b168:	42be      	cmp	r6, r7
 800b16a:	d900      	bls.n	800b16e <__ssputs_r+0x72>
 800b16c:	463e      	mov	r6, r7
 800b16e:	6820      	ldr	r0, [r4, #0]
 800b170:	4632      	mov	r2, r6
 800b172:	4641      	mov	r1, r8
 800b174:	f000 f9c6 	bl	800b504 <memmove>
 800b178:	68a3      	ldr	r3, [r4, #8]
 800b17a:	1b9b      	subs	r3, r3, r6
 800b17c:	60a3      	str	r3, [r4, #8]
 800b17e:	6823      	ldr	r3, [r4, #0]
 800b180:	4433      	add	r3, r6
 800b182:	6023      	str	r3, [r4, #0]
 800b184:	2000      	movs	r0, #0
 800b186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b18a:	462a      	mov	r2, r5
 800b18c:	f000 fa36 	bl	800b5fc <_realloc_r>
 800b190:	4606      	mov	r6, r0
 800b192:	2800      	cmp	r0, #0
 800b194:	d1e0      	bne.n	800b158 <__ssputs_r+0x5c>
 800b196:	6921      	ldr	r1, [r4, #16]
 800b198:	4650      	mov	r0, sl
 800b19a:	f7ff fb2d 	bl	800a7f8 <_free_r>
 800b19e:	230c      	movs	r3, #12
 800b1a0:	f8ca 3000 	str.w	r3, [sl]
 800b1a4:	89a3      	ldrh	r3, [r4, #12]
 800b1a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1aa:	81a3      	strh	r3, [r4, #12]
 800b1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b1b0:	e7e9      	b.n	800b186 <__ssputs_r+0x8a>
	...

0800b1b4 <_svfiprintf_r>:
 800b1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1b8:	4698      	mov	r8, r3
 800b1ba:	898b      	ldrh	r3, [r1, #12]
 800b1bc:	061b      	lsls	r3, r3, #24
 800b1be:	b09d      	sub	sp, #116	@ 0x74
 800b1c0:	4607      	mov	r7, r0
 800b1c2:	460d      	mov	r5, r1
 800b1c4:	4614      	mov	r4, r2
 800b1c6:	d510      	bpl.n	800b1ea <_svfiprintf_r+0x36>
 800b1c8:	690b      	ldr	r3, [r1, #16]
 800b1ca:	b973      	cbnz	r3, 800b1ea <_svfiprintf_r+0x36>
 800b1cc:	2140      	movs	r1, #64	@ 0x40
 800b1ce:	f7ff fb87 	bl	800a8e0 <_malloc_r>
 800b1d2:	6028      	str	r0, [r5, #0]
 800b1d4:	6128      	str	r0, [r5, #16]
 800b1d6:	b930      	cbnz	r0, 800b1e6 <_svfiprintf_r+0x32>
 800b1d8:	230c      	movs	r3, #12
 800b1da:	603b      	str	r3, [r7, #0]
 800b1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e0:	b01d      	add	sp, #116	@ 0x74
 800b1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1e6:	2340      	movs	r3, #64	@ 0x40
 800b1e8:	616b      	str	r3, [r5, #20]
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1ee:	2320      	movs	r3, #32
 800b1f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1f8:	2330      	movs	r3, #48	@ 0x30
 800b1fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b398 <_svfiprintf_r+0x1e4>
 800b1fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b202:	f04f 0901 	mov.w	r9, #1
 800b206:	4623      	mov	r3, r4
 800b208:	469a      	mov	sl, r3
 800b20a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b20e:	b10a      	cbz	r2, 800b214 <_svfiprintf_r+0x60>
 800b210:	2a25      	cmp	r2, #37	@ 0x25
 800b212:	d1f9      	bne.n	800b208 <_svfiprintf_r+0x54>
 800b214:	ebba 0b04 	subs.w	fp, sl, r4
 800b218:	d00b      	beq.n	800b232 <_svfiprintf_r+0x7e>
 800b21a:	465b      	mov	r3, fp
 800b21c:	4622      	mov	r2, r4
 800b21e:	4629      	mov	r1, r5
 800b220:	4638      	mov	r0, r7
 800b222:	f7ff ff6b 	bl	800b0fc <__ssputs_r>
 800b226:	3001      	adds	r0, #1
 800b228:	f000 80a7 	beq.w	800b37a <_svfiprintf_r+0x1c6>
 800b22c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b22e:	445a      	add	r2, fp
 800b230:	9209      	str	r2, [sp, #36]	@ 0x24
 800b232:	f89a 3000 	ldrb.w	r3, [sl]
 800b236:	2b00      	cmp	r3, #0
 800b238:	f000 809f 	beq.w	800b37a <_svfiprintf_r+0x1c6>
 800b23c:	2300      	movs	r3, #0
 800b23e:	f04f 32ff 	mov.w	r2, #4294967295
 800b242:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b246:	f10a 0a01 	add.w	sl, sl, #1
 800b24a:	9304      	str	r3, [sp, #16]
 800b24c:	9307      	str	r3, [sp, #28]
 800b24e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b252:	931a      	str	r3, [sp, #104]	@ 0x68
 800b254:	4654      	mov	r4, sl
 800b256:	2205      	movs	r2, #5
 800b258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b25c:	484e      	ldr	r0, [pc, #312]	@ (800b398 <_svfiprintf_r+0x1e4>)
 800b25e:	f7f4 ffbf 	bl	80001e0 <memchr>
 800b262:	9a04      	ldr	r2, [sp, #16]
 800b264:	b9d8      	cbnz	r0, 800b29e <_svfiprintf_r+0xea>
 800b266:	06d0      	lsls	r0, r2, #27
 800b268:	bf44      	itt	mi
 800b26a:	2320      	movmi	r3, #32
 800b26c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b270:	0711      	lsls	r1, r2, #28
 800b272:	bf44      	itt	mi
 800b274:	232b      	movmi	r3, #43	@ 0x2b
 800b276:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b27a:	f89a 3000 	ldrb.w	r3, [sl]
 800b27e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b280:	d015      	beq.n	800b2ae <_svfiprintf_r+0xfa>
 800b282:	9a07      	ldr	r2, [sp, #28]
 800b284:	4654      	mov	r4, sl
 800b286:	2000      	movs	r0, #0
 800b288:	f04f 0c0a 	mov.w	ip, #10
 800b28c:	4621      	mov	r1, r4
 800b28e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b292:	3b30      	subs	r3, #48	@ 0x30
 800b294:	2b09      	cmp	r3, #9
 800b296:	d94b      	bls.n	800b330 <_svfiprintf_r+0x17c>
 800b298:	b1b0      	cbz	r0, 800b2c8 <_svfiprintf_r+0x114>
 800b29a:	9207      	str	r2, [sp, #28]
 800b29c:	e014      	b.n	800b2c8 <_svfiprintf_r+0x114>
 800b29e:	eba0 0308 	sub.w	r3, r0, r8
 800b2a2:	fa09 f303 	lsl.w	r3, r9, r3
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	9304      	str	r3, [sp, #16]
 800b2aa:	46a2      	mov	sl, r4
 800b2ac:	e7d2      	b.n	800b254 <_svfiprintf_r+0xa0>
 800b2ae:	9b03      	ldr	r3, [sp, #12]
 800b2b0:	1d19      	adds	r1, r3, #4
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	9103      	str	r1, [sp, #12]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	bfbb      	ittet	lt
 800b2ba:	425b      	neglt	r3, r3
 800b2bc:	f042 0202 	orrlt.w	r2, r2, #2
 800b2c0:	9307      	strge	r3, [sp, #28]
 800b2c2:	9307      	strlt	r3, [sp, #28]
 800b2c4:	bfb8      	it	lt
 800b2c6:	9204      	strlt	r2, [sp, #16]
 800b2c8:	7823      	ldrb	r3, [r4, #0]
 800b2ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2cc:	d10a      	bne.n	800b2e4 <_svfiprintf_r+0x130>
 800b2ce:	7863      	ldrb	r3, [r4, #1]
 800b2d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2d2:	d132      	bne.n	800b33a <_svfiprintf_r+0x186>
 800b2d4:	9b03      	ldr	r3, [sp, #12]
 800b2d6:	1d1a      	adds	r2, r3, #4
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	9203      	str	r2, [sp, #12]
 800b2dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2e0:	3402      	adds	r4, #2
 800b2e2:	9305      	str	r3, [sp, #20]
 800b2e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b3a8 <_svfiprintf_r+0x1f4>
 800b2e8:	7821      	ldrb	r1, [r4, #0]
 800b2ea:	2203      	movs	r2, #3
 800b2ec:	4650      	mov	r0, sl
 800b2ee:	f7f4 ff77 	bl	80001e0 <memchr>
 800b2f2:	b138      	cbz	r0, 800b304 <_svfiprintf_r+0x150>
 800b2f4:	9b04      	ldr	r3, [sp, #16]
 800b2f6:	eba0 000a 	sub.w	r0, r0, sl
 800b2fa:	2240      	movs	r2, #64	@ 0x40
 800b2fc:	4082      	lsls	r2, r0
 800b2fe:	4313      	orrs	r3, r2
 800b300:	3401      	adds	r4, #1
 800b302:	9304      	str	r3, [sp, #16]
 800b304:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b308:	4824      	ldr	r0, [pc, #144]	@ (800b39c <_svfiprintf_r+0x1e8>)
 800b30a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b30e:	2206      	movs	r2, #6
 800b310:	f7f4 ff66 	bl	80001e0 <memchr>
 800b314:	2800      	cmp	r0, #0
 800b316:	d036      	beq.n	800b386 <_svfiprintf_r+0x1d2>
 800b318:	4b21      	ldr	r3, [pc, #132]	@ (800b3a0 <_svfiprintf_r+0x1ec>)
 800b31a:	bb1b      	cbnz	r3, 800b364 <_svfiprintf_r+0x1b0>
 800b31c:	9b03      	ldr	r3, [sp, #12]
 800b31e:	3307      	adds	r3, #7
 800b320:	f023 0307 	bic.w	r3, r3, #7
 800b324:	3308      	adds	r3, #8
 800b326:	9303      	str	r3, [sp, #12]
 800b328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b32a:	4433      	add	r3, r6
 800b32c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b32e:	e76a      	b.n	800b206 <_svfiprintf_r+0x52>
 800b330:	fb0c 3202 	mla	r2, ip, r2, r3
 800b334:	460c      	mov	r4, r1
 800b336:	2001      	movs	r0, #1
 800b338:	e7a8      	b.n	800b28c <_svfiprintf_r+0xd8>
 800b33a:	2300      	movs	r3, #0
 800b33c:	3401      	adds	r4, #1
 800b33e:	9305      	str	r3, [sp, #20]
 800b340:	4619      	mov	r1, r3
 800b342:	f04f 0c0a 	mov.w	ip, #10
 800b346:	4620      	mov	r0, r4
 800b348:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b34c:	3a30      	subs	r2, #48	@ 0x30
 800b34e:	2a09      	cmp	r2, #9
 800b350:	d903      	bls.n	800b35a <_svfiprintf_r+0x1a6>
 800b352:	2b00      	cmp	r3, #0
 800b354:	d0c6      	beq.n	800b2e4 <_svfiprintf_r+0x130>
 800b356:	9105      	str	r1, [sp, #20]
 800b358:	e7c4      	b.n	800b2e4 <_svfiprintf_r+0x130>
 800b35a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b35e:	4604      	mov	r4, r0
 800b360:	2301      	movs	r3, #1
 800b362:	e7f0      	b.n	800b346 <_svfiprintf_r+0x192>
 800b364:	ab03      	add	r3, sp, #12
 800b366:	9300      	str	r3, [sp, #0]
 800b368:	462a      	mov	r2, r5
 800b36a:	4b0e      	ldr	r3, [pc, #56]	@ (800b3a4 <_svfiprintf_r+0x1f0>)
 800b36c:	a904      	add	r1, sp, #16
 800b36e:	4638      	mov	r0, r7
 800b370:	f7fd fe98 	bl	80090a4 <_printf_float>
 800b374:	1c42      	adds	r2, r0, #1
 800b376:	4606      	mov	r6, r0
 800b378:	d1d6      	bne.n	800b328 <_svfiprintf_r+0x174>
 800b37a:	89ab      	ldrh	r3, [r5, #12]
 800b37c:	065b      	lsls	r3, r3, #25
 800b37e:	f53f af2d 	bmi.w	800b1dc <_svfiprintf_r+0x28>
 800b382:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b384:	e72c      	b.n	800b1e0 <_svfiprintf_r+0x2c>
 800b386:	ab03      	add	r3, sp, #12
 800b388:	9300      	str	r3, [sp, #0]
 800b38a:	462a      	mov	r2, r5
 800b38c:	4b05      	ldr	r3, [pc, #20]	@ (800b3a4 <_svfiprintf_r+0x1f0>)
 800b38e:	a904      	add	r1, sp, #16
 800b390:	4638      	mov	r0, r7
 800b392:	f7fe f91f 	bl	80095d4 <_printf_i>
 800b396:	e7ed      	b.n	800b374 <_svfiprintf_r+0x1c0>
 800b398:	0800be80 	.word	0x0800be80
 800b39c:	0800be8a 	.word	0x0800be8a
 800b3a0:	080090a5 	.word	0x080090a5
 800b3a4:	0800b0fd 	.word	0x0800b0fd
 800b3a8:	0800be86 	.word	0x0800be86

0800b3ac <__sflush_r>:
 800b3ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3b4:	0716      	lsls	r6, r2, #28
 800b3b6:	4605      	mov	r5, r0
 800b3b8:	460c      	mov	r4, r1
 800b3ba:	d454      	bmi.n	800b466 <__sflush_r+0xba>
 800b3bc:	684b      	ldr	r3, [r1, #4]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	dc02      	bgt.n	800b3c8 <__sflush_r+0x1c>
 800b3c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	dd48      	ble.n	800b45a <__sflush_r+0xae>
 800b3c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b3ca:	2e00      	cmp	r6, #0
 800b3cc:	d045      	beq.n	800b45a <__sflush_r+0xae>
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b3d4:	682f      	ldr	r7, [r5, #0]
 800b3d6:	6a21      	ldr	r1, [r4, #32]
 800b3d8:	602b      	str	r3, [r5, #0]
 800b3da:	d030      	beq.n	800b43e <__sflush_r+0x92>
 800b3dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b3de:	89a3      	ldrh	r3, [r4, #12]
 800b3e0:	0759      	lsls	r1, r3, #29
 800b3e2:	d505      	bpl.n	800b3f0 <__sflush_r+0x44>
 800b3e4:	6863      	ldr	r3, [r4, #4]
 800b3e6:	1ad2      	subs	r2, r2, r3
 800b3e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b3ea:	b10b      	cbz	r3, 800b3f0 <__sflush_r+0x44>
 800b3ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b3ee:	1ad2      	subs	r2, r2, r3
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b3f4:	6a21      	ldr	r1, [r4, #32]
 800b3f6:	4628      	mov	r0, r5
 800b3f8:	47b0      	blx	r6
 800b3fa:	1c43      	adds	r3, r0, #1
 800b3fc:	89a3      	ldrh	r3, [r4, #12]
 800b3fe:	d106      	bne.n	800b40e <__sflush_r+0x62>
 800b400:	6829      	ldr	r1, [r5, #0]
 800b402:	291d      	cmp	r1, #29
 800b404:	d82b      	bhi.n	800b45e <__sflush_r+0xb2>
 800b406:	4a2a      	ldr	r2, [pc, #168]	@ (800b4b0 <__sflush_r+0x104>)
 800b408:	410a      	asrs	r2, r1
 800b40a:	07d6      	lsls	r6, r2, #31
 800b40c:	d427      	bmi.n	800b45e <__sflush_r+0xb2>
 800b40e:	2200      	movs	r2, #0
 800b410:	6062      	str	r2, [r4, #4]
 800b412:	04d9      	lsls	r1, r3, #19
 800b414:	6922      	ldr	r2, [r4, #16]
 800b416:	6022      	str	r2, [r4, #0]
 800b418:	d504      	bpl.n	800b424 <__sflush_r+0x78>
 800b41a:	1c42      	adds	r2, r0, #1
 800b41c:	d101      	bne.n	800b422 <__sflush_r+0x76>
 800b41e:	682b      	ldr	r3, [r5, #0]
 800b420:	b903      	cbnz	r3, 800b424 <__sflush_r+0x78>
 800b422:	6560      	str	r0, [r4, #84]	@ 0x54
 800b424:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b426:	602f      	str	r7, [r5, #0]
 800b428:	b1b9      	cbz	r1, 800b45a <__sflush_r+0xae>
 800b42a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b42e:	4299      	cmp	r1, r3
 800b430:	d002      	beq.n	800b438 <__sflush_r+0x8c>
 800b432:	4628      	mov	r0, r5
 800b434:	f7ff f9e0 	bl	800a7f8 <_free_r>
 800b438:	2300      	movs	r3, #0
 800b43a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b43c:	e00d      	b.n	800b45a <__sflush_r+0xae>
 800b43e:	2301      	movs	r3, #1
 800b440:	4628      	mov	r0, r5
 800b442:	47b0      	blx	r6
 800b444:	4602      	mov	r2, r0
 800b446:	1c50      	adds	r0, r2, #1
 800b448:	d1c9      	bne.n	800b3de <__sflush_r+0x32>
 800b44a:	682b      	ldr	r3, [r5, #0]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d0c6      	beq.n	800b3de <__sflush_r+0x32>
 800b450:	2b1d      	cmp	r3, #29
 800b452:	d001      	beq.n	800b458 <__sflush_r+0xac>
 800b454:	2b16      	cmp	r3, #22
 800b456:	d11e      	bne.n	800b496 <__sflush_r+0xea>
 800b458:	602f      	str	r7, [r5, #0]
 800b45a:	2000      	movs	r0, #0
 800b45c:	e022      	b.n	800b4a4 <__sflush_r+0xf8>
 800b45e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b462:	b21b      	sxth	r3, r3
 800b464:	e01b      	b.n	800b49e <__sflush_r+0xf2>
 800b466:	690f      	ldr	r7, [r1, #16]
 800b468:	2f00      	cmp	r7, #0
 800b46a:	d0f6      	beq.n	800b45a <__sflush_r+0xae>
 800b46c:	0793      	lsls	r3, r2, #30
 800b46e:	680e      	ldr	r6, [r1, #0]
 800b470:	bf08      	it	eq
 800b472:	694b      	ldreq	r3, [r1, #20]
 800b474:	600f      	str	r7, [r1, #0]
 800b476:	bf18      	it	ne
 800b478:	2300      	movne	r3, #0
 800b47a:	eba6 0807 	sub.w	r8, r6, r7
 800b47e:	608b      	str	r3, [r1, #8]
 800b480:	f1b8 0f00 	cmp.w	r8, #0
 800b484:	dde9      	ble.n	800b45a <__sflush_r+0xae>
 800b486:	6a21      	ldr	r1, [r4, #32]
 800b488:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b48a:	4643      	mov	r3, r8
 800b48c:	463a      	mov	r2, r7
 800b48e:	4628      	mov	r0, r5
 800b490:	47b0      	blx	r6
 800b492:	2800      	cmp	r0, #0
 800b494:	dc08      	bgt.n	800b4a8 <__sflush_r+0xfc>
 800b496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b49a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b49e:	81a3      	strh	r3, [r4, #12]
 800b4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4a8:	4407      	add	r7, r0
 800b4aa:	eba8 0800 	sub.w	r8, r8, r0
 800b4ae:	e7e7      	b.n	800b480 <__sflush_r+0xd4>
 800b4b0:	dfbffffe 	.word	0xdfbffffe

0800b4b4 <_fflush_r>:
 800b4b4:	b538      	push	{r3, r4, r5, lr}
 800b4b6:	690b      	ldr	r3, [r1, #16]
 800b4b8:	4605      	mov	r5, r0
 800b4ba:	460c      	mov	r4, r1
 800b4bc:	b913      	cbnz	r3, 800b4c4 <_fflush_r+0x10>
 800b4be:	2500      	movs	r5, #0
 800b4c0:	4628      	mov	r0, r5
 800b4c2:	bd38      	pop	{r3, r4, r5, pc}
 800b4c4:	b118      	cbz	r0, 800b4ce <_fflush_r+0x1a>
 800b4c6:	6a03      	ldr	r3, [r0, #32]
 800b4c8:	b90b      	cbnz	r3, 800b4ce <_fflush_r+0x1a>
 800b4ca:	f7fe fa2f 	bl	800992c <__sinit>
 800b4ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d0f3      	beq.n	800b4be <_fflush_r+0xa>
 800b4d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b4d8:	07d0      	lsls	r0, r2, #31
 800b4da:	d404      	bmi.n	800b4e6 <_fflush_r+0x32>
 800b4dc:	0599      	lsls	r1, r3, #22
 800b4de:	d402      	bmi.n	800b4e6 <_fflush_r+0x32>
 800b4e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4e2:	f7fe fb3a 	bl	8009b5a <__retarget_lock_acquire_recursive>
 800b4e6:	4628      	mov	r0, r5
 800b4e8:	4621      	mov	r1, r4
 800b4ea:	f7ff ff5f 	bl	800b3ac <__sflush_r>
 800b4ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b4f0:	07da      	lsls	r2, r3, #31
 800b4f2:	4605      	mov	r5, r0
 800b4f4:	d4e4      	bmi.n	800b4c0 <_fflush_r+0xc>
 800b4f6:	89a3      	ldrh	r3, [r4, #12]
 800b4f8:	059b      	lsls	r3, r3, #22
 800b4fa:	d4e1      	bmi.n	800b4c0 <_fflush_r+0xc>
 800b4fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4fe:	f7fe fb2d 	bl	8009b5c <__retarget_lock_release_recursive>
 800b502:	e7dd      	b.n	800b4c0 <_fflush_r+0xc>

0800b504 <memmove>:
 800b504:	4288      	cmp	r0, r1
 800b506:	b510      	push	{r4, lr}
 800b508:	eb01 0402 	add.w	r4, r1, r2
 800b50c:	d902      	bls.n	800b514 <memmove+0x10>
 800b50e:	4284      	cmp	r4, r0
 800b510:	4623      	mov	r3, r4
 800b512:	d807      	bhi.n	800b524 <memmove+0x20>
 800b514:	1e43      	subs	r3, r0, #1
 800b516:	42a1      	cmp	r1, r4
 800b518:	d008      	beq.n	800b52c <memmove+0x28>
 800b51a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b51e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b522:	e7f8      	b.n	800b516 <memmove+0x12>
 800b524:	4402      	add	r2, r0
 800b526:	4601      	mov	r1, r0
 800b528:	428a      	cmp	r2, r1
 800b52a:	d100      	bne.n	800b52e <memmove+0x2a>
 800b52c:	bd10      	pop	{r4, pc}
 800b52e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b532:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b536:	e7f7      	b.n	800b528 <memmove+0x24>

0800b538 <_sbrk_r>:
 800b538:	b538      	push	{r3, r4, r5, lr}
 800b53a:	4d06      	ldr	r5, [pc, #24]	@ (800b554 <_sbrk_r+0x1c>)
 800b53c:	2300      	movs	r3, #0
 800b53e:	4604      	mov	r4, r0
 800b540:	4608      	mov	r0, r1
 800b542:	602b      	str	r3, [r5, #0]
 800b544:	f7f6 f9dc 	bl	8001900 <_sbrk>
 800b548:	1c43      	adds	r3, r0, #1
 800b54a:	d102      	bne.n	800b552 <_sbrk_r+0x1a>
 800b54c:	682b      	ldr	r3, [r5, #0]
 800b54e:	b103      	cbz	r3, 800b552 <_sbrk_r+0x1a>
 800b550:	6023      	str	r3, [r4, #0]
 800b552:	bd38      	pop	{r3, r4, r5, pc}
 800b554:	20002120 	.word	0x20002120

0800b558 <memcpy>:
 800b558:	440a      	add	r2, r1
 800b55a:	4291      	cmp	r1, r2
 800b55c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b560:	d100      	bne.n	800b564 <memcpy+0xc>
 800b562:	4770      	bx	lr
 800b564:	b510      	push	{r4, lr}
 800b566:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b56a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b56e:	4291      	cmp	r1, r2
 800b570:	d1f9      	bne.n	800b566 <memcpy+0xe>
 800b572:	bd10      	pop	{r4, pc}

0800b574 <__assert_func>:
 800b574:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b576:	4614      	mov	r4, r2
 800b578:	461a      	mov	r2, r3
 800b57a:	4b09      	ldr	r3, [pc, #36]	@ (800b5a0 <__assert_func+0x2c>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4605      	mov	r5, r0
 800b580:	68d8      	ldr	r0, [r3, #12]
 800b582:	b954      	cbnz	r4, 800b59a <__assert_func+0x26>
 800b584:	4b07      	ldr	r3, [pc, #28]	@ (800b5a4 <__assert_func+0x30>)
 800b586:	461c      	mov	r4, r3
 800b588:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b58c:	9100      	str	r1, [sp, #0]
 800b58e:	462b      	mov	r3, r5
 800b590:	4905      	ldr	r1, [pc, #20]	@ (800b5a8 <__assert_func+0x34>)
 800b592:	f000 f86f 	bl	800b674 <fiprintf>
 800b596:	f000 f87f 	bl	800b698 <abort>
 800b59a:	4b04      	ldr	r3, [pc, #16]	@ (800b5ac <__assert_func+0x38>)
 800b59c:	e7f4      	b.n	800b588 <__assert_func+0x14>
 800b59e:	bf00      	nop
 800b5a0:	20000108 	.word	0x20000108
 800b5a4:	0800bed6 	.word	0x0800bed6
 800b5a8:	0800bea8 	.word	0x0800bea8
 800b5ac:	0800be9b 	.word	0x0800be9b

0800b5b0 <_calloc_r>:
 800b5b0:	b570      	push	{r4, r5, r6, lr}
 800b5b2:	fba1 5402 	umull	r5, r4, r1, r2
 800b5b6:	b93c      	cbnz	r4, 800b5c8 <_calloc_r+0x18>
 800b5b8:	4629      	mov	r1, r5
 800b5ba:	f7ff f991 	bl	800a8e0 <_malloc_r>
 800b5be:	4606      	mov	r6, r0
 800b5c0:	b928      	cbnz	r0, 800b5ce <_calloc_r+0x1e>
 800b5c2:	2600      	movs	r6, #0
 800b5c4:	4630      	mov	r0, r6
 800b5c6:	bd70      	pop	{r4, r5, r6, pc}
 800b5c8:	220c      	movs	r2, #12
 800b5ca:	6002      	str	r2, [r0, #0]
 800b5cc:	e7f9      	b.n	800b5c2 <_calloc_r+0x12>
 800b5ce:	462a      	mov	r2, r5
 800b5d0:	4621      	mov	r1, r4
 800b5d2:	f7fe fa44 	bl	8009a5e <memset>
 800b5d6:	e7f5      	b.n	800b5c4 <_calloc_r+0x14>

0800b5d8 <__ascii_mbtowc>:
 800b5d8:	b082      	sub	sp, #8
 800b5da:	b901      	cbnz	r1, 800b5de <__ascii_mbtowc+0x6>
 800b5dc:	a901      	add	r1, sp, #4
 800b5de:	b142      	cbz	r2, 800b5f2 <__ascii_mbtowc+0x1a>
 800b5e0:	b14b      	cbz	r3, 800b5f6 <__ascii_mbtowc+0x1e>
 800b5e2:	7813      	ldrb	r3, [r2, #0]
 800b5e4:	600b      	str	r3, [r1, #0]
 800b5e6:	7812      	ldrb	r2, [r2, #0]
 800b5e8:	1e10      	subs	r0, r2, #0
 800b5ea:	bf18      	it	ne
 800b5ec:	2001      	movne	r0, #1
 800b5ee:	b002      	add	sp, #8
 800b5f0:	4770      	bx	lr
 800b5f2:	4610      	mov	r0, r2
 800b5f4:	e7fb      	b.n	800b5ee <__ascii_mbtowc+0x16>
 800b5f6:	f06f 0001 	mvn.w	r0, #1
 800b5fa:	e7f8      	b.n	800b5ee <__ascii_mbtowc+0x16>

0800b5fc <_realloc_r>:
 800b5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b600:	4680      	mov	r8, r0
 800b602:	4615      	mov	r5, r2
 800b604:	460c      	mov	r4, r1
 800b606:	b921      	cbnz	r1, 800b612 <_realloc_r+0x16>
 800b608:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b60c:	4611      	mov	r1, r2
 800b60e:	f7ff b967 	b.w	800a8e0 <_malloc_r>
 800b612:	b92a      	cbnz	r2, 800b620 <_realloc_r+0x24>
 800b614:	f7ff f8f0 	bl	800a7f8 <_free_r>
 800b618:	2400      	movs	r4, #0
 800b61a:	4620      	mov	r0, r4
 800b61c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b620:	f000 f841 	bl	800b6a6 <_malloc_usable_size_r>
 800b624:	4285      	cmp	r5, r0
 800b626:	4606      	mov	r6, r0
 800b628:	d802      	bhi.n	800b630 <_realloc_r+0x34>
 800b62a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b62e:	d8f4      	bhi.n	800b61a <_realloc_r+0x1e>
 800b630:	4629      	mov	r1, r5
 800b632:	4640      	mov	r0, r8
 800b634:	f7ff f954 	bl	800a8e0 <_malloc_r>
 800b638:	4607      	mov	r7, r0
 800b63a:	2800      	cmp	r0, #0
 800b63c:	d0ec      	beq.n	800b618 <_realloc_r+0x1c>
 800b63e:	42b5      	cmp	r5, r6
 800b640:	462a      	mov	r2, r5
 800b642:	4621      	mov	r1, r4
 800b644:	bf28      	it	cs
 800b646:	4632      	movcs	r2, r6
 800b648:	f7ff ff86 	bl	800b558 <memcpy>
 800b64c:	4621      	mov	r1, r4
 800b64e:	4640      	mov	r0, r8
 800b650:	f7ff f8d2 	bl	800a7f8 <_free_r>
 800b654:	463c      	mov	r4, r7
 800b656:	e7e0      	b.n	800b61a <_realloc_r+0x1e>

0800b658 <__ascii_wctomb>:
 800b658:	4603      	mov	r3, r0
 800b65a:	4608      	mov	r0, r1
 800b65c:	b141      	cbz	r1, 800b670 <__ascii_wctomb+0x18>
 800b65e:	2aff      	cmp	r2, #255	@ 0xff
 800b660:	d904      	bls.n	800b66c <__ascii_wctomb+0x14>
 800b662:	228a      	movs	r2, #138	@ 0x8a
 800b664:	601a      	str	r2, [r3, #0]
 800b666:	f04f 30ff 	mov.w	r0, #4294967295
 800b66a:	4770      	bx	lr
 800b66c:	700a      	strb	r2, [r1, #0]
 800b66e:	2001      	movs	r0, #1
 800b670:	4770      	bx	lr
	...

0800b674 <fiprintf>:
 800b674:	b40e      	push	{r1, r2, r3}
 800b676:	b503      	push	{r0, r1, lr}
 800b678:	4601      	mov	r1, r0
 800b67a:	ab03      	add	r3, sp, #12
 800b67c:	4805      	ldr	r0, [pc, #20]	@ (800b694 <fiprintf+0x20>)
 800b67e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b682:	6800      	ldr	r0, [r0, #0]
 800b684:	9301      	str	r3, [sp, #4]
 800b686:	f000 f83f 	bl	800b708 <_vfiprintf_r>
 800b68a:	b002      	add	sp, #8
 800b68c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b690:	b003      	add	sp, #12
 800b692:	4770      	bx	lr
 800b694:	20000108 	.word	0x20000108

0800b698 <abort>:
 800b698:	b508      	push	{r3, lr}
 800b69a:	2006      	movs	r0, #6
 800b69c:	f000 fa08 	bl	800bab0 <raise>
 800b6a0:	2001      	movs	r0, #1
 800b6a2:	f7f6 f8b5 	bl	8001810 <_exit>

0800b6a6 <_malloc_usable_size_r>:
 800b6a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6aa:	1f18      	subs	r0, r3, #4
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	bfbc      	itt	lt
 800b6b0:	580b      	ldrlt	r3, [r1, r0]
 800b6b2:	18c0      	addlt	r0, r0, r3
 800b6b4:	4770      	bx	lr

0800b6b6 <__sfputc_r>:
 800b6b6:	6893      	ldr	r3, [r2, #8]
 800b6b8:	3b01      	subs	r3, #1
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	b410      	push	{r4}
 800b6be:	6093      	str	r3, [r2, #8]
 800b6c0:	da08      	bge.n	800b6d4 <__sfputc_r+0x1e>
 800b6c2:	6994      	ldr	r4, [r2, #24]
 800b6c4:	42a3      	cmp	r3, r4
 800b6c6:	db01      	blt.n	800b6cc <__sfputc_r+0x16>
 800b6c8:	290a      	cmp	r1, #10
 800b6ca:	d103      	bne.n	800b6d4 <__sfputc_r+0x1e>
 800b6cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6d0:	f000 b932 	b.w	800b938 <__swbuf_r>
 800b6d4:	6813      	ldr	r3, [r2, #0]
 800b6d6:	1c58      	adds	r0, r3, #1
 800b6d8:	6010      	str	r0, [r2, #0]
 800b6da:	7019      	strb	r1, [r3, #0]
 800b6dc:	4608      	mov	r0, r1
 800b6de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6e2:	4770      	bx	lr

0800b6e4 <__sfputs_r>:
 800b6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6e6:	4606      	mov	r6, r0
 800b6e8:	460f      	mov	r7, r1
 800b6ea:	4614      	mov	r4, r2
 800b6ec:	18d5      	adds	r5, r2, r3
 800b6ee:	42ac      	cmp	r4, r5
 800b6f0:	d101      	bne.n	800b6f6 <__sfputs_r+0x12>
 800b6f2:	2000      	movs	r0, #0
 800b6f4:	e007      	b.n	800b706 <__sfputs_r+0x22>
 800b6f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6fa:	463a      	mov	r2, r7
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	f7ff ffda 	bl	800b6b6 <__sfputc_r>
 800b702:	1c43      	adds	r3, r0, #1
 800b704:	d1f3      	bne.n	800b6ee <__sfputs_r+0xa>
 800b706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b708 <_vfiprintf_r>:
 800b708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b70c:	460d      	mov	r5, r1
 800b70e:	b09d      	sub	sp, #116	@ 0x74
 800b710:	4614      	mov	r4, r2
 800b712:	4698      	mov	r8, r3
 800b714:	4606      	mov	r6, r0
 800b716:	b118      	cbz	r0, 800b720 <_vfiprintf_r+0x18>
 800b718:	6a03      	ldr	r3, [r0, #32]
 800b71a:	b90b      	cbnz	r3, 800b720 <_vfiprintf_r+0x18>
 800b71c:	f7fe f906 	bl	800992c <__sinit>
 800b720:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b722:	07d9      	lsls	r1, r3, #31
 800b724:	d405      	bmi.n	800b732 <_vfiprintf_r+0x2a>
 800b726:	89ab      	ldrh	r3, [r5, #12]
 800b728:	059a      	lsls	r2, r3, #22
 800b72a:	d402      	bmi.n	800b732 <_vfiprintf_r+0x2a>
 800b72c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b72e:	f7fe fa14 	bl	8009b5a <__retarget_lock_acquire_recursive>
 800b732:	89ab      	ldrh	r3, [r5, #12]
 800b734:	071b      	lsls	r3, r3, #28
 800b736:	d501      	bpl.n	800b73c <_vfiprintf_r+0x34>
 800b738:	692b      	ldr	r3, [r5, #16]
 800b73a:	b99b      	cbnz	r3, 800b764 <_vfiprintf_r+0x5c>
 800b73c:	4629      	mov	r1, r5
 800b73e:	4630      	mov	r0, r6
 800b740:	f000 f938 	bl	800b9b4 <__swsetup_r>
 800b744:	b170      	cbz	r0, 800b764 <_vfiprintf_r+0x5c>
 800b746:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b748:	07dc      	lsls	r4, r3, #31
 800b74a:	d504      	bpl.n	800b756 <_vfiprintf_r+0x4e>
 800b74c:	f04f 30ff 	mov.w	r0, #4294967295
 800b750:	b01d      	add	sp, #116	@ 0x74
 800b752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b756:	89ab      	ldrh	r3, [r5, #12]
 800b758:	0598      	lsls	r0, r3, #22
 800b75a:	d4f7      	bmi.n	800b74c <_vfiprintf_r+0x44>
 800b75c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b75e:	f7fe f9fd 	bl	8009b5c <__retarget_lock_release_recursive>
 800b762:	e7f3      	b.n	800b74c <_vfiprintf_r+0x44>
 800b764:	2300      	movs	r3, #0
 800b766:	9309      	str	r3, [sp, #36]	@ 0x24
 800b768:	2320      	movs	r3, #32
 800b76a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b76e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b772:	2330      	movs	r3, #48	@ 0x30
 800b774:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b924 <_vfiprintf_r+0x21c>
 800b778:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b77c:	f04f 0901 	mov.w	r9, #1
 800b780:	4623      	mov	r3, r4
 800b782:	469a      	mov	sl, r3
 800b784:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b788:	b10a      	cbz	r2, 800b78e <_vfiprintf_r+0x86>
 800b78a:	2a25      	cmp	r2, #37	@ 0x25
 800b78c:	d1f9      	bne.n	800b782 <_vfiprintf_r+0x7a>
 800b78e:	ebba 0b04 	subs.w	fp, sl, r4
 800b792:	d00b      	beq.n	800b7ac <_vfiprintf_r+0xa4>
 800b794:	465b      	mov	r3, fp
 800b796:	4622      	mov	r2, r4
 800b798:	4629      	mov	r1, r5
 800b79a:	4630      	mov	r0, r6
 800b79c:	f7ff ffa2 	bl	800b6e4 <__sfputs_r>
 800b7a0:	3001      	adds	r0, #1
 800b7a2:	f000 80a7 	beq.w	800b8f4 <_vfiprintf_r+0x1ec>
 800b7a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7a8:	445a      	add	r2, fp
 800b7aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7ac:	f89a 3000 	ldrb.w	r3, [sl]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	f000 809f 	beq.w	800b8f4 <_vfiprintf_r+0x1ec>
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b7bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7c0:	f10a 0a01 	add.w	sl, sl, #1
 800b7c4:	9304      	str	r3, [sp, #16]
 800b7c6:	9307      	str	r3, [sp, #28]
 800b7c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b7cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800b7ce:	4654      	mov	r4, sl
 800b7d0:	2205      	movs	r2, #5
 800b7d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7d6:	4853      	ldr	r0, [pc, #332]	@ (800b924 <_vfiprintf_r+0x21c>)
 800b7d8:	f7f4 fd02 	bl	80001e0 <memchr>
 800b7dc:	9a04      	ldr	r2, [sp, #16]
 800b7de:	b9d8      	cbnz	r0, 800b818 <_vfiprintf_r+0x110>
 800b7e0:	06d1      	lsls	r1, r2, #27
 800b7e2:	bf44      	itt	mi
 800b7e4:	2320      	movmi	r3, #32
 800b7e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7ea:	0713      	lsls	r3, r2, #28
 800b7ec:	bf44      	itt	mi
 800b7ee:	232b      	movmi	r3, #43	@ 0x2b
 800b7f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7f4:	f89a 3000 	ldrb.w	r3, [sl]
 800b7f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7fa:	d015      	beq.n	800b828 <_vfiprintf_r+0x120>
 800b7fc:	9a07      	ldr	r2, [sp, #28]
 800b7fe:	4654      	mov	r4, sl
 800b800:	2000      	movs	r0, #0
 800b802:	f04f 0c0a 	mov.w	ip, #10
 800b806:	4621      	mov	r1, r4
 800b808:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b80c:	3b30      	subs	r3, #48	@ 0x30
 800b80e:	2b09      	cmp	r3, #9
 800b810:	d94b      	bls.n	800b8aa <_vfiprintf_r+0x1a2>
 800b812:	b1b0      	cbz	r0, 800b842 <_vfiprintf_r+0x13a>
 800b814:	9207      	str	r2, [sp, #28]
 800b816:	e014      	b.n	800b842 <_vfiprintf_r+0x13a>
 800b818:	eba0 0308 	sub.w	r3, r0, r8
 800b81c:	fa09 f303 	lsl.w	r3, r9, r3
 800b820:	4313      	orrs	r3, r2
 800b822:	9304      	str	r3, [sp, #16]
 800b824:	46a2      	mov	sl, r4
 800b826:	e7d2      	b.n	800b7ce <_vfiprintf_r+0xc6>
 800b828:	9b03      	ldr	r3, [sp, #12]
 800b82a:	1d19      	adds	r1, r3, #4
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	9103      	str	r1, [sp, #12]
 800b830:	2b00      	cmp	r3, #0
 800b832:	bfbb      	ittet	lt
 800b834:	425b      	neglt	r3, r3
 800b836:	f042 0202 	orrlt.w	r2, r2, #2
 800b83a:	9307      	strge	r3, [sp, #28]
 800b83c:	9307      	strlt	r3, [sp, #28]
 800b83e:	bfb8      	it	lt
 800b840:	9204      	strlt	r2, [sp, #16]
 800b842:	7823      	ldrb	r3, [r4, #0]
 800b844:	2b2e      	cmp	r3, #46	@ 0x2e
 800b846:	d10a      	bne.n	800b85e <_vfiprintf_r+0x156>
 800b848:	7863      	ldrb	r3, [r4, #1]
 800b84a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b84c:	d132      	bne.n	800b8b4 <_vfiprintf_r+0x1ac>
 800b84e:	9b03      	ldr	r3, [sp, #12]
 800b850:	1d1a      	adds	r2, r3, #4
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	9203      	str	r2, [sp, #12]
 800b856:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b85a:	3402      	adds	r4, #2
 800b85c:	9305      	str	r3, [sp, #20]
 800b85e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b934 <_vfiprintf_r+0x22c>
 800b862:	7821      	ldrb	r1, [r4, #0]
 800b864:	2203      	movs	r2, #3
 800b866:	4650      	mov	r0, sl
 800b868:	f7f4 fcba 	bl	80001e0 <memchr>
 800b86c:	b138      	cbz	r0, 800b87e <_vfiprintf_r+0x176>
 800b86e:	9b04      	ldr	r3, [sp, #16]
 800b870:	eba0 000a 	sub.w	r0, r0, sl
 800b874:	2240      	movs	r2, #64	@ 0x40
 800b876:	4082      	lsls	r2, r0
 800b878:	4313      	orrs	r3, r2
 800b87a:	3401      	adds	r4, #1
 800b87c:	9304      	str	r3, [sp, #16]
 800b87e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b882:	4829      	ldr	r0, [pc, #164]	@ (800b928 <_vfiprintf_r+0x220>)
 800b884:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b888:	2206      	movs	r2, #6
 800b88a:	f7f4 fca9 	bl	80001e0 <memchr>
 800b88e:	2800      	cmp	r0, #0
 800b890:	d03f      	beq.n	800b912 <_vfiprintf_r+0x20a>
 800b892:	4b26      	ldr	r3, [pc, #152]	@ (800b92c <_vfiprintf_r+0x224>)
 800b894:	bb1b      	cbnz	r3, 800b8de <_vfiprintf_r+0x1d6>
 800b896:	9b03      	ldr	r3, [sp, #12]
 800b898:	3307      	adds	r3, #7
 800b89a:	f023 0307 	bic.w	r3, r3, #7
 800b89e:	3308      	adds	r3, #8
 800b8a0:	9303      	str	r3, [sp, #12]
 800b8a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8a4:	443b      	add	r3, r7
 800b8a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8a8:	e76a      	b.n	800b780 <_vfiprintf_r+0x78>
 800b8aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8ae:	460c      	mov	r4, r1
 800b8b0:	2001      	movs	r0, #1
 800b8b2:	e7a8      	b.n	800b806 <_vfiprintf_r+0xfe>
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	3401      	adds	r4, #1
 800b8b8:	9305      	str	r3, [sp, #20]
 800b8ba:	4619      	mov	r1, r3
 800b8bc:	f04f 0c0a 	mov.w	ip, #10
 800b8c0:	4620      	mov	r0, r4
 800b8c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8c6:	3a30      	subs	r2, #48	@ 0x30
 800b8c8:	2a09      	cmp	r2, #9
 800b8ca:	d903      	bls.n	800b8d4 <_vfiprintf_r+0x1cc>
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d0c6      	beq.n	800b85e <_vfiprintf_r+0x156>
 800b8d0:	9105      	str	r1, [sp, #20]
 800b8d2:	e7c4      	b.n	800b85e <_vfiprintf_r+0x156>
 800b8d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8d8:	4604      	mov	r4, r0
 800b8da:	2301      	movs	r3, #1
 800b8dc:	e7f0      	b.n	800b8c0 <_vfiprintf_r+0x1b8>
 800b8de:	ab03      	add	r3, sp, #12
 800b8e0:	9300      	str	r3, [sp, #0]
 800b8e2:	462a      	mov	r2, r5
 800b8e4:	4b12      	ldr	r3, [pc, #72]	@ (800b930 <_vfiprintf_r+0x228>)
 800b8e6:	a904      	add	r1, sp, #16
 800b8e8:	4630      	mov	r0, r6
 800b8ea:	f7fd fbdb 	bl	80090a4 <_printf_float>
 800b8ee:	4607      	mov	r7, r0
 800b8f0:	1c78      	adds	r0, r7, #1
 800b8f2:	d1d6      	bne.n	800b8a2 <_vfiprintf_r+0x19a>
 800b8f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8f6:	07d9      	lsls	r1, r3, #31
 800b8f8:	d405      	bmi.n	800b906 <_vfiprintf_r+0x1fe>
 800b8fa:	89ab      	ldrh	r3, [r5, #12]
 800b8fc:	059a      	lsls	r2, r3, #22
 800b8fe:	d402      	bmi.n	800b906 <_vfiprintf_r+0x1fe>
 800b900:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b902:	f7fe f92b 	bl	8009b5c <__retarget_lock_release_recursive>
 800b906:	89ab      	ldrh	r3, [r5, #12]
 800b908:	065b      	lsls	r3, r3, #25
 800b90a:	f53f af1f 	bmi.w	800b74c <_vfiprintf_r+0x44>
 800b90e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b910:	e71e      	b.n	800b750 <_vfiprintf_r+0x48>
 800b912:	ab03      	add	r3, sp, #12
 800b914:	9300      	str	r3, [sp, #0]
 800b916:	462a      	mov	r2, r5
 800b918:	4b05      	ldr	r3, [pc, #20]	@ (800b930 <_vfiprintf_r+0x228>)
 800b91a:	a904      	add	r1, sp, #16
 800b91c:	4630      	mov	r0, r6
 800b91e:	f7fd fe59 	bl	80095d4 <_printf_i>
 800b922:	e7e4      	b.n	800b8ee <_vfiprintf_r+0x1e6>
 800b924:	0800be80 	.word	0x0800be80
 800b928:	0800be8a 	.word	0x0800be8a
 800b92c:	080090a5 	.word	0x080090a5
 800b930:	0800b6e5 	.word	0x0800b6e5
 800b934:	0800be86 	.word	0x0800be86

0800b938 <__swbuf_r>:
 800b938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b93a:	460e      	mov	r6, r1
 800b93c:	4614      	mov	r4, r2
 800b93e:	4605      	mov	r5, r0
 800b940:	b118      	cbz	r0, 800b94a <__swbuf_r+0x12>
 800b942:	6a03      	ldr	r3, [r0, #32]
 800b944:	b90b      	cbnz	r3, 800b94a <__swbuf_r+0x12>
 800b946:	f7fd fff1 	bl	800992c <__sinit>
 800b94a:	69a3      	ldr	r3, [r4, #24]
 800b94c:	60a3      	str	r3, [r4, #8]
 800b94e:	89a3      	ldrh	r3, [r4, #12]
 800b950:	071a      	lsls	r2, r3, #28
 800b952:	d501      	bpl.n	800b958 <__swbuf_r+0x20>
 800b954:	6923      	ldr	r3, [r4, #16]
 800b956:	b943      	cbnz	r3, 800b96a <__swbuf_r+0x32>
 800b958:	4621      	mov	r1, r4
 800b95a:	4628      	mov	r0, r5
 800b95c:	f000 f82a 	bl	800b9b4 <__swsetup_r>
 800b960:	b118      	cbz	r0, 800b96a <__swbuf_r+0x32>
 800b962:	f04f 37ff 	mov.w	r7, #4294967295
 800b966:	4638      	mov	r0, r7
 800b968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b96a:	6823      	ldr	r3, [r4, #0]
 800b96c:	6922      	ldr	r2, [r4, #16]
 800b96e:	1a98      	subs	r0, r3, r2
 800b970:	6963      	ldr	r3, [r4, #20]
 800b972:	b2f6      	uxtb	r6, r6
 800b974:	4283      	cmp	r3, r0
 800b976:	4637      	mov	r7, r6
 800b978:	dc05      	bgt.n	800b986 <__swbuf_r+0x4e>
 800b97a:	4621      	mov	r1, r4
 800b97c:	4628      	mov	r0, r5
 800b97e:	f7ff fd99 	bl	800b4b4 <_fflush_r>
 800b982:	2800      	cmp	r0, #0
 800b984:	d1ed      	bne.n	800b962 <__swbuf_r+0x2a>
 800b986:	68a3      	ldr	r3, [r4, #8]
 800b988:	3b01      	subs	r3, #1
 800b98a:	60a3      	str	r3, [r4, #8]
 800b98c:	6823      	ldr	r3, [r4, #0]
 800b98e:	1c5a      	adds	r2, r3, #1
 800b990:	6022      	str	r2, [r4, #0]
 800b992:	701e      	strb	r6, [r3, #0]
 800b994:	6962      	ldr	r2, [r4, #20]
 800b996:	1c43      	adds	r3, r0, #1
 800b998:	429a      	cmp	r2, r3
 800b99a:	d004      	beq.n	800b9a6 <__swbuf_r+0x6e>
 800b99c:	89a3      	ldrh	r3, [r4, #12]
 800b99e:	07db      	lsls	r3, r3, #31
 800b9a0:	d5e1      	bpl.n	800b966 <__swbuf_r+0x2e>
 800b9a2:	2e0a      	cmp	r6, #10
 800b9a4:	d1df      	bne.n	800b966 <__swbuf_r+0x2e>
 800b9a6:	4621      	mov	r1, r4
 800b9a8:	4628      	mov	r0, r5
 800b9aa:	f7ff fd83 	bl	800b4b4 <_fflush_r>
 800b9ae:	2800      	cmp	r0, #0
 800b9b0:	d0d9      	beq.n	800b966 <__swbuf_r+0x2e>
 800b9b2:	e7d6      	b.n	800b962 <__swbuf_r+0x2a>

0800b9b4 <__swsetup_r>:
 800b9b4:	b538      	push	{r3, r4, r5, lr}
 800b9b6:	4b29      	ldr	r3, [pc, #164]	@ (800ba5c <__swsetup_r+0xa8>)
 800b9b8:	4605      	mov	r5, r0
 800b9ba:	6818      	ldr	r0, [r3, #0]
 800b9bc:	460c      	mov	r4, r1
 800b9be:	b118      	cbz	r0, 800b9c8 <__swsetup_r+0x14>
 800b9c0:	6a03      	ldr	r3, [r0, #32]
 800b9c2:	b90b      	cbnz	r3, 800b9c8 <__swsetup_r+0x14>
 800b9c4:	f7fd ffb2 	bl	800992c <__sinit>
 800b9c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9cc:	0719      	lsls	r1, r3, #28
 800b9ce:	d422      	bmi.n	800ba16 <__swsetup_r+0x62>
 800b9d0:	06da      	lsls	r2, r3, #27
 800b9d2:	d407      	bmi.n	800b9e4 <__swsetup_r+0x30>
 800b9d4:	2209      	movs	r2, #9
 800b9d6:	602a      	str	r2, [r5, #0]
 800b9d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9dc:	81a3      	strh	r3, [r4, #12]
 800b9de:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e2:	e033      	b.n	800ba4c <__swsetup_r+0x98>
 800b9e4:	0758      	lsls	r0, r3, #29
 800b9e6:	d512      	bpl.n	800ba0e <__swsetup_r+0x5a>
 800b9e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b9ea:	b141      	cbz	r1, 800b9fe <__swsetup_r+0x4a>
 800b9ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b9f0:	4299      	cmp	r1, r3
 800b9f2:	d002      	beq.n	800b9fa <__swsetup_r+0x46>
 800b9f4:	4628      	mov	r0, r5
 800b9f6:	f7fe feff 	bl	800a7f8 <_free_r>
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	6363      	str	r3, [r4, #52]	@ 0x34
 800b9fe:	89a3      	ldrh	r3, [r4, #12]
 800ba00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ba04:	81a3      	strh	r3, [r4, #12]
 800ba06:	2300      	movs	r3, #0
 800ba08:	6063      	str	r3, [r4, #4]
 800ba0a:	6923      	ldr	r3, [r4, #16]
 800ba0c:	6023      	str	r3, [r4, #0]
 800ba0e:	89a3      	ldrh	r3, [r4, #12]
 800ba10:	f043 0308 	orr.w	r3, r3, #8
 800ba14:	81a3      	strh	r3, [r4, #12]
 800ba16:	6923      	ldr	r3, [r4, #16]
 800ba18:	b94b      	cbnz	r3, 800ba2e <__swsetup_r+0x7a>
 800ba1a:	89a3      	ldrh	r3, [r4, #12]
 800ba1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ba20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba24:	d003      	beq.n	800ba2e <__swsetup_r+0x7a>
 800ba26:	4621      	mov	r1, r4
 800ba28:	4628      	mov	r0, r5
 800ba2a:	f000 f883 	bl	800bb34 <__smakebuf_r>
 800ba2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba32:	f013 0201 	ands.w	r2, r3, #1
 800ba36:	d00a      	beq.n	800ba4e <__swsetup_r+0x9a>
 800ba38:	2200      	movs	r2, #0
 800ba3a:	60a2      	str	r2, [r4, #8]
 800ba3c:	6962      	ldr	r2, [r4, #20]
 800ba3e:	4252      	negs	r2, r2
 800ba40:	61a2      	str	r2, [r4, #24]
 800ba42:	6922      	ldr	r2, [r4, #16]
 800ba44:	b942      	cbnz	r2, 800ba58 <__swsetup_r+0xa4>
 800ba46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ba4a:	d1c5      	bne.n	800b9d8 <__swsetup_r+0x24>
 800ba4c:	bd38      	pop	{r3, r4, r5, pc}
 800ba4e:	0799      	lsls	r1, r3, #30
 800ba50:	bf58      	it	pl
 800ba52:	6962      	ldrpl	r2, [r4, #20]
 800ba54:	60a2      	str	r2, [r4, #8]
 800ba56:	e7f4      	b.n	800ba42 <__swsetup_r+0x8e>
 800ba58:	2000      	movs	r0, #0
 800ba5a:	e7f7      	b.n	800ba4c <__swsetup_r+0x98>
 800ba5c:	20000108 	.word	0x20000108

0800ba60 <_raise_r>:
 800ba60:	291f      	cmp	r1, #31
 800ba62:	b538      	push	{r3, r4, r5, lr}
 800ba64:	4605      	mov	r5, r0
 800ba66:	460c      	mov	r4, r1
 800ba68:	d904      	bls.n	800ba74 <_raise_r+0x14>
 800ba6a:	2316      	movs	r3, #22
 800ba6c:	6003      	str	r3, [r0, #0]
 800ba6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba72:	bd38      	pop	{r3, r4, r5, pc}
 800ba74:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ba76:	b112      	cbz	r2, 800ba7e <_raise_r+0x1e>
 800ba78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba7c:	b94b      	cbnz	r3, 800ba92 <_raise_r+0x32>
 800ba7e:	4628      	mov	r0, r5
 800ba80:	f000 f830 	bl	800bae4 <_getpid_r>
 800ba84:	4622      	mov	r2, r4
 800ba86:	4601      	mov	r1, r0
 800ba88:	4628      	mov	r0, r5
 800ba8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba8e:	f000 b817 	b.w	800bac0 <_kill_r>
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d00a      	beq.n	800baac <_raise_r+0x4c>
 800ba96:	1c59      	adds	r1, r3, #1
 800ba98:	d103      	bne.n	800baa2 <_raise_r+0x42>
 800ba9a:	2316      	movs	r3, #22
 800ba9c:	6003      	str	r3, [r0, #0]
 800ba9e:	2001      	movs	r0, #1
 800baa0:	e7e7      	b.n	800ba72 <_raise_r+0x12>
 800baa2:	2100      	movs	r1, #0
 800baa4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800baa8:	4620      	mov	r0, r4
 800baaa:	4798      	blx	r3
 800baac:	2000      	movs	r0, #0
 800baae:	e7e0      	b.n	800ba72 <_raise_r+0x12>

0800bab0 <raise>:
 800bab0:	4b02      	ldr	r3, [pc, #8]	@ (800babc <raise+0xc>)
 800bab2:	4601      	mov	r1, r0
 800bab4:	6818      	ldr	r0, [r3, #0]
 800bab6:	f7ff bfd3 	b.w	800ba60 <_raise_r>
 800baba:	bf00      	nop
 800babc:	20000108 	.word	0x20000108

0800bac0 <_kill_r>:
 800bac0:	b538      	push	{r3, r4, r5, lr}
 800bac2:	4d07      	ldr	r5, [pc, #28]	@ (800bae0 <_kill_r+0x20>)
 800bac4:	2300      	movs	r3, #0
 800bac6:	4604      	mov	r4, r0
 800bac8:	4608      	mov	r0, r1
 800baca:	4611      	mov	r1, r2
 800bacc:	602b      	str	r3, [r5, #0]
 800bace:	f7f5 fe8f 	bl	80017f0 <_kill>
 800bad2:	1c43      	adds	r3, r0, #1
 800bad4:	d102      	bne.n	800badc <_kill_r+0x1c>
 800bad6:	682b      	ldr	r3, [r5, #0]
 800bad8:	b103      	cbz	r3, 800badc <_kill_r+0x1c>
 800bada:	6023      	str	r3, [r4, #0]
 800badc:	bd38      	pop	{r3, r4, r5, pc}
 800bade:	bf00      	nop
 800bae0:	20002120 	.word	0x20002120

0800bae4 <_getpid_r>:
 800bae4:	f7f5 be7c 	b.w	80017e0 <_getpid>

0800bae8 <__swhatbuf_r>:
 800bae8:	b570      	push	{r4, r5, r6, lr}
 800baea:	460c      	mov	r4, r1
 800baec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baf0:	2900      	cmp	r1, #0
 800baf2:	b096      	sub	sp, #88	@ 0x58
 800baf4:	4615      	mov	r5, r2
 800baf6:	461e      	mov	r6, r3
 800baf8:	da0d      	bge.n	800bb16 <__swhatbuf_r+0x2e>
 800bafa:	89a3      	ldrh	r3, [r4, #12]
 800bafc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bb00:	f04f 0100 	mov.w	r1, #0
 800bb04:	bf14      	ite	ne
 800bb06:	2340      	movne	r3, #64	@ 0x40
 800bb08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bb0c:	2000      	movs	r0, #0
 800bb0e:	6031      	str	r1, [r6, #0]
 800bb10:	602b      	str	r3, [r5, #0]
 800bb12:	b016      	add	sp, #88	@ 0x58
 800bb14:	bd70      	pop	{r4, r5, r6, pc}
 800bb16:	466a      	mov	r2, sp
 800bb18:	f000 f848 	bl	800bbac <_fstat_r>
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	dbec      	blt.n	800bafa <__swhatbuf_r+0x12>
 800bb20:	9901      	ldr	r1, [sp, #4]
 800bb22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bb26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bb2a:	4259      	negs	r1, r3
 800bb2c:	4159      	adcs	r1, r3
 800bb2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb32:	e7eb      	b.n	800bb0c <__swhatbuf_r+0x24>

0800bb34 <__smakebuf_r>:
 800bb34:	898b      	ldrh	r3, [r1, #12]
 800bb36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb38:	079d      	lsls	r5, r3, #30
 800bb3a:	4606      	mov	r6, r0
 800bb3c:	460c      	mov	r4, r1
 800bb3e:	d507      	bpl.n	800bb50 <__smakebuf_r+0x1c>
 800bb40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bb44:	6023      	str	r3, [r4, #0]
 800bb46:	6123      	str	r3, [r4, #16]
 800bb48:	2301      	movs	r3, #1
 800bb4a:	6163      	str	r3, [r4, #20]
 800bb4c:	b003      	add	sp, #12
 800bb4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb50:	ab01      	add	r3, sp, #4
 800bb52:	466a      	mov	r2, sp
 800bb54:	f7ff ffc8 	bl	800bae8 <__swhatbuf_r>
 800bb58:	9f00      	ldr	r7, [sp, #0]
 800bb5a:	4605      	mov	r5, r0
 800bb5c:	4639      	mov	r1, r7
 800bb5e:	4630      	mov	r0, r6
 800bb60:	f7fe febe 	bl	800a8e0 <_malloc_r>
 800bb64:	b948      	cbnz	r0, 800bb7a <__smakebuf_r+0x46>
 800bb66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb6a:	059a      	lsls	r2, r3, #22
 800bb6c:	d4ee      	bmi.n	800bb4c <__smakebuf_r+0x18>
 800bb6e:	f023 0303 	bic.w	r3, r3, #3
 800bb72:	f043 0302 	orr.w	r3, r3, #2
 800bb76:	81a3      	strh	r3, [r4, #12]
 800bb78:	e7e2      	b.n	800bb40 <__smakebuf_r+0xc>
 800bb7a:	89a3      	ldrh	r3, [r4, #12]
 800bb7c:	6020      	str	r0, [r4, #0]
 800bb7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb82:	81a3      	strh	r3, [r4, #12]
 800bb84:	9b01      	ldr	r3, [sp, #4]
 800bb86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bb8a:	b15b      	cbz	r3, 800bba4 <__smakebuf_r+0x70>
 800bb8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb90:	4630      	mov	r0, r6
 800bb92:	f000 f81d 	bl	800bbd0 <_isatty_r>
 800bb96:	b128      	cbz	r0, 800bba4 <__smakebuf_r+0x70>
 800bb98:	89a3      	ldrh	r3, [r4, #12]
 800bb9a:	f023 0303 	bic.w	r3, r3, #3
 800bb9e:	f043 0301 	orr.w	r3, r3, #1
 800bba2:	81a3      	strh	r3, [r4, #12]
 800bba4:	89a3      	ldrh	r3, [r4, #12]
 800bba6:	431d      	orrs	r5, r3
 800bba8:	81a5      	strh	r5, [r4, #12]
 800bbaa:	e7cf      	b.n	800bb4c <__smakebuf_r+0x18>

0800bbac <_fstat_r>:
 800bbac:	b538      	push	{r3, r4, r5, lr}
 800bbae:	4d07      	ldr	r5, [pc, #28]	@ (800bbcc <_fstat_r+0x20>)
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	4604      	mov	r4, r0
 800bbb4:	4608      	mov	r0, r1
 800bbb6:	4611      	mov	r1, r2
 800bbb8:	602b      	str	r3, [r5, #0]
 800bbba:	f7f5 fe79 	bl	80018b0 <_fstat>
 800bbbe:	1c43      	adds	r3, r0, #1
 800bbc0:	d102      	bne.n	800bbc8 <_fstat_r+0x1c>
 800bbc2:	682b      	ldr	r3, [r5, #0]
 800bbc4:	b103      	cbz	r3, 800bbc8 <_fstat_r+0x1c>
 800bbc6:	6023      	str	r3, [r4, #0]
 800bbc8:	bd38      	pop	{r3, r4, r5, pc}
 800bbca:	bf00      	nop
 800bbcc:	20002120 	.word	0x20002120

0800bbd0 <_isatty_r>:
 800bbd0:	b538      	push	{r3, r4, r5, lr}
 800bbd2:	4d06      	ldr	r5, [pc, #24]	@ (800bbec <_isatty_r+0x1c>)
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	4604      	mov	r4, r0
 800bbd8:	4608      	mov	r0, r1
 800bbda:	602b      	str	r3, [r5, #0]
 800bbdc:	f7f5 fe78 	bl	80018d0 <_isatty>
 800bbe0:	1c43      	adds	r3, r0, #1
 800bbe2:	d102      	bne.n	800bbea <_isatty_r+0x1a>
 800bbe4:	682b      	ldr	r3, [r5, #0]
 800bbe6:	b103      	cbz	r3, 800bbea <_isatty_r+0x1a>
 800bbe8:	6023      	str	r3, [r4, #0]
 800bbea:	bd38      	pop	{r3, r4, r5, pc}
 800bbec:	20002120 	.word	0x20002120

0800bbf0 <_init>:
 800bbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbf2:	bf00      	nop
 800bbf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbf6:	bc08      	pop	{r3}
 800bbf8:	469e      	mov	lr, r3
 800bbfa:	4770      	bx	lr

0800bbfc <_fini>:
 800bbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbfe:	bf00      	nop
 800bc00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc02:	bc08      	pop	{r3}
 800bc04:	469e      	mov	lr, r3
 800bc06:	4770      	bx	lr
