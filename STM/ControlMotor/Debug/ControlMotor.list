
ControlMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba80  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  0800bc20  0800bc20  0000cc20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bff0  0800bff0  0000d2c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bff0  0800bff0  0000cff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bff8  0800bff8  0000d2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bff8  0800bff8  0000cff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bffc  0800bffc  0000cffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c4  20000000  0800c000  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e6c  200002c4  0800c2c4  0000d2c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002130  0800c2c4  0000e130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d2c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013515  00000000  00000000  0000d2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033e2  00000000  00000000  00020809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  00023bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d73  00000000  00000000  00024da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199f4  00000000  00000000  00025b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a59  00000000  00000000  0003f50f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091990  00000000  00000000  00054f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e68f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005adc  00000000  00000000  000e693c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000ec418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c4 	.word	0x200002c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bc08 	.word	0x0800bc08

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c8 	.word	0x200002c8
 80001dc:	0800bc08 	.word	0x0800bc08

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <HAL_TIM_IC_CaptureCallback>:
	    for (j=0; j < 4; j++) {
	        _avgSpeed[i] += speed[i][j] / 4;
	    }
	}
}
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	counter=__HAL_TIM_GetCounter(htim);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eb6:	4a10      	ldr	r2, [pc, #64]	@ (8000ef8 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000eb8:	6013      	str	r3, [r2, #0]
	count = (int16_t)counter; // To have + and - values (ccw and cw)
 8000eba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef8 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	b21a      	sxth	r2, r3
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8000efc <HAL_TIM_IC_CaptureCallback+0x54>)
 8000ec2:	801a      	strh	r2, [r3, #0]
	if (htim==&htim2)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a0e      	ldr	r2, [pc, #56]	@ (8000f00 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d105      	bne.n	8000ed8 <HAL_TIM_IC_CaptureCallback+0x30>
	{
		position[0] = count;
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8000efc <HAL_TIM_IC_CaptureCallback+0x54>)
 8000ece:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000ed4:	801a      	strh	r2, [r3, #0]
	{
		position[1] = count;
	}


}
 8000ed6:	e008      	b.n	8000eea <HAL_TIM_IC_CaptureCallback+0x42>
	else if(htim==&htim3)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a0b      	ldr	r2, [pc, #44]	@ (8000f08 <HAL_TIM_IC_CaptureCallback+0x60>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d104      	bne.n	8000eea <HAL_TIM_IC_CaptureCallback+0x42>
		position[1] = count;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <HAL_TIM_IC_CaptureCallback+0x54>)
 8000ee2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ee6:	4b07      	ldr	r3, [pc, #28]	@ (8000f04 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000ee8:	805a      	strh	r2, [r3, #2]
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	200003b8 	.word	0x200003b8
 8000efc:	200003bc 	.word	0x200003bc
 8000f00:	200002e0 	.word	0x200002e0
 8000f04:	200003c0 	.word	0x200003c0
 8000f08:	20000328 	.word	0x20000328

08000f0c <setTimers>:


void setTimers(int _velocityOutput[2])
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	//Important to set between 0 and ARR=3599
	//We asume that _velocityOutput[0] TIM24 is the left motor and
	//_velocityOutput[1] the right motor TIM13. If the value is positive
	//the motor drives forward
	if (velocityOutput[0]==0)
 8000f14:	4b2e      	ldr	r3, [pc, #184]	@ (8000fd0 <setTimers+0xc4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d108      	bne.n	8000f2e <setTimers+0x22>
	{
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8000f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd4 <setTimers+0xc8>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2200      	movs	r2, #0
 8000f22:	641a      	str	r2, [r3, #64]	@ 0x40
	    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8000f24:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd4 <setTimers+0xc8>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f2c:	e01e      	b.n	8000f6c <setTimers+0x60>

	}
	else
	{
		if (velocityOutput[0]>0) //Forward
 8000f2e:	4b28      	ldr	r3, [pc, #160]	@ (8000fd0 <setTimers+0xc4>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	dd0d      	ble.n	8000f52 <setTimers+0x46>
		{
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8000f36:	4b27      	ldr	r3, [pc, #156]	@ (8000fd4 <setTimers+0xc8>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	641a      	str	r2, [r3, #64]	@ 0x40
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, abs(velocityOutput[0]));
 8000f3e:	4b24      	ldr	r3, [pc, #144]	@ (8000fd0 <setTimers+0xc4>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000f46:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000f4a:	4b22      	ldr	r3, [pc, #136]	@ (8000fd4 <setTimers+0xc8>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f50:	e00c      	b.n	8000f6c <setTimers+0x60>
		}
		else //Backward
		{
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,abs(velocityOutput[0]));
 8000f52:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <setTimers+0xc4>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000f5a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd4 <setTimers+0xc8>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	641a      	str	r2, [r3, #64]	@ 0x40
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8000f64:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd4 <setTimers+0xc8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}

	if (velocityOutput[1]==0)
 8000f6c:	4b18      	ldr	r3, [pc, #96]	@ (8000fd0 <setTimers+0xc4>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d108      	bne.n	8000f86 <setTimers+0x7a>
		{
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8000f74:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <setTimers+0xc8>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	63da      	str	r2, [r3, #60]	@ 0x3c
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8000f7c:	4b15      	ldr	r3, [pc, #84]	@ (8000fd4 <setTimers+0xc8>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2200      	movs	r2, #0
 8000f82:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}



}
 8000f84:	e01e      	b.n	8000fc4 <setTimers+0xb8>
		if (velocityOutput[1]>0) //Forward
 8000f86:	4b12      	ldr	r3, [pc, #72]	@ (8000fd0 <setTimers+0xc4>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	dd0d      	ble.n	8000faa <setTimers+0x9e>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8000f8e:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <setTimers+0xc8>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2200      	movs	r2, #0
 8000f94:	63da      	str	r2, [r3, #60]	@ 0x3c
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, abs(velocityOutput[1]));
 8000f96:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd0 <setTimers+0xc4>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000f9e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <setTimers+0xc8>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000fa8:	e00c      	b.n	8000fc4 <setTimers+0xb8>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, abs(velocityOutput[1]));
 8000faa:	4b09      	ldr	r3, [pc, #36]	@ (8000fd0 <setTimers+0xc4>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000fb2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000fb6:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <setTimers+0xc8>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	63da      	str	r2, [r3, #60]	@ 0x3c
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8000fbc:	4b05      	ldr	r3, [pc, #20]	@ (8000fd4 <setTimers+0xc8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	200003e8 	.word	0x200003e8
 8000fd4:	20000370 	.word	0x20000370

08000fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08c      	sub	sp, #48	@ 0x30
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fde:	f000 fd0d 	bl	80019fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe2:	f000 f859 	bl	8001098 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe6:	f000 f9ff 	bl	80013e8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fea:	f000 f8bd 	bl	8001168 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fee:	f000 f90f 	bl	8001210 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ff2:	f000 f961 	bl	80012b8 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000ff6:	f007 fab1 	bl	800855c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000ffa:	213c      	movs	r1, #60	@ 0x3c
 8000ffc:	481e      	ldr	r0, [pc, #120]	@ (8001078 <main+0xa0>)
 8000ffe:	f003 f8e9 	bl	80041d4 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001002:	213c      	movs	r1, #60	@ 0x3c
 8001004:	481d      	ldr	r0, [pc, #116]	@ (800107c <main+0xa4>)
 8001006:	f003 f8e5 	bl	80041d4 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800100a:	2100      	movs	r1, #0
 800100c:	481c      	ldr	r0, [pc, #112]	@ (8001080 <main+0xa8>)
 800100e:	f002 ff8b 	bl	8003f28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001012:	2104      	movs	r1, #4
 8001014:	481a      	ldr	r0, [pc, #104]	@ (8001080 <main+0xa8>)
 8001016:	f002 ff87 	bl	8003f28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800101a:	2108      	movs	r1, #8
 800101c:	4818      	ldr	r0, [pc, #96]	@ (8001080 <main+0xa8>)
 800101e:	f002 ff83 	bl	8003f28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001022:	210c      	movs	r1, #12
 8001024:	4816      	ldr	r0, [pc, #88]	@ (8001080 <main+0xa8>)
 8001026:	f002 ff7f 	bl	8003f28 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //***************************//
	  velocityOutput[0]=0;
 800102a:	4b16      	ldr	r3, [pc, #88]	@ (8001084 <main+0xac>)
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
	  velocityOutput[1]=3400;
 8001030:	4b14      	ldr	r3, [pc, #80]	@ (8001084 <main+0xac>)
 8001032:	f640 5248 	movw	r2, #3400	@ 0xd48
 8001036:	605a      	str	r2, [r3, #4]
	//***************************//
	setTimers(velocityOutput);
 8001038:	4812      	ldr	r0, [pc, #72]	@ (8001084 <main+0xac>)
 800103a:	f7ff ff67 	bl	8000f0c <setTimers>

	if (velocidadActualizada)
 800103e:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <main+0xb0>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0f1      	beq.n	800102a <main+0x52>
//		if (actualSpeed[1][iteradorIndice] >= 0)
//			sprintf(msg_dch, "%s%s", "d+", valor_dch);
//		else
//			sprintf(msg_dch, "%s%s", "d", valor_dch);

		sprintf(msg, "d+%.3f\n", actualSpeed[0][iteradorIndice]);
 8001046:	4b11      	ldr	r3, [pc, #68]	@ (800108c <main+0xb4>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	4a11      	ldr	r2, [pc, #68]	@ (8001090 <main+0xb8>)
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fa80 	bl	8000558 <__aeabi_f2d>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4638      	mov	r0, r7
 800105e:	490d      	ldr	r1, [pc, #52]	@ (8001094 <main+0xbc>)
 8001060:	f008 fca6 	bl	80099b0 <siprintf>

		CDC_Transmit_FS(msg, sizeof(msg));
 8001064:	463b      	mov	r3, r7
 8001066:	2110      	movs	r1, #16
 8001068:	4618      	mov	r0, r3
 800106a:	f007 fb35 	bl	80086d8 <CDC_Transmit_FS>
		velocidadActualizada = 0;
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <main+0xb0>)
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
	  velocityOutput[0]=0;
 8001074:	e7d9      	b.n	800102a <main+0x52>
 8001076:	bf00      	nop
 8001078:	200002e0 	.word	0x200002e0
 800107c:	20000328 	.word	0x20000328
 8001080:	20000370 	.word	0x20000370
 8001084:	200003e8 	.word	0x200003e8
 8001088:	200003e5 	.word	0x200003e5
 800108c:	200003e4 	.word	0x200003e4
 8001090:	200003c4 	.word	0x200003c4
 8001094:	0800bc20 	.word	0x0800bc20

08001098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b094      	sub	sp, #80	@ 0x50
 800109c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109e:	f107 0320 	add.w	r3, r7, #32
 80010a2:	2230      	movs	r2, #48	@ 0x30
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f008 fce5 	bl	8009a76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	4b27      	ldr	r3, [pc, #156]	@ (8001160 <SystemClock_Config+0xc8>)
 80010c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c4:	4a26      	ldr	r2, [pc, #152]	@ (8001160 <SystemClock_Config+0xc8>)
 80010c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80010cc:	4b24      	ldr	r3, [pc, #144]	@ (8001160 <SystemClock_Config+0xc8>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d8:	2300      	movs	r3, #0
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	4b21      	ldr	r3, [pc, #132]	@ (8001164 <SystemClock_Config+0xcc>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a20      	ldr	r2, [pc, #128]	@ (8001164 <SystemClock_Config+0xcc>)
 80010e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001164 <SystemClock_Config+0xcc>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f4:	2301      	movs	r3, #1
 80010f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fe:	2302      	movs	r3, #2
 8001100:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001102:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001106:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001108:	2304      	movs	r3, #4
 800110a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800110c:	23c0      	movs	r3, #192	@ 0xc0
 800110e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001110:	2304      	movs	r3, #4
 8001112:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001114:	2308      	movs	r3, #8
 8001116:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001118:	f107 0320 	add.w	r3, r7, #32
 800111c:	4618      	mov	r0, r3
 800111e:	f002 f9eb 	bl	80034f8 <HAL_RCC_OscConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001128:	f000 f994 	bl	8001454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112c:	230f      	movs	r3, #15
 800112e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001130:	2302      	movs	r3, #2
 8001132:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001138:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800113c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001142:	f107 030c 	add.w	r3, r7, #12
 8001146:	2103      	movs	r1, #3
 8001148:	4618      	mov	r0, r3
 800114a:	f002 fc4d 	bl	80039e8 <HAL_RCC_ClockConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001154:	f000 f97e 	bl	8001454 <Error_Handler>
  }
}
 8001158:	bf00      	nop
 800115a:	3750      	adds	r7, #80	@ 0x50
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40023800 	.word	0x40023800
 8001164:	40007000 	.word	0x40007000

08001168 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08c      	sub	sp, #48	@ 0x30
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	2224      	movs	r2, #36	@ 0x24
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f008 fc7d 	bl	8009a76 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001184:	4b21      	ldr	r3, [pc, #132]	@ (800120c <MX_TIM2_Init+0xa4>)
 8001186:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800118a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800118c:	4b1f      	ldr	r3, [pc, #124]	@ (800120c <MX_TIM2_Init+0xa4>)
 800118e:	2200      	movs	r2, #0
 8001190:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001192:	4b1e      	ldr	r3, [pc, #120]	@ (800120c <MX_TIM2_Init+0xa4>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001198:	4b1c      	ldr	r3, [pc, #112]	@ (800120c <MX_TIM2_Init+0xa4>)
 800119a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800119e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a0:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <MX_TIM2_Init+0xa4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a6:	4b19      	ldr	r3, [pc, #100]	@ (800120c <MX_TIM2_Init+0xa4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011ac:	2303      	movs	r3, #3
 80011ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80011b0:	2302      	movs	r3, #2
 80011b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011b4:	2301      	movs	r3, #1
 80011b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80011c0:	2302      	movs	r3, #2
 80011c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011c4:	2301      	movs	r3, #1
 80011c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	4619      	mov	r1, r3
 80011d6:	480d      	ldr	r0, [pc, #52]	@ (800120c <MX_TIM2_Init+0xa4>)
 80011d8:	f002 ff56 	bl	8004088 <HAL_TIM_Encoder_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80011e2:	f000 f937 	bl	8001454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	4619      	mov	r1, r3
 80011f2:	4806      	ldr	r0, [pc, #24]	@ (800120c <MX_TIM2_Init+0xa4>)
 80011f4:	f003 fe16 	bl	8004e24 <HAL_TIMEx_MasterConfigSynchronization>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80011fe:	f000 f929 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	3730      	adds	r7, #48	@ 0x30
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200002e0 	.word	0x200002e0

08001210 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08c      	sub	sp, #48	@ 0x30
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001216:	f107 030c 	add.w	r3, r7, #12
 800121a:	2224      	movs	r2, #36	@ 0x24
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f008 fc29 	bl	8009a76 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800122c:	4b20      	ldr	r3, [pc, #128]	@ (80012b0 <MX_TIM3_Init+0xa0>)
 800122e:	4a21      	ldr	r2, [pc, #132]	@ (80012b4 <MX_TIM3_Init+0xa4>)
 8001230:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001232:	4b1f      	ldr	r3, [pc, #124]	@ (80012b0 <MX_TIM3_Init+0xa0>)
 8001234:	2200      	movs	r2, #0
 8001236:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001238:	4b1d      	ldr	r3, [pc, #116]	@ (80012b0 <MX_TIM3_Init+0xa0>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800123e:	4b1c      	ldr	r3, [pc, #112]	@ (80012b0 <MX_TIM3_Init+0xa0>)
 8001240:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001244:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001246:	4b1a      	ldr	r3, [pc, #104]	@ (80012b0 <MX_TIM3_Init+0xa0>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124c:	4b18      	ldr	r3, [pc, #96]	@ (80012b0 <MX_TIM3_Init+0xa0>)
 800124e:	2200      	movs	r2, #0
 8001250:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001252:	2303      	movs	r3, #3
 8001254:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001256:	2302      	movs	r3, #2
 8001258:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800125a:	2301      	movs	r3, #1
 800125c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001266:	2302      	movs	r3, #2
 8001268:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800126a:	2301      	movs	r3, #1
 800126c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	4619      	mov	r1, r3
 800127c:	480c      	ldr	r0, [pc, #48]	@ (80012b0 <MX_TIM3_Init+0xa0>)
 800127e:	f002 ff03 	bl	8004088 <HAL_TIM_Encoder_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001288:	f000 f8e4 	bl	8001454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128c:	2300      	movs	r3, #0
 800128e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	4619      	mov	r1, r3
 8001298:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <MX_TIM3_Init+0xa0>)
 800129a:	f003 fdc3 	bl	8004e24 <HAL_TIMEx_MasterConfigSynchronization>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80012a4:	f000 f8d6 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	3730      	adds	r7, #48	@ 0x30
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000328 	.word	0x20000328
 80012b4:	40000400 	.word	0x40000400

080012b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08e      	sub	sp, #56	@ 0x38
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012cc:	f107 0320 	add.w	r3, r7, #32
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
 80012e4:	615a      	str	r2, [r3, #20]
 80012e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012e8:	4b3d      	ldr	r3, [pc, #244]	@ (80013e0 <MX_TIM4_Init+0x128>)
 80012ea:	4a3e      	ldr	r2, [pc, #248]	@ (80013e4 <MX_TIM4_Init+0x12c>)
 80012ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80012ee:	4b3c      	ldr	r3, [pc, #240]	@ (80013e0 <MX_TIM4_Init+0x128>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f4:	4b3a      	ldr	r3, [pc, #232]	@ (80013e0 <MX_TIM4_Init+0x128>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3600-1;
 80012fa:	4b39      	ldr	r3, [pc, #228]	@ (80013e0 <MX_TIM4_Init+0x128>)
 80012fc:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8001300:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001302:	4b37      	ldr	r3, [pc, #220]	@ (80013e0 <MX_TIM4_Init+0x128>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001308:	4b35      	ldr	r3, [pc, #212]	@ (80013e0 <MX_TIM4_Init+0x128>)
 800130a:	2200      	movs	r2, #0
 800130c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800130e:	4834      	ldr	r0, [pc, #208]	@ (80013e0 <MX_TIM4_Init+0x128>)
 8001310:	f002 fd62 	bl	8003dd8 <HAL_TIM_Base_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800131a:	f000 f89b 	bl	8001454 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800131e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001322:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001324:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001328:	4619      	mov	r1, r3
 800132a:	482d      	ldr	r0, [pc, #180]	@ (80013e0 <MX_TIM4_Init+0x128>)
 800132c:	f003 f9b2 	bl	8004694 <HAL_TIM_ConfigClockSource>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001336:	f000 f88d 	bl	8001454 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800133a:	4829      	ldr	r0, [pc, #164]	@ (80013e0 <MX_TIM4_Init+0x128>)
 800133c:	f002 fd9b 	bl	8003e76 <HAL_TIM_PWM_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001346:	f000 f885 	bl	8001454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001352:	f107 0320 	add.w	r3, r7, #32
 8001356:	4619      	mov	r1, r3
 8001358:	4821      	ldr	r0, [pc, #132]	@ (80013e0 <MX_TIM4_Init+0x128>)
 800135a:	f003 fd63 	bl	8004e24 <HAL_TIMEx_MasterConfigSynchronization>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001364:	f000 f876 	bl	8001454 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001368:	2360      	movs	r3, #96	@ 0x60
 800136a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	2200      	movs	r2, #0
 800137c:	4619      	mov	r1, r3
 800137e:	4818      	ldr	r0, [pc, #96]	@ (80013e0 <MX_TIM4_Init+0x128>)
 8001380:	f003 f8c6 	bl	8004510 <HAL_TIM_PWM_ConfigChannel>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800138a:	f000 f863 	bl	8001454 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	2204      	movs	r2, #4
 8001392:	4619      	mov	r1, r3
 8001394:	4812      	ldr	r0, [pc, #72]	@ (80013e0 <MX_TIM4_Init+0x128>)
 8001396:	f003 f8bb 	bl	8004510 <HAL_TIM_PWM_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80013a0:	f000 f858 	bl	8001454 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2208      	movs	r2, #8
 80013a8:	4619      	mov	r1, r3
 80013aa:	480d      	ldr	r0, [pc, #52]	@ (80013e0 <MX_TIM4_Init+0x128>)
 80013ac:	f003 f8b0 	bl	8004510 <HAL_TIM_PWM_ConfigChannel>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80013b6:	f000 f84d 	bl	8001454 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	220c      	movs	r2, #12
 80013be:	4619      	mov	r1, r3
 80013c0:	4807      	ldr	r0, [pc, #28]	@ (80013e0 <MX_TIM4_Init+0x128>)
 80013c2:	f003 f8a5 	bl	8004510 <HAL_TIM_PWM_ConfigChannel>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 80013cc:	f000 f842 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013d0:	4803      	ldr	r0, [pc, #12]	@ (80013e0 <MX_TIM4_Init+0x128>)
 80013d2:	f000 f919 	bl	8001608 <HAL_TIM_MspPostInit>

}
 80013d6:	bf00      	nop
 80013d8:	3738      	adds	r7, #56	@ 0x38
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000370 	.word	0x20000370
 80013e4:	40000800 	.word	0x40000800

080013e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	4b17      	ldr	r3, [pc, #92]	@ (8001450 <MX_GPIO_Init+0x68>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	4a16      	ldr	r2, [pc, #88]	@ (8001450 <MX_GPIO_Init+0x68>)
 80013f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fe:	4b14      	ldr	r3, [pc, #80]	@ (8001450 <MX_GPIO_Init+0x68>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	4b10      	ldr	r3, [pc, #64]	@ (8001450 <MX_GPIO_Init+0x68>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	4a0f      	ldr	r2, [pc, #60]	@ (8001450 <MX_GPIO_Init+0x68>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	@ 0x30
 800141a:	4b0d      	ldr	r3, [pc, #52]	@ (8001450 <MX_GPIO_Init+0x68>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <MX_GPIO_Init+0x68>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	4a08      	ldr	r2, [pc, #32]	@ (8001450 <MX_GPIO_Init+0x68>)
 8001430:	f043 0308 	orr.w	r3, r3, #8
 8001434:	6313      	str	r3, [r2, #48]	@ 0x30
 8001436:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <MX_GPIO_Init+0x68>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001442:	bf00      	nop
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800

08001454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001458:	b672      	cpsid	i
}
 800145a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <Error_Handler+0x8>

08001460 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	4b10      	ldr	r3, [pc, #64]	@ (80014ac <HAL_MspInit+0x4c>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146e:	4a0f      	ldr	r2, [pc, #60]	@ (80014ac <HAL_MspInit+0x4c>)
 8001470:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001474:	6453      	str	r3, [r2, #68]	@ 0x44
 8001476:	4b0d      	ldr	r3, [pc, #52]	@ (80014ac <HAL_MspInit+0x4c>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	603b      	str	r3, [r7, #0]
 8001486:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <HAL_MspInit+0x4c>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	4a08      	ldr	r2, [pc, #32]	@ (80014ac <HAL_MspInit+0x4c>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001490:	6413      	str	r3, [r2, #64]	@ 0x40
 8001492:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <HAL_MspInit+0x4c>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800149e:	2007      	movs	r0, #7
 80014a0:	f000 fc12 	bl	8001cc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40023800 	.word	0x40023800

080014b0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08c      	sub	sp, #48	@ 0x30
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 031c 	add.w	r3, r7, #28
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014d0:	d134      	bne.n	800153c <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	61bb      	str	r3, [r7, #24]
 80014d6:	4b38      	ldr	r3, [pc, #224]	@ (80015b8 <HAL_TIM_Encoder_MspInit+0x108>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014da:	4a37      	ldr	r2, [pc, #220]	@ (80015b8 <HAL_TIM_Encoder_MspInit+0x108>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e2:	4b35      	ldr	r3, [pc, #212]	@ (80015b8 <HAL_TIM_Encoder_MspInit+0x108>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	61bb      	str	r3, [r7, #24]
 80014ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	4b31      	ldr	r3, [pc, #196]	@ (80015b8 <HAL_TIM_Encoder_MspInit+0x108>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	4a30      	ldr	r2, [pc, #192]	@ (80015b8 <HAL_TIM_Encoder_MspInit+0x108>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fe:	4b2e      	ldr	r3, [pc, #184]	@ (80015b8 <HAL_TIM_Encoder_MspInit+0x108>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800150a:	2303      	movs	r3, #3
 800150c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001512:	2301      	movs	r3, #1
 8001514:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800151a:	2301      	movs	r3, #1
 800151c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151e:	f107 031c 	add.w	r3, r7, #28
 8001522:	4619      	mov	r1, r3
 8001524:	4825      	ldr	r0, [pc, #148]	@ (80015bc <HAL_TIM_Encoder_MspInit+0x10c>)
 8001526:	f000 fc11 	bl	8001d4c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	201c      	movs	r0, #28
 8001530:	f000 fbd5 	bl	8001cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001534:	201c      	movs	r0, #28
 8001536:	f000 fbee 	bl	8001d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800153a:	e038      	b.n	80015ae <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM3)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a1f      	ldr	r2, [pc, #124]	@ (80015c0 <HAL_TIM_Encoder_MspInit+0x110>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d133      	bne.n	80015ae <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	4b1b      	ldr	r3, [pc, #108]	@ (80015b8 <HAL_TIM_Encoder_MspInit+0x108>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	4a1a      	ldr	r2, [pc, #104]	@ (80015b8 <HAL_TIM_Encoder_MspInit+0x108>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	6413      	str	r3, [r2, #64]	@ 0x40
 8001556:	4b18      	ldr	r3, [pc, #96]	@ (80015b8 <HAL_TIM_Encoder_MspInit+0x108>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <HAL_TIM_Encoder_MspInit+0x108>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	4a13      	ldr	r2, [pc, #76]	@ (80015b8 <HAL_TIM_Encoder_MspInit+0x108>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6313      	str	r3, [r2, #48]	@ 0x30
 8001572:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <HAL_TIM_Encoder_MspInit+0x108>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800157e:	23c0      	movs	r3, #192	@ 0xc0
 8001580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001586:	2301      	movs	r3, #1
 8001588:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2300      	movs	r3, #0
 800158c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800158e:	2302      	movs	r3, #2
 8001590:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001592:	f107 031c 	add.w	r3, r7, #28
 8001596:	4619      	mov	r1, r3
 8001598:	4808      	ldr	r0, [pc, #32]	@ (80015bc <HAL_TIM_Encoder_MspInit+0x10c>)
 800159a:	f000 fbd7 	bl	8001d4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2100      	movs	r1, #0
 80015a2:	201d      	movs	r0, #29
 80015a4:	f000 fb9b 	bl	8001cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015a8:	201d      	movs	r0, #29
 80015aa:	f000 fbb4 	bl	8001d16 <HAL_NVIC_EnableIRQ>
}
 80015ae:	bf00      	nop
 80015b0:	3730      	adds	r7, #48	@ 0x30
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020000 	.word	0x40020000
 80015c0:	40000400 	.word	0x40000400

080015c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001600 <HAL_TIM_Base_MspInit+0x3c>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d10d      	bne.n	80015f2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b0a      	ldr	r3, [pc, #40]	@ (8001604 <HAL_TIM_Base_MspInit+0x40>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015de:	4a09      	ldr	r2, [pc, #36]	@ (8001604 <HAL_TIM_Base_MspInit+0x40>)
 80015e0:	f043 0304 	orr.w	r3, r3, #4
 80015e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e6:	4b07      	ldr	r3, [pc, #28]	@ (8001604 <HAL_TIM_Base_MspInit+0x40>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ea:	f003 0304 	and.w	r3, r3, #4
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80015f2:	bf00      	nop
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40000800 	.word	0x40000800
 8001604:	40023800 	.word	0x40023800

08001608 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a12      	ldr	r2, [pc, #72]	@ (8001670 <HAL_TIM_MspPostInit+0x68>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d11e      	bne.n	8001668 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <HAL_TIM_MspPostInit+0x6c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	4a10      	ldr	r2, [pc, #64]	@ (8001674 <HAL_TIM_MspPostInit+0x6c>)
 8001634:	f043 0308 	orr.w	r3, r3, #8
 8001638:	6313      	str	r3, [r2, #48]	@ 0x30
 800163a:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <HAL_TIM_MspPostInit+0x6c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001646:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800164a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001658:	2302      	movs	r3, #2
 800165a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	4619      	mov	r1, r3
 8001662:	4805      	ldr	r0, [pc, #20]	@ (8001678 <HAL_TIM_MspPostInit+0x70>)
 8001664:	f000 fb72 	bl	8001d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001668:	bf00      	nop
 800166a:	3720      	adds	r7, #32
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40000800 	.word	0x40000800
 8001674:	40023800 	.word	0x40023800
 8001678:	40020c00 	.word	0x40020c00

0800167c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <NMI_Handler+0x4>

08001684 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <HardFault_Handler+0x4>

0800168c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <MemManage_Handler+0x4>

08001694 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <BusFault_Handler+0x4>

0800169c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <UsageFault_Handler+0x4>

080016a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	indx++;
 80016d4:	4b32      	ldr	r3, [pc, #200]	@ (80017a0 <SysTick_Handler+0xd0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	3301      	adds	r3, #1
 80016da:	4a31      	ldr	r2, [pc, #196]	@ (80017a0 <SysTick_Handler+0xd0>)
 80016dc:	6013      	str	r3, [r2, #0]

		if (indx == movingAvgDelay){
 80016de:	4b30      	ldr	r3, [pc, #192]	@ (80017a0 <SysTick_Handler+0xd0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b64      	cmp	r3, #100	@ 0x64
 80016e4:	d157      	bne.n	8001796 <SysTick_Handler+0xc6>
			actualSpeed[0][iteradorIndice] =(position[0] - oldpos[0]) *1000*60/ movingAvgDelay / clicksPerTurn;
 80016e6:	4b2f      	ldr	r3, [pc, #188]	@ (80017a4 <SysTick_Handler+0xd4>)
 80016e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b2e      	ldr	r3, [pc, #184]	@ (80017a8 <SysTick_Handler+0xd8>)
 80016f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80016fa:	fb02 f303 	mul.w	r3, r2, r3
 80016fe:	4a2b      	ldr	r2, [pc, #172]	@ (80017ac <SysTick_Handler+0xdc>)
 8001700:	fb82 1203 	smull	r1, r2, r2, r3
 8001704:	10d2      	asrs	r2, r2, #3
 8001706:	17db      	asrs	r3, r3, #31
 8001708:	1ad2      	subs	r2, r2, r3
 800170a:	4b29      	ldr	r3, [pc, #164]	@ (80017b0 <SysTick_Handler+0xe0>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	ee07 2a90 	vmov	s15, r2
 8001712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001716:	4a27      	ldr	r2, [pc, #156]	@ (80017b4 <SysTick_Handler+0xe4>)
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	edc3 7a00 	vstr	s15, [r3]
			actualSpeed[1][iteradorIndice]=(position[1] - oldpos[1]) *1000*60/ movingAvgDelay / clicksPerTurn;
 8001720:	4b20      	ldr	r3, [pc, #128]	@ (80017a4 <SysTick_Handler+0xd4>)
 8001722:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001726:	461a      	mov	r2, r3
 8001728:	4b1f      	ldr	r3, [pc, #124]	@ (80017a8 <SysTick_Handler+0xd8>)
 800172a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001734:	fb02 f303 	mul.w	r3, r2, r3
 8001738:	4a1c      	ldr	r2, [pc, #112]	@ (80017ac <SysTick_Handler+0xdc>)
 800173a:	fb82 1203 	smull	r1, r2, r2, r3
 800173e:	10d2      	asrs	r2, r2, #3
 8001740:	17db      	asrs	r3, r3, #31
 8001742:	1ad2      	subs	r2, r2, r3
 8001744:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <SysTick_Handler+0xe0>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	ee07 2a90 	vmov	s15, r2
 800174c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001750:	4a18      	ldr	r2, [pc, #96]	@ (80017b4 <SysTick_Handler+0xe4>)
 8001752:	3304      	adds	r3, #4
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	edc3 7a00 	vstr	s15, [r3]
			oldpos[0] = position[0];
 800175c:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <SysTick_Handler+0xd4>)
 800175e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001762:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <SysTick_Handler+0xd8>)
 8001764:	801a      	strh	r2, [r3, #0]
			oldpos[1] = position[1];
 8001766:	4b0f      	ldr	r3, [pc, #60]	@ (80017a4 <SysTick_Handler+0xd4>)
 8001768:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800176c:	4b0e      	ldr	r3, [pc, #56]	@ (80017a8 <SysTick_Handler+0xd8>)
 800176e:	805a      	strh	r2, [r3, #2]
			iteradorIndice=(iteradorIndice+1)%4;
 8001770:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <SysTick_Handler+0xe0>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	3301      	adds	r3, #1
 8001776:	425a      	negs	r2, r3
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	f002 0203 	and.w	r2, r2, #3
 8001780:	bf58      	it	pl
 8001782:	4253      	negpl	r3, r2
 8001784:	b2da      	uxtb	r2, r3
 8001786:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <SysTick_Handler+0xe0>)
 8001788:	701a      	strb	r2, [r3, #0]
			indx = 0;
 800178a:	4b05      	ldr	r3, [pc, #20]	@ (80017a0 <SysTick_Handler+0xd0>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
			velocidadActualizada = 1;
 8001790:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <SysTick_Handler+0xe8>)
 8001792:	2201      	movs	r2, #1
 8001794:	701a      	strb	r2, [r3, #0]
		}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001796:	f000 f983 	bl	8001aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200003f0 	.word	0x200003f0
 80017a4:	200003c0 	.word	0x200003c0
 80017a8:	200003f4 	.word	0x200003f4
 80017ac:	2aaaaaab 	.word	0x2aaaaaab
 80017b0:	200003e4 	.word	0x200003e4
 80017b4:	200003c4 	.word	0x200003c4
 80017b8:	200003e5 	.word	0x200003e5

080017bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017c0:	4802      	ldr	r0, [pc, #8]	@ (80017cc <TIM2_IRQHandler+0x10>)
 80017c2:	f002 fdb5 	bl	8004330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200002e0 	.word	0x200002e0

080017d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017d4:	4802      	ldr	r0, [pc, #8]	@ (80017e0 <TIM3_IRQHandler+0x10>)
 80017d6:	f002 fdab 	bl	8004330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000328 	.word	0x20000328

080017e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80017e8:	4802      	ldr	r0, [pc, #8]	@ (80017f4 <OTG_FS_IRQHandler+0x10>)
 80017ea:	f000 fd77 	bl	80022dc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200018e0 	.word	0x200018e0

080017f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return 1;
 80017fc:	2301      	movs	r3, #1
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <_kill>:

int _kill(int pid, int sig)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001812:	f008 f983 	bl	8009b1c <__errno>
 8001816:	4603      	mov	r3, r0
 8001818:	2216      	movs	r2, #22
 800181a:	601a      	str	r2, [r3, #0]
  return -1;
 800181c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <_exit>:

void _exit (int status)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001830:	f04f 31ff 	mov.w	r1, #4294967295
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ffe7 	bl	8001808 <_kill>
  while (1) {}    /* Make sure we hang here */
 800183a:	bf00      	nop
 800183c:	e7fd      	b.n	800183a <_exit+0x12>

0800183e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b086      	sub	sp, #24
 8001842:	af00      	add	r7, sp, #0
 8001844:	60f8      	str	r0, [r7, #12]
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	e00a      	b.n	8001866 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001850:	f3af 8000 	nop.w
 8001854:	4601      	mov	r1, r0
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	1c5a      	adds	r2, r3, #1
 800185a:	60ba      	str	r2, [r7, #8]
 800185c:	b2ca      	uxtb	r2, r1
 800185e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	3301      	adds	r3, #1
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	429a      	cmp	r2, r3
 800186c:	dbf0      	blt.n	8001850 <_read+0x12>
  }

  return len;
 800186e:	687b      	ldr	r3, [r7, #4]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	e009      	b.n	800189e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	60ba      	str	r2, [r7, #8]
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	3301      	adds	r3, #1
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	dbf1      	blt.n	800188a <_write+0x12>
  }
  return len;
 80018a6:	687b      	ldr	r3, [r7, #4]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <_close>:

int _close(int file)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018bc:	4618      	mov	r0, r3
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018d8:	605a      	str	r2, [r3, #4]
  return 0;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <_isatty>:

int _isatty(int file)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018f0:	2301      	movs	r3, #1
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018fe:	b480      	push	{r7}
 8001900:	b085      	sub	sp, #20
 8001902:	af00      	add	r7, sp, #0
 8001904:	60f8      	str	r0, [r7, #12]
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001920:	4a14      	ldr	r2, [pc, #80]	@ (8001974 <_sbrk+0x5c>)
 8001922:	4b15      	ldr	r3, [pc, #84]	@ (8001978 <_sbrk+0x60>)
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800192c:	4b13      	ldr	r3, [pc, #76]	@ (800197c <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d102      	bne.n	800193a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001934:	4b11      	ldr	r3, [pc, #68]	@ (800197c <_sbrk+0x64>)
 8001936:	4a12      	ldr	r2, [pc, #72]	@ (8001980 <_sbrk+0x68>)
 8001938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193a:	4b10      	ldr	r3, [pc, #64]	@ (800197c <_sbrk+0x64>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	429a      	cmp	r2, r3
 8001946:	d207      	bcs.n	8001958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001948:	f008 f8e8 	bl	8009b1c <__errno>
 800194c:	4603      	mov	r3, r0
 800194e:	220c      	movs	r2, #12
 8001950:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001952:	f04f 33ff 	mov.w	r3, #4294967295
 8001956:	e009      	b.n	800196c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001958:	4b08      	ldr	r3, [pc, #32]	@ (800197c <_sbrk+0x64>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800195e:	4b07      	ldr	r3, [pc, #28]	@ (800197c <_sbrk+0x64>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	4a05      	ldr	r2, [pc, #20]	@ (800197c <_sbrk+0x64>)
 8001968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800196a:	68fb      	ldr	r3, [r7, #12]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20020000 	.word	0x20020000
 8001978:	00000400 	.word	0x00000400
 800197c:	200003f8 	.word	0x200003f8
 8001980:	20002130 	.word	0x20002130

08001984 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001988:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <SystemInit+0x20>)
 800198a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800198e:	4a05      	ldr	r2, [pc, #20]	@ (80019a4 <SystemInit+0x20>)
 8001990:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001994:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019ac:	f7ff ffea 	bl	8001984 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019b0:	480c      	ldr	r0, [pc, #48]	@ (80019e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019b2:	490d      	ldr	r1, [pc, #52]	@ (80019e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019b4:	4a0d      	ldr	r2, [pc, #52]	@ (80019ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b8:	e002      	b.n	80019c0 <LoopCopyDataInit>

080019ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019be:	3304      	adds	r3, #4

080019c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c4:	d3f9      	bcc.n	80019ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c6:	4a0a      	ldr	r2, [pc, #40]	@ (80019f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019c8:	4c0a      	ldr	r4, [pc, #40]	@ (80019f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019cc:	e001      	b.n	80019d2 <LoopFillZerobss>

080019ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d0:	3204      	adds	r2, #4

080019d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d4:	d3fb      	bcc.n	80019ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019d6:	f008 f8a7 	bl	8009b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019da:	f7ff fafd 	bl	8000fd8 <main>
  bx  lr    
 80019de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e8:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 80019ec:	0800c000 	.word	0x0800c000
  ldr r2, =_sbss
 80019f0:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 80019f4:	20002130 	.word	0x20002130

080019f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019f8:	e7fe      	b.n	80019f8 <ADC_IRQHandler>
	...

080019fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a00:	4b0e      	ldr	r3, [pc, #56]	@ (8001a3c <HAL_Init+0x40>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a0d      	ldr	r2, [pc, #52]	@ (8001a3c <HAL_Init+0x40>)
 8001a06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a3c <HAL_Init+0x40>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a0a      	ldr	r2, [pc, #40]	@ (8001a3c <HAL_Init+0x40>)
 8001a12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a18:	4b08      	ldr	r3, [pc, #32]	@ (8001a3c <HAL_Init+0x40>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a07      	ldr	r2, [pc, #28]	@ (8001a3c <HAL_Init+0x40>)
 8001a1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a24:	2003      	movs	r0, #3
 8001a26:	f000 f94f 	bl	8001cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f000 f808 	bl	8001a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a30:	f7ff fd16 	bl	8001460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40023c00 	.word	0x40023c00

08001a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a48:	4b12      	ldr	r3, [pc, #72]	@ (8001a94 <HAL_InitTick+0x54>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4b12      	ldr	r3, [pc, #72]	@ (8001a98 <HAL_InitTick+0x58>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	4619      	mov	r1, r3
 8001a52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 f967 	bl	8001d32 <HAL_SYSTICK_Config>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e00e      	b.n	8001a8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b0f      	cmp	r3, #15
 8001a72:	d80a      	bhi.n	8001a8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a74:	2200      	movs	r2, #0
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295
 8001a7c:	f000 f92f 	bl	8001cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a80:	4a06      	ldr	r2, [pc, #24]	@ (8001a9c <HAL_InitTick+0x5c>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	e000      	b.n	8001a8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000000 	.word	0x20000000
 8001a98:	20000008 	.word	0x20000008
 8001a9c:	20000004 	.word	0x20000004

08001aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <HAL_IncTick+0x20>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <HAL_IncTick+0x24>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	4a04      	ldr	r2, [pc, #16]	@ (8001ac4 <HAL_IncTick+0x24>)
 8001ab2:	6013      	str	r3, [r2, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000008 	.word	0x20000008
 8001ac4:	200003fc 	.word	0x200003fc

08001ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return uwTick;
 8001acc:	4b03      	ldr	r3, [pc, #12]	@ (8001adc <HAL_GetTick+0x14>)
 8001ace:	681b      	ldr	r3, [r3, #0]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	200003fc 	.word	0x200003fc

08001ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae8:	f7ff ffee 	bl	8001ac8 <HAL_GetTick>
 8001aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af8:	d005      	beq.n	8001b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001afa:	4b0a      	ldr	r3, [pc, #40]	@ (8001b24 <HAL_Delay+0x44>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b06:	bf00      	nop
 8001b08:	f7ff ffde 	bl	8001ac8 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d8f7      	bhi.n	8001b08 <HAL_Delay+0x28>
  {
  }
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000008 	.word	0x20000008

08001b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b38:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b44:	4013      	ands	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5a:	4a04      	ldr	r2, [pc, #16]	@ (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	60d3      	str	r3, [r2, #12]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b74:	4b04      	ldr	r3, [pc, #16]	@ (8001b88 <__NVIC_GetPriorityGrouping+0x18>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	f003 0307 	and.w	r3, r3, #7
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	db0b      	blt.n	8001bb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	f003 021f 	and.w	r2, r3, #31
 8001ba4:	4907      	ldr	r1, [pc, #28]	@ (8001bc4 <__NVIC_EnableIRQ+0x38>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	2001      	movs	r0, #1
 8001bae:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000e100 	.word	0xe000e100

08001bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db0a      	blt.n	8001bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	490c      	ldr	r1, [pc, #48]	@ (8001c14 <__NVIC_SetPriority+0x4c>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf0:	e00a      	b.n	8001c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4908      	ldr	r1, [pc, #32]	@ (8001c18 <__NVIC_SetPriority+0x50>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	440b      	add	r3, r1
 8001c06:	761a      	strb	r2, [r3, #24]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	@ 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f1c3 0307 	rsb	r3, r3, #7
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	bf28      	it	cs
 8001c3a:	2304      	movcs	r3, #4
 8001c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d902      	bls.n	8001c4c <NVIC_EncodePriority+0x30>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b03      	subs	r3, #3
 8001c4a:	e000      	b.n	8001c4e <NVIC_EncodePriority+0x32>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	4313      	orrs	r3, r2
         );
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	@ 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c94:	d301      	bcc.n	8001c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c96:	2301      	movs	r3, #1
 8001c98:	e00f      	b.n	8001cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <SysTick_Config+0x40>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca2:	210f      	movs	r1, #15
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca8:	f7ff ff8e 	bl	8001bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cac:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <SysTick_Config+0x40>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb2:	4b04      	ldr	r3, [pc, #16]	@ (8001cc4 <SysTick_Config+0x40>)
 8001cb4:	2207      	movs	r2, #7
 8001cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	e000e010 	.word	0xe000e010

08001cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ff29 	bl	8001b28 <__NVIC_SetPriorityGrouping>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf0:	f7ff ff3e 	bl	8001b70 <__NVIC_GetPriorityGrouping>
 8001cf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	6978      	ldr	r0, [r7, #20]
 8001cfc:	f7ff ff8e 	bl	8001c1c <NVIC_EncodePriority>
 8001d00:	4602      	mov	r2, r0
 8001d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d06:	4611      	mov	r1, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff5d 	bl	8001bc8 <__NVIC_SetPriority>
}
 8001d0e:	bf00      	nop
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff31 	bl	8001b8c <__NVIC_EnableIRQ>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff ffa2 	bl	8001c84 <SysTick_Config>
 8001d40:	4603      	mov	r3, r0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	@ 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	e159      	b.n	800201c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d68:	2201      	movs	r2, #1
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	f040 8148 	bne.w	8002016 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d005      	beq.n	8001d9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d130      	bne.n	8001e00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	2203      	movs	r2, #3
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	f003 0201 	and.w	r2, r3, #1
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d017      	beq.n	8001e3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	2203      	movs	r2, #3
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d123      	bne.n	8001e90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	08da      	lsrs	r2, r3, #3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3208      	adds	r2, #8
 8001e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	220f      	movs	r2, #15
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	08da      	lsrs	r2, r3, #3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3208      	adds	r2, #8
 8001e8a:	69b9      	ldr	r1, [r7, #24]
 8001e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0203 	and.w	r2, r3, #3
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80a2 	beq.w	8002016 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	4b57      	ldr	r3, [pc, #348]	@ (8002034 <HAL_GPIO_Init+0x2e8>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eda:	4a56      	ldr	r2, [pc, #344]	@ (8002034 <HAL_GPIO_Init+0x2e8>)
 8001edc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ee0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ee2:	4b54      	ldr	r3, [pc, #336]	@ (8002034 <HAL_GPIO_Init+0x2e8>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eee:	4a52      	ldr	r2, [pc, #328]	@ (8002038 <HAL_GPIO_Init+0x2ec>)
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	089b      	lsrs	r3, r3, #2
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	220f      	movs	r2, #15
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a49      	ldr	r2, [pc, #292]	@ (800203c <HAL_GPIO_Init+0x2f0>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d019      	beq.n	8001f4e <HAL_GPIO_Init+0x202>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a48      	ldr	r2, [pc, #288]	@ (8002040 <HAL_GPIO_Init+0x2f4>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d013      	beq.n	8001f4a <HAL_GPIO_Init+0x1fe>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a47      	ldr	r2, [pc, #284]	@ (8002044 <HAL_GPIO_Init+0x2f8>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00d      	beq.n	8001f46 <HAL_GPIO_Init+0x1fa>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a46      	ldr	r2, [pc, #280]	@ (8002048 <HAL_GPIO_Init+0x2fc>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d007      	beq.n	8001f42 <HAL_GPIO_Init+0x1f6>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a45      	ldr	r2, [pc, #276]	@ (800204c <HAL_GPIO_Init+0x300>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d101      	bne.n	8001f3e <HAL_GPIO_Init+0x1f2>
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	e008      	b.n	8001f50 <HAL_GPIO_Init+0x204>
 8001f3e:	2307      	movs	r3, #7
 8001f40:	e006      	b.n	8001f50 <HAL_GPIO_Init+0x204>
 8001f42:	2303      	movs	r3, #3
 8001f44:	e004      	b.n	8001f50 <HAL_GPIO_Init+0x204>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e002      	b.n	8001f50 <HAL_GPIO_Init+0x204>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <HAL_GPIO_Init+0x204>
 8001f4e:	2300      	movs	r3, #0
 8001f50:	69fa      	ldr	r2, [r7, #28]
 8001f52:	f002 0203 	and.w	r2, r2, #3
 8001f56:	0092      	lsls	r2, r2, #2
 8001f58:	4093      	lsls	r3, r2
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f60:	4935      	ldr	r1, [pc, #212]	@ (8002038 <HAL_GPIO_Init+0x2ec>)
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	089b      	lsrs	r3, r3, #2
 8001f66:	3302      	adds	r3, #2
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f6e:	4b38      	ldr	r3, [pc, #224]	@ (8002050 <HAL_GPIO_Init+0x304>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	43db      	mvns	r3, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f92:	4a2f      	ldr	r2, [pc, #188]	@ (8002050 <HAL_GPIO_Init+0x304>)
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f98:	4b2d      	ldr	r3, [pc, #180]	@ (8002050 <HAL_GPIO_Init+0x304>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fbc:	4a24      	ldr	r2, [pc, #144]	@ (8002050 <HAL_GPIO_Init+0x304>)
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fc2:	4b23      	ldr	r3, [pc, #140]	@ (8002050 <HAL_GPIO_Init+0x304>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fe6:	4a1a      	ldr	r2, [pc, #104]	@ (8002050 <HAL_GPIO_Init+0x304>)
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fec:	4b18      	ldr	r3, [pc, #96]	@ (8002050 <HAL_GPIO_Init+0x304>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002010:	4a0f      	ldr	r2, [pc, #60]	@ (8002050 <HAL_GPIO_Init+0x304>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3301      	adds	r3, #1
 800201a:	61fb      	str	r3, [r7, #28]
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	2b0f      	cmp	r3, #15
 8002020:	f67f aea2 	bls.w	8001d68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002024:	bf00      	nop
 8002026:	bf00      	nop
 8002028:	3724      	adds	r7, #36	@ 0x24
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40023800 	.word	0x40023800
 8002038:	40013800 	.word	0x40013800
 800203c:	40020000 	.word	0x40020000
 8002040:	40020400 	.word	0x40020400
 8002044:	40020800 	.word	0x40020800
 8002048:	40020c00 	.word	0x40020c00
 800204c:	40021000 	.word	0x40021000
 8002050:	40013c00 	.word	0x40013c00

08002054 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af02      	add	r7, sp, #8
 800205a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e101      	b.n	800226a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	d106      	bne.n	8002086 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f006 fc71 	bl	8008968 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2203      	movs	r2, #3
 800208a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002094:	d102      	bne.n	800209c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f003 f858 	bl	8005156 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	7c1a      	ldrb	r2, [r3, #16]
 80020ae:	f88d 2000 	strb.w	r2, [sp]
 80020b2:	3304      	adds	r3, #4
 80020b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020b6:	f002 ff37 	bl	8004f28 <USB_CoreInit>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d005      	beq.n	80020cc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2202      	movs	r2, #2
 80020c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0ce      	b.n	800226a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2100      	movs	r1, #0
 80020d2:	4618      	mov	r0, r3
 80020d4:	f003 f850 	bl	8005178 <USB_SetCurrentMode>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d005      	beq.n	80020ea <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2202      	movs	r2, #2
 80020e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e0bf      	b.n	800226a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ea:	2300      	movs	r3, #0
 80020ec:	73fb      	strb	r3, [r7, #15]
 80020ee:	e04a      	b.n	8002186 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020f0:	7bfa      	ldrb	r2, [r7, #15]
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	4413      	add	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	3315      	adds	r3, #21
 8002100:	2201      	movs	r2, #1
 8002102:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002104:	7bfa      	ldrb	r2, [r7, #15]
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	3314      	adds	r3, #20
 8002114:	7bfa      	ldrb	r2, [r7, #15]
 8002116:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002118:	7bfa      	ldrb	r2, [r7, #15]
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	b298      	uxth	r0, r3
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4413      	add	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	332e      	adds	r3, #46	@ 0x2e
 800212c:	4602      	mov	r2, r0
 800212e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002130:	7bfa      	ldrb	r2, [r7, #15]
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4413      	add	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	3318      	adds	r3, #24
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002144:	7bfa      	ldrb	r2, [r7, #15]
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	331c      	adds	r3, #28
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002158:	7bfa      	ldrb	r2, [r7, #15]
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4413      	add	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	3320      	adds	r3, #32
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800216c:	7bfa      	ldrb	r2, [r7, #15]
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	3324      	adds	r3, #36	@ 0x24
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	3301      	adds	r3, #1
 8002184:	73fb      	strb	r3, [r7, #15]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	791b      	ldrb	r3, [r3, #4]
 800218a:	7bfa      	ldrb	r2, [r7, #15]
 800218c:	429a      	cmp	r2, r3
 800218e:	d3af      	bcc.n	80020f0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002190:	2300      	movs	r3, #0
 8002192:	73fb      	strb	r3, [r7, #15]
 8002194:	e044      	b.n	8002220 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002196:	7bfa      	ldrb	r2, [r7, #15]
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4413      	add	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80021a8:	2200      	movs	r2, #0
 80021aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021ac:	7bfa      	ldrb	r2, [r7, #15]
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	4613      	mov	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80021be:	7bfa      	ldrb	r2, [r7, #15]
 80021c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021c2:	7bfa      	ldrb	r2, [r7, #15]
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	4413      	add	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	440b      	add	r3, r1
 80021d0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021d8:	7bfa      	ldrb	r2, [r7, #15]
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	4613      	mov	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4413      	add	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021ee:	7bfa      	ldrb	r2, [r7, #15]
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4413      	add	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002204:	7bfa      	ldrb	r2, [r7, #15]
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4413      	add	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	3301      	adds	r3, #1
 800221e:	73fb      	strb	r3, [r7, #15]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	791b      	ldrb	r3, [r3, #4]
 8002224:	7bfa      	ldrb	r2, [r7, #15]
 8002226:	429a      	cmp	r2, r3
 8002228:	d3b5      	bcc.n	8002196 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6818      	ldr	r0, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	7c1a      	ldrb	r2, [r3, #16]
 8002232:	f88d 2000 	strb.w	r2, [sp]
 8002236:	3304      	adds	r3, #4
 8002238:	cb0e      	ldmia	r3, {r1, r2, r3}
 800223a:	f002 ffe9 	bl	8005210 <USB_DevInit>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2202      	movs	r2, #2
 8002248:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e00c      	b.n	800226a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f004 f833 	bl	80062ce <USB_DevDisconnect>

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b084      	sub	sp, #16
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002286:	2b01      	cmp	r3, #1
 8002288:	d101      	bne.n	800228e <HAL_PCD_Start+0x1c>
 800228a:	2302      	movs	r3, #2
 800228c:	e022      	b.n	80022d4 <HAL_PCD_Start+0x62>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d009      	beq.n	80022b6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d105      	bne.n	80022b6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ae:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f002 ff3a 	bl	8005134 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f003 ffe1 	bl	800628c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022dc:	b590      	push	{r4, r7, lr}
 80022de:	b08d      	sub	sp, #52	@ 0x34
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022ea:	6a3b      	ldr	r3, [r7, #32]
 80022ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f004 f89f 	bl	8006436 <USB_GetMode>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f040 848c 	bne.w	8002c18 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f004 f803 	bl	8006310 <USB_ReadInterrupts>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 8482 	beq.w	8002c16 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	0a1b      	lsrs	r3, r3, #8
 800231c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f003 fff0 	bl	8006310 <USB_ReadInterrupts>
 8002330:	4603      	mov	r3, r0
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b02      	cmp	r3, #2
 8002338:	d107      	bne.n	800234a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695a      	ldr	r2, [r3, #20]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f002 0202 	and.w	r2, r2, #2
 8002348:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f003 ffde 	bl	8006310 <USB_ReadInterrupts>
 8002354:	4603      	mov	r3, r0
 8002356:	f003 0310 	and.w	r3, r3, #16
 800235a:	2b10      	cmp	r3, #16
 800235c:	d161      	bne.n	8002422 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	699a      	ldr	r2, [r3, #24]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0210 	bic.w	r2, r2, #16
 800236c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	f003 020f 	and.w	r2, r3, #15
 800237a:	4613      	mov	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	4413      	add	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	4413      	add	r3, r2
 800238a:	3304      	adds	r3, #4
 800238c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	0c5b      	lsrs	r3, r3, #17
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	2b02      	cmp	r3, #2
 8002398:	d124      	bne.n	80023e4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d035      	beq.n	8002412 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	461a      	mov	r2, r3
 80023b8:	6a38      	ldr	r0, [r7, #32]
 80023ba:	f003 fe15 	bl	8005fe8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	091b      	lsrs	r3, r3, #4
 80023c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023ca:	441a      	add	r2, r3
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	695a      	ldr	r2, [r3, #20]
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	091b      	lsrs	r3, r3, #4
 80023d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023dc:	441a      	add	r2, r3
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	615a      	str	r2, [r3, #20]
 80023e2:	e016      	b.n	8002412 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	0c5b      	lsrs	r3, r3, #17
 80023e8:	f003 030f 	and.w	r3, r3, #15
 80023ec:	2b06      	cmp	r3, #6
 80023ee:	d110      	bne.n	8002412 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023f6:	2208      	movs	r2, #8
 80023f8:	4619      	mov	r1, r3
 80023fa:	6a38      	ldr	r0, [r7, #32]
 80023fc:	f003 fdf4 	bl	8005fe8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	695a      	ldr	r2, [r3, #20]
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	091b      	lsrs	r3, r3, #4
 8002408:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800240c:	441a      	add	r2, r3
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	699a      	ldr	r2, [r3, #24]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f042 0210 	orr.w	r2, r2, #16
 8002420:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f003 ff72 	bl	8006310 <USB_ReadInterrupts>
 800242c:	4603      	mov	r3, r0
 800242e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002432:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002436:	f040 80a7 	bne.w	8002588 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800243a:	2300      	movs	r3, #0
 800243c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f003 ff77 	bl	8006336 <USB_ReadDevAllOutEpInterrupt>
 8002448:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800244a:	e099      	b.n	8002580 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800244c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 808e 	beq.w	8002574 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	4611      	mov	r1, r2
 8002462:	4618      	mov	r0, r3
 8002464:	f003 ff9b 	bl	800639e <USB_ReadDevOutEPInterrupt>
 8002468:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00c      	beq.n	800248e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002476:	015a      	lsls	r2, r3, #5
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	4413      	add	r3, r2
 800247c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002480:	461a      	mov	r2, r3
 8002482:	2301      	movs	r3, #1
 8002484:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002486:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 fea3 	bl	80031d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00c      	beq.n	80024b2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024a4:	461a      	mov	r2, r3
 80024a6:	2308      	movs	r3, #8
 80024a8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80024aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 ff79 	bl	80033a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	f003 0310 	and.w	r3, r3, #16
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d008      	beq.n	80024ce <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80024bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024be:	015a      	lsls	r2, r3, #5
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	4413      	add	r3, r2
 80024c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024c8:	461a      	mov	r2, r3
 80024ca:	2310      	movs	r3, #16
 80024cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d030      	beq.n	800253a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024e0:	2b80      	cmp	r3, #128	@ 0x80
 80024e2:	d109      	bne.n	80024f8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	69fa      	ldr	r2, [r7, #28]
 80024ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024f6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80024f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024fa:	4613      	mov	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	4413      	add	r3, r2
 800250a:	3304      	adds	r3, #4
 800250c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	78db      	ldrb	r3, [r3, #3]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d108      	bne.n	8002528 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2200      	movs	r2, #0
 800251a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800251c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251e:	b2db      	uxtb	r3, r3
 8002520:	4619      	mov	r1, r3
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f006 fb1c 	bl	8008b60 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252a:	015a      	lsls	r2, r3, #5
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	4413      	add	r3, r2
 8002530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002534:	461a      	mov	r2, r3
 8002536:	2302      	movs	r3, #2
 8002538:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	f003 0320 	and.w	r3, r3, #32
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002546:	015a      	lsls	r2, r3, #5
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	4413      	add	r3, r2
 800254c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002550:	461a      	mov	r2, r3
 8002552:	2320      	movs	r3, #32
 8002554:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d009      	beq.n	8002574 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	4413      	add	r3, r2
 8002568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800256c:	461a      	mov	r2, r3
 800256e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002572:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002576:	3301      	adds	r3, #1
 8002578:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800257a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800257c:	085b      	lsrs	r3, r3, #1
 800257e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002582:	2b00      	cmp	r3, #0
 8002584:	f47f af62 	bne.w	800244c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f003 febf 	bl	8006310 <USB_ReadInterrupts>
 8002592:	4603      	mov	r3, r0
 8002594:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002598:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800259c:	f040 80db 	bne.w	8002756 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f003 fee0 	bl	800636a <USB_ReadDevAllInEpInterrupt>
 80025aa:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80025b0:	e0cd      	b.n	800274e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80025b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 80c2 	beq.w	8002742 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f003 ff06 	bl	80063da <USB_ReadDevInEPInterrupt>
 80025ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d057      	beq.n	800268a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	2201      	movs	r2, #1
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	43db      	mvns	r3, r3
 80025f4:	69f9      	ldr	r1, [r7, #28]
 80025f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80025fa:	4013      	ands	r3, r2
 80025fc:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80025fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002600:	015a      	lsls	r2, r3, #5
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	4413      	add	r3, r2
 8002606:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800260a:	461a      	mov	r2, r3
 800260c:	2301      	movs	r3, #1
 800260e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	799b      	ldrb	r3, [r3, #6]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d132      	bne.n	800267e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800261c:	4613      	mov	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4413      	add	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	3320      	adds	r3, #32
 8002628:	6819      	ldr	r1, [r3, #0]
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800262e:	4613      	mov	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4413      	add	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4403      	add	r3, r0
 8002638:	331c      	adds	r3, #28
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4419      	add	r1, r3
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002642:	4613      	mov	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4413      	add	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4403      	add	r3, r0
 800264c:	3320      	adds	r3, #32
 800264e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002652:	2b00      	cmp	r3, #0
 8002654:	d113      	bne.n	800267e <HAL_PCD_IRQHandler+0x3a2>
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800265a:	4613      	mov	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	3324      	adds	r3, #36	@ 0x24
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d108      	bne.n	800267e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002676:	461a      	mov	r2, r3
 8002678:	2101      	movs	r1, #1
 800267a:	f003 ff0d 	bl	8006498 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800267e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002680:	b2db      	uxtb	r3, r3
 8002682:	4619      	mov	r1, r3
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f006 f9f0 	bl	8008a6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b00      	cmp	r3, #0
 8002692:	d008      	beq.n	80026a6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	4413      	add	r3, r2
 800269c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026a0:	461a      	mov	r2, r3
 80026a2:	2308      	movs	r3, #8
 80026a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80026b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026bc:	461a      	mov	r2, r3
 80026be:	2310      	movs	r3, #16
 80026c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d008      	beq.n	80026de <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80026cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026d8:	461a      	mov	r2, r3
 80026da:	2340      	movs	r3, #64	@ 0x40
 80026dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d023      	beq.n	8002730 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80026e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026ea:	6a38      	ldr	r0, [r7, #32]
 80026ec:	f002 fef4 	bl	80054d8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80026f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026f2:	4613      	mov	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4413      	add	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	3310      	adds	r3, #16
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	4413      	add	r3, r2
 8002700:	3304      	adds	r3, #4
 8002702:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	78db      	ldrb	r3, [r3, #3]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d108      	bne.n	800271e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	2200      	movs	r2, #0
 8002710:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002714:	b2db      	uxtb	r3, r3
 8002716:	4619      	mov	r1, r3
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f006 fa33 	bl	8008b84 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002720:	015a      	lsls	r2, r3, #5
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	4413      	add	r3, r2
 8002726:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800272a:	461a      	mov	r2, r3
 800272c:	2302      	movs	r3, #2
 800272e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800273a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 fcbd 	bl	80030bc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002744:	3301      	adds	r3, #1
 8002746:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800274a:	085b      	lsrs	r3, r3, #1
 800274c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800274e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002750:	2b00      	cmp	r3, #0
 8002752:	f47f af2e 	bne.w	80025b2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f003 fdd8 	bl	8006310 <USB_ReadInterrupts>
 8002760:	4603      	mov	r3, r0
 8002762:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002766:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800276a:	d122      	bne.n	80027b2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	69fa      	ldr	r2, [r7, #28]
 8002776:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800277a:	f023 0301 	bic.w	r3, r3, #1
 800277e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002786:	2b01      	cmp	r3, #1
 8002788:	d108      	bne.n	800279c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002792:	2100      	movs	r1, #0
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 fea3 	bl	80034e0 <HAL_PCDEx_LPM_Callback>
 800279a:	e002      	b.n	80027a2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f006 f9d1 	bl	8008b44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	695a      	ldr	r2, [r3, #20]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80027b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f003 fdaa 	bl	8006310 <USB_ReadInterrupts>
 80027bc:	4603      	mov	r3, r0
 80027be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027c6:	d112      	bne.n	80027ee <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d102      	bne.n	80027de <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f006 f98d 	bl	8008af8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695a      	ldr	r2, [r3, #20]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80027ec:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f003 fd8c 	bl	8006310 <USB_ReadInterrupts>
 80027f8:	4603      	mov	r3, r0
 80027fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002802:	f040 80b7 	bne.w	8002974 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002814:	f023 0301 	bic.w	r3, r3, #1
 8002818:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2110      	movs	r1, #16
 8002820:	4618      	mov	r0, r3
 8002822:	f002 fe59 	bl	80054d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002826:	2300      	movs	r3, #0
 8002828:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800282a:	e046      	b.n	80028ba <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800282c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	4413      	add	r3, r2
 8002834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002838:	461a      	mov	r2, r3
 800283a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800283e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	4413      	add	r3, r2
 8002848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002850:	0151      	lsls	r1, r2, #5
 8002852:	69fa      	ldr	r2, [r7, #28]
 8002854:	440a      	add	r2, r1
 8002856:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800285a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800285e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002862:	015a      	lsls	r2, r3, #5
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	4413      	add	r3, r2
 8002868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800286c:	461a      	mov	r2, r3
 800286e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002872:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	4413      	add	r3, r2
 800287c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002884:	0151      	lsls	r1, r2, #5
 8002886:	69fa      	ldr	r2, [r7, #28]
 8002888:	440a      	add	r2, r1
 800288a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800288e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002892:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002896:	015a      	lsls	r2, r3, #5
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	4413      	add	r3, r2
 800289c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028a4:	0151      	lsls	r1, r2, #5
 80028a6:	69fa      	ldr	r2, [r7, #28]
 80028a8:	440a      	add	r2, r1
 80028aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80028ae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80028b2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028b6:	3301      	adds	r3, #1
 80028b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	791b      	ldrb	r3, [r3, #4]
 80028be:	461a      	mov	r2, r3
 80028c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d3b2      	bcc.n	800282c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028d4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80028d8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	7bdb      	ldrb	r3, [r3, #15]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d016      	beq.n	8002910 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028ec:	69fa      	ldr	r2, [r7, #28]
 80028ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028f2:	f043 030b 	orr.w	r3, r3, #11
 80028f6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002902:	69fa      	ldr	r2, [r7, #28]
 8002904:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002908:	f043 030b 	orr.w	r3, r3, #11
 800290c:	6453      	str	r3, [r2, #68]	@ 0x44
 800290e:	e015      	b.n	800293c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	69fa      	ldr	r2, [r7, #28]
 800291a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800291e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002922:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002926:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	69fa      	ldr	r2, [r7, #28]
 8002932:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002936:	f043 030b 	orr.w	r3, r3, #11
 800293a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	69fa      	ldr	r2, [r7, #28]
 8002946:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800294a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800294e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6818      	ldr	r0, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800295e:	461a      	mov	r2, r3
 8002960:	f003 fd9a 	bl	8006498 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695a      	ldr	r2, [r3, #20]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002972:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f003 fcc9 	bl	8006310 <USB_ReadInterrupts>
 800297e:	4603      	mov	r3, r0
 8002980:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002984:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002988:	d123      	bne.n	80029d2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f003 fd5f 	bl	8006452 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f002 fe16 	bl	80055ca <USB_GetDevSpeed>
 800299e:	4603      	mov	r3, r0
 80029a0:	461a      	mov	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681c      	ldr	r4, [r3, #0]
 80029aa:	f001 fa09 	bl	8003dc0 <HAL_RCC_GetHCLKFreq>
 80029ae:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029b4:	461a      	mov	r2, r3
 80029b6:	4620      	mov	r0, r4
 80029b8:	f002 fb1a 	bl	8004ff0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f006 f87c 	bl	8008aba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695a      	ldr	r2, [r3, #20]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80029d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f003 fc9a 	bl	8006310 <USB_ReadInterrupts>
 80029dc:	4603      	mov	r3, r0
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d10a      	bne.n	80029fc <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f006 f859 	bl	8008a9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695a      	ldr	r2, [r3, #20]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f002 0208 	and.w	r2, r2, #8
 80029fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f003 fc85 	bl	8006310 <USB_ReadInterrupts>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a0c:	2b80      	cmp	r3, #128	@ 0x80
 8002a0e:	d123      	bne.n	8002a58 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002a10:	6a3b      	ldr	r3, [r7, #32]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a20:	e014      	b.n	8002a4c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a26:	4613      	mov	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	440b      	add	r3, r1
 8002a30:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d105      	bne.n	8002a46 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	4619      	mov	r1, r3
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 fb0a 	bl	800305a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a48:	3301      	adds	r3, #1
 8002a4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	791b      	ldrb	r3, [r3, #4]
 8002a50:	461a      	mov	r2, r3
 8002a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d3e4      	bcc.n	8002a22 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f003 fc57 	bl	8006310 <USB_ReadInterrupts>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a6c:	d13c      	bne.n	8002ae8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a6e:	2301      	movs	r3, #1
 8002a70:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a72:	e02b      	b.n	8002acc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a88:	4613      	mov	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	3318      	adds	r3, #24
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d115      	bne.n	8002ac6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a9a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	da12      	bge.n	8002ac6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	3317      	adds	r3, #23
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	4619      	mov	r1, r3
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 faca 	bl	800305a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac8:	3301      	adds	r3, #1
 8002aca:	627b      	str	r3, [r7, #36]	@ 0x24
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	791b      	ldrb	r3, [r3, #4]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d3cd      	bcc.n	8002a74 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695a      	ldr	r2, [r3, #20]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002ae6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f003 fc0f 	bl	8006310 <USB_ReadInterrupts>
 8002af2:	4603      	mov	r3, r0
 8002af4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002af8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002afc:	d156      	bne.n	8002bac <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002afe:	2301      	movs	r3, #1
 8002b00:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b02:	e045      	b.n	8002b90 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b06:	015a      	lsls	r2, r3, #5
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b18:	4613      	mov	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d12e      	bne.n	8002b8a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b2c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	da2b      	bge.n	8002b8a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002b3e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d121      	bne.n	8002b8a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4413      	add	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	440b      	add	r3, r1
 8002b54:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002b58:	2201      	movs	r2, #1
 8002b5a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002b68:	6a3b      	ldr	r3, [r7, #32]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10a      	bne.n	8002b8a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	69fa      	ldr	r2, [r7, #28]
 8002b7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b86:	6053      	str	r3, [r2, #4]
            break;
 8002b88:	e008      	b.n	8002b9c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	791b      	ldrb	r3, [r3, #4]
 8002b94:	461a      	mov	r2, r3
 8002b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d3b3      	bcc.n	8002b04 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695a      	ldr	r2, [r3, #20]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002baa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f003 fbad 	bl	8006310 <USB_ReadInterrupts>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bc0:	d10a      	bne.n	8002bd8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f005 fff0 	bl	8008ba8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002bd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f003 fb97 	bl	8006310 <USB_ReadInterrupts>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d115      	bne.n	8002c18 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f005 ffe0 	bl	8008bc4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6859      	ldr	r1, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	605a      	str	r2, [r3, #4]
 8002c14:	e000      	b.n	8002c18 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002c16:	bf00      	nop
    }
  }
}
 8002c18:	3734      	adds	r7, #52	@ 0x34
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd90      	pop	{r4, r7, pc}

08002c1e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
 8002c26:	460b      	mov	r3, r1
 8002c28:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_PCD_SetAddress+0x1a>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e012      	b.n	8002c5e <HAL_PCD_SetAddress+0x40>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	78fa      	ldrb	r2, [r7, #3]
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f003 faf6 	bl	8006240 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b084      	sub	sp, #16
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	4608      	mov	r0, r1
 8002c70:	4611      	mov	r1, r2
 8002c72:	461a      	mov	r2, r3
 8002c74:	4603      	mov	r3, r0
 8002c76:	70fb      	strb	r3, [r7, #3]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	803b      	strh	r3, [r7, #0]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	da0f      	bge.n	8002cac <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c8c:	78fb      	ldrb	r3, [r7, #3]
 8002c8e:	f003 020f 	and.w	r2, r3, #15
 8002c92:	4613      	mov	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	4413      	add	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	3310      	adds	r3, #16
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	705a      	strb	r2, [r3, #1]
 8002caa:	e00f      	b.n	8002ccc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cac:	78fb      	ldrb	r3, [r7, #3]
 8002cae:	f003 020f 	and.w	r2, r3, #15
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ccc:	78fb      	ldrb	r3, [r7, #3]
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002cd8:	883b      	ldrh	r3, [r7, #0]
 8002cda:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	78ba      	ldrb	r2, [r7, #2]
 8002ce6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	785b      	ldrb	r3, [r3, #1]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d004      	beq.n	8002cfa <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cfa:	78bb      	ldrb	r3, [r7, #2]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d102      	bne.n	8002d06 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_PCD_EP_Open+0xae>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e00e      	b.n	8002d32 <HAL_PCD_EP_Open+0xcc>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68f9      	ldr	r1, [r7, #12]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f002 fc76 	bl	8005614 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002d30:	7afb      	ldrb	r3, [r7, #11]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b084      	sub	sp, #16
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
 8002d42:	460b      	mov	r3, r1
 8002d44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	da0f      	bge.n	8002d6e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d4e:	78fb      	ldrb	r3, [r7, #3]
 8002d50:	f003 020f 	and.w	r2, r3, #15
 8002d54:	4613      	mov	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	4413      	add	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	3310      	adds	r3, #16
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	4413      	add	r3, r2
 8002d62:	3304      	adds	r3, #4
 8002d64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	705a      	strb	r2, [r3, #1]
 8002d6c:	e00f      	b.n	8002d8e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d6e:	78fb      	ldrb	r3, [r7, #3]
 8002d70:	f003 020f 	and.w	r2, r3, #15
 8002d74:	4613      	mov	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	4413      	add	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	4413      	add	r3, r2
 8002d84:	3304      	adds	r3, #4
 8002d86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d8e:	78fb      	ldrb	r3, [r7, #3]
 8002d90:	f003 030f 	and.w	r3, r3, #15
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_PCD_EP_Close+0x6e>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e00e      	b.n	8002dc6 <HAL_PCD_EP_Close+0x8c>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68f9      	ldr	r1, [r7, #12]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f002 fcb4 	bl	8005724 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b086      	sub	sp, #24
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	603b      	str	r3, [r7, #0]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dde:	7afb      	ldrb	r3, [r7, #11]
 8002de0:	f003 020f 	and.w	r2, r3, #15
 8002de4:	4613      	mov	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	4413      	add	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	4413      	add	r3, r2
 8002df4:	3304      	adds	r3, #4
 8002df6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	2200      	movs	r2, #0
 8002e08:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e10:	7afb      	ldrb	r3, [r7, #11]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	799b      	ldrb	r3, [r3, #6]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d102      	bne.n	8002e2a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	799b      	ldrb	r3, [r3, #6]
 8002e32:	461a      	mov	r2, r3
 8002e34:	6979      	ldr	r1, [r7, #20]
 8002e36:	f002 fd51 	bl	80058dc <USB_EPStartXfer>

  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e50:	78fb      	ldrb	r3, [r7, #3]
 8002e52:	f003 020f 	and.w	r2, r3, #15
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002e66:	681b      	ldr	r3, [r3, #0]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	607a      	str	r2, [r7, #4]
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	460b      	mov	r3, r1
 8002e82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e84:	7afb      	ldrb	r3, [r7, #11]
 8002e86:	f003 020f 	and.w	r2, r3, #15
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	4413      	add	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	3310      	adds	r3, #16
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4413      	add	r3, r2
 8002e98:	3304      	adds	r3, #4
 8002e9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eb4:	7afb      	ldrb	r3, [r7, #11]
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	799b      	ldrb	r3, [r3, #6]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d102      	bne.n	8002ece <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	799b      	ldrb	r3, [r3, #6]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	6979      	ldr	r1, [r7, #20]
 8002eda:	f002 fcff 	bl	80058dc <USB_EPStartXfer>

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ef4:	78fb      	ldrb	r3, [r7, #3]
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	7912      	ldrb	r2, [r2, #4]
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d901      	bls.n	8002f06 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e04f      	b.n	8002fa6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	da0f      	bge.n	8002f2e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	f003 020f 	and.w	r2, r3, #15
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	3310      	adds	r3, #16
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	3304      	adds	r3, #4
 8002f24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	705a      	strb	r2, [r3, #1]
 8002f2c:	e00d      	b.n	8002f4a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f2e:	78fa      	ldrb	r2, [r7, #3]
 8002f30:	4613      	mov	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	4413      	add	r3, r2
 8002f40:	3304      	adds	r3, #4
 8002f42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_PCD_EP_SetStall+0x82>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e01d      	b.n	8002fa6 <HAL_PCD_EP_SetStall+0xbe>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68f9      	ldr	r1, [r7, #12]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f003 f88d 	bl	8006098 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f7e:	78fb      	ldrb	r3, [r7, #3]
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d109      	bne.n	8002f9c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6818      	ldr	r0, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	7999      	ldrb	r1, [r3, #6]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f96:	461a      	mov	r2, r3
 8002f98:	f003 fa7e 	bl	8006498 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b084      	sub	sp, #16
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fba:	78fb      	ldrb	r3, [r7, #3]
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	7912      	ldrb	r2, [r2, #4]
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d901      	bls.n	8002fcc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e042      	b.n	8003052 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	da0f      	bge.n	8002ff4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	f003 020f 	and.w	r2, r3, #15
 8002fda:	4613      	mov	r3, r2
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	4413      	add	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	3310      	adds	r3, #16
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3304      	adds	r3, #4
 8002fea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	705a      	strb	r2, [r3, #1]
 8002ff2:	e00f      	b.n	8003014 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	f003 020f 	and.w	r2, r3, #15
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	4413      	add	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	4413      	add	r3, r2
 800300a:	3304      	adds	r3, #4
 800300c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800301a:	78fb      	ldrb	r3, [r7, #3]
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	b2da      	uxtb	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800302c:	2b01      	cmp	r3, #1
 800302e:	d101      	bne.n	8003034 <HAL_PCD_EP_ClrStall+0x86>
 8003030:	2302      	movs	r3, #2
 8003032:	e00e      	b.n	8003052 <HAL_PCD_EP_ClrStall+0xa4>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68f9      	ldr	r1, [r7, #12]
 8003042:	4618      	mov	r0, r3
 8003044:	f003 f896 	bl	8006174 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	460b      	mov	r3, r1
 8003064:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003066:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800306a:	2b00      	cmp	r3, #0
 800306c:	da0c      	bge.n	8003088 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800306e:	78fb      	ldrb	r3, [r7, #3]
 8003070:	f003 020f 	and.w	r2, r3, #15
 8003074:	4613      	mov	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	3310      	adds	r3, #16
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	4413      	add	r3, r2
 8003082:	3304      	adds	r3, #4
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	e00c      	b.n	80030a2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	f003 020f 	and.w	r2, r3, #15
 800308e:	4613      	mov	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	4413      	add	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	4413      	add	r3, r2
 800309e:	3304      	adds	r3, #4
 80030a0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68f9      	ldr	r1, [r7, #12]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f002 feb5 	bl	8005e18 <USB_EPStopXfer>
 80030ae:	4603      	mov	r3, r0
 80030b0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80030b2:	7afb      	ldrb	r3, [r7, #11]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08a      	sub	sp, #40	@ 0x28
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	4613      	mov	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	3310      	adds	r3, #16
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	4413      	add	r3, r2
 80030e0:	3304      	adds	r3, #4
 80030e2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	695a      	ldr	r2, [r3, #20]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d901      	bls.n	80030f4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e06b      	b.n	80031cc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	69fa      	ldr	r2, [r7, #28]
 8003106:	429a      	cmp	r2, r3
 8003108:	d902      	bls.n	8003110 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	3303      	adds	r3, #3
 8003114:	089b      	lsrs	r3, r3, #2
 8003116:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003118:	e02a      	b.n	8003170 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	691a      	ldr	r2, [r3, #16]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	69fa      	ldr	r2, [r7, #28]
 800312c:	429a      	cmp	r2, r3
 800312e:	d902      	bls.n	8003136 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	3303      	adds	r3, #3
 800313a:	089b      	lsrs	r3, r3, #2
 800313c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	68d9      	ldr	r1, [r3, #12]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	b2da      	uxtb	r2, r3
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	4603      	mov	r3, r0
 8003152:	6978      	ldr	r0, [r7, #20]
 8003154:	f002 ff0a 	bl	8005f6c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	441a      	add	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	695a      	ldr	r2, [r3, #20]
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	441a      	add	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	015a      	lsls	r2, r3, #5
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	4413      	add	r3, r2
 8003178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	429a      	cmp	r2, r3
 8003184:	d809      	bhi.n	800319a <PCD_WriteEmptyTxFifo+0xde>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	695a      	ldr	r2, [r3, #20]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800318e:	429a      	cmp	r2, r3
 8003190:	d203      	bcs.n	800319a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1bf      	bne.n	800311a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	691a      	ldr	r2, [r3, #16]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d811      	bhi.n	80031ca <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	2201      	movs	r2, #1
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	43db      	mvns	r3, r3
 80031c0:	6939      	ldr	r1, [r7, #16]
 80031c2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80031c6:	4013      	ands	r3, r2
 80031c8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3720      	adds	r7, #32
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b088      	sub	sp, #32
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	333c      	adds	r3, #60	@ 0x3c
 80031ec:	3304      	adds	r3, #4
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	799b      	ldrb	r3, [r3, #6]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d17b      	bne.n	8003302 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f003 0308 	and.w	r3, r3, #8
 8003210:	2b00      	cmp	r3, #0
 8003212:	d015      	beq.n	8003240 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	4a61      	ldr	r2, [pc, #388]	@ (800339c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	f240 80b9 	bls.w	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80b3 	beq.w	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	015a      	lsls	r2, r3, #5
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	4413      	add	r3, r2
 8003232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003236:	461a      	mov	r2, r3
 8003238:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800323c:	6093      	str	r3, [r2, #8]
 800323e:	e0a7      	b.n	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	4413      	add	r3, r2
 8003252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003256:	461a      	mov	r2, r3
 8003258:	2320      	movs	r3, #32
 800325a:	6093      	str	r3, [r2, #8]
 800325c:	e098      	b.n	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003264:	2b00      	cmp	r3, #0
 8003266:	f040 8093 	bne.w	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	4a4b      	ldr	r2, [pc, #300]	@ (800339c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d90f      	bls.n	8003292 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	4413      	add	r3, r2
 8003284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003288:	461a      	mov	r2, r3
 800328a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800328e:	6093      	str	r3, [r2, #8]
 8003290:	e07e      	b.n	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	4613      	mov	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	4413      	add	r3, r2
 80032a4:	3304      	adds	r3, #4
 80032a6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a1a      	ldr	r2, [r3, #32]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	0159      	lsls	r1, r3, #5
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	440b      	add	r3, r1
 80032b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032be:	1ad2      	subs	r2, r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d114      	bne.n	80032f4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d109      	bne.n	80032e6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6818      	ldr	r0, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032dc:	461a      	mov	r2, r3
 80032de:	2101      	movs	r1, #1
 80032e0:	f003 f8da 	bl	8006498 <USB_EP0_OutStart>
 80032e4:	e006      	b.n	80032f4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	441a      	add	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	4619      	mov	r1, r3
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f005 fb9a 	bl	8008a34 <HAL_PCD_DataOutStageCallback>
 8003300:	e046      	b.n	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	4a26      	ldr	r2, [pc, #152]	@ (80033a0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d124      	bne.n	8003354 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00a      	beq.n	800332a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	015a      	lsls	r2, r3, #5
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	4413      	add	r3, r2
 800331c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003320:	461a      	mov	r2, r3
 8003322:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003326:	6093      	str	r3, [r2, #8]
 8003328:	e032      	b.n	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f003 0320 	and.w	r3, r3, #32
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	4413      	add	r3, r2
 800333c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003340:	461a      	mov	r2, r3
 8003342:	2320      	movs	r3, #32
 8003344:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	4619      	mov	r1, r3
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f005 fb71 	bl	8008a34 <HAL_PCD_DataOutStageCallback>
 8003352:	e01d      	b.n	8003390 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d114      	bne.n	8003384 <PCD_EP_OutXfrComplete_int+0x1b0>
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	4613      	mov	r3, r2
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	4413      	add	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	440b      	add	r3, r1
 8003368:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d108      	bne.n	8003384 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6818      	ldr	r0, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800337c:	461a      	mov	r2, r3
 800337e:	2100      	movs	r1, #0
 8003380:	f003 f88a 	bl	8006498 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	b2db      	uxtb	r3, r3
 8003388:	4619      	mov	r1, r3
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f005 fb52 	bl	8008a34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3720      	adds	r7, #32
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	4f54300a 	.word	0x4f54300a
 80033a0:	4f54310a 	.word	0x4f54310a

080033a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	333c      	adds	r3, #60	@ 0x3c
 80033bc:	3304      	adds	r3, #4
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	4a15      	ldr	r2, [pc, #84]	@ (800342c <PCD_EP_OutSetupPacket_int+0x88>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d90e      	bls.n	80033f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d009      	beq.n	80033f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	015a      	lsls	r2, r3, #5
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	4413      	add	r3, r2
 80033ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033f0:	461a      	mov	r2, r3
 80033f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f005 fb09 	bl	8008a10 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4a0a      	ldr	r2, [pc, #40]	@ (800342c <PCD_EP_OutSetupPacket_int+0x88>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d90c      	bls.n	8003420 <PCD_EP_OutSetupPacket_int+0x7c>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	799b      	ldrb	r3, [r3, #6]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d108      	bne.n	8003420 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6818      	ldr	r0, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003418:	461a      	mov	r2, r3
 800341a:	2101      	movs	r1, #1
 800341c:	f003 f83c 	bl	8006498 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	4f54300a 	.word	0x4f54300a

08003430 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	70fb      	strb	r3, [r7, #3]
 800343c:	4613      	mov	r3, r2
 800343e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003446:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003448:	78fb      	ldrb	r3, [r7, #3]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d107      	bne.n	800345e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800344e:	883b      	ldrh	r3, [r7, #0]
 8003450:	0419      	lsls	r1, r3, #16
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	430a      	orrs	r2, r1
 800345a:	629a      	str	r2, [r3, #40]	@ 0x28
 800345c:	e028      	b.n	80034b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003464:	0c1b      	lsrs	r3, r3, #16
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	4413      	add	r3, r2
 800346a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800346c:	2300      	movs	r3, #0
 800346e:	73fb      	strb	r3, [r7, #15]
 8003470:	e00d      	b.n	800348e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	7bfb      	ldrb	r3, [r7, #15]
 8003478:	3340      	adds	r3, #64	@ 0x40
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	0c1b      	lsrs	r3, r3, #16
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	4413      	add	r3, r2
 8003486:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	3301      	adds	r3, #1
 800348c:	73fb      	strb	r3, [r7, #15]
 800348e:	7bfa      	ldrb	r2, [r7, #15]
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	3b01      	subs	r3, #1
 8003494:	429a      	cmp	r2, r3
 8003496:	d3ec      	bcc.n	8003472 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003498:	883b      	ldrh	r3, [r7, #0]
 800349a:	0418      	lsls	r0, r3, #16
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6819      	ldr	r1, [r3, #0]
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	4302      	orrs	r2, r0
 80034a8:	3340      	adds	r3, #64	@ 0x40
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	460b      	mov	r3, r1
 80034c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	887a      	ldrh	r2, [r7, #2]
 80034d0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e267      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d075      	beq.n	8003602 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003516:	4b88      	ldr	r3, [pc, #544]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
 800351e:	2b04      	cmp	r3, #4
 8003520:	d00c      	beq.n	800353c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003522:	4b85      	ldr	r3, [pc, #532]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800352a:	2b08      	cmp	r3, #8
 800352c:	d112      	bne.n	8003554 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800352e:	4b82      	ldr	r3, [pc, #520]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003536:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800353a:	d10b      	bne.n	8003554 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800353c:	4b7e      	ldr	r3, [pc, #504]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d05b      	beq.n	8003600 <HAL_RCC_OscConfig+0x108>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d157      	bne.n	8003600 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e242      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800355c:	d106      	bne.n	800356c <HAL_RCC_OscConfig+0x74>
 800355e:	4b76      	ldr	r3, [pc, #472]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a75      	ldr	r2, [pc, #468]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	e01d      	b.n	80035a8 <HAL_RCC_OscConfig+0xb0>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003574:	d10c      	bne.n	8003590 <HAL_RCC_OscConfig+0x98>
 8003576:	4b70      	ldr	r3, [pc, #448]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a6f      	ldr	r2, [pc, #444]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 800357c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	4b6d      	ldr	r3, [pc, #436]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a6c      	ldr	r2, [pc, #432]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	e00b      	b.n	80035a8 <HAL_RCC_OscConfig+0xb0>
 8003590:	4b69      	ldr	r3, [pc, #420]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a68      	ldr	r2, [pc, #416]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003596:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800359a:	6013      	str	r3, [r2, #0]
 800359c:	4b66      	ldr	r3, [pc, #408]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a65      	ldr	r2, [pc, #404]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 80035a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d013      	beq.n	80035d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b0:	f7fe fa8a 	bl	8001ac8 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b8:	f7fe fa86 	bl	8001ac8 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b64      	cmp	r3, #100	@ 0x64
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e207      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ca:	4b5b      	ldr	r3, [pc, #364]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0f0      	beq.n	80035b8 <HAL_RCC_OscConfig+0xc0>
 80035d6:	e014      	b.n	8003602 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d8:	f7fe fa76 	bl	8001ac8 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035e0:	f7fe fa72 	bl	8001ac8 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b64      	cmp	r3, #100	@ 0x64
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e1f3      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f2:	4b51      	ldr	r3, [pc, #324]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f0      	bne.n	80035e0 <HAL_RCC_OscConfig+0xe8>
 80035fe:	e000      	b.n	8003602 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d063      	beq.n	80036d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800360e:	4b4a      	ldr	r3, [pc, #296]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 030c 	and.w	r3, r3, #12
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00b      	beq.n	8003632 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800361a:	4b47      	ldr	r3, [pc, #284]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003622:	2b08      	cmp	r3, #8
 8003624:	d11c      	bne.n	8003660 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003626:	4b44      	ldr	r3, [pc, #272]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d116      	bne.n	8003660 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003632:	4b41      	ldr	r3, [pc, #260]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d005      	beq.n	800364a <HAL_RCC_OscConfig+0x152>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d001      	beq.n	800364a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e1c7      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800364a:	4b3b      	ldr	r3, [pc, #236]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4937      	ldr	r1, [pc, #220]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 800365a:	4313      	orrs	r3, r2
 800365c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800365e:	e03a      	b.n	80036d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d020      	beq.n	80036aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003668:	4b34      	ldr	r3, [pc, #208]	@ (800373c <HAL_RCC_OscConfig+0x244>)
 800366a:	2201      	movs	r2, #1
 800366c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366e:	f7fe fa2b 	bl	8001ac8 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003676:	f7fe fa27 	bl	8001ac8 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e1a8      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003688:	4b2b      	ldr	r3, [pc, #172]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0f0      	beq.n	8003676 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003694:	4b28      	ldr	r3, [pc, #160]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	4925      	ldr	r1, [pc, #148]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	600b      	str	r3, [r1, #0]
 80036a8:	e015      	b.n	80036d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036aa:	4b24      	ldr	r3, [pc, #144]	@ (800373c <HAL_RCC_OscConfig+0x244>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b0:	f7fe fa0a 	bl	8001ac8 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b8:	f7fe fa06 	bl	8001ac8 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e187      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f0      	bne.n	80036b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d036      	beq.n	8003750 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d016      	beq.n	8003718 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ea:	4b15      	ldr	r3, [pc, #84]	@ (8003740 <HAL_RCC_OscConfig+0x248>)
 80036ec:	2201      	movs	r2, #1
 80036ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f0:	f7fe f9ea 	bl	8001ac8 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f8:	f7fe f9e6 	bl	8001ac8 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e167      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800370a:	4b0b      	ldr	r3, [pc, #44]	@ (8003738 <HAL_RCC_OscConfig+0x240>)
 800370c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0f0      	beq.n	80036f8 <HAL_RCC_OscConfig+0x200>
 8003716:	e01b      	b.n	8003750 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003718:	4b09      	ldr	r3, [pc, #36]	@ (8003740 <HAL_RCC_OscConfig+0x248>)
 800371a:	2200      	movs	r2, #0
 800371c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800371e:	f7fe f9d3 	bl	8001ac8 <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003724:	e00e      	b.n	8003744 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003726:	f7fe f9cf 	bl	8001ac8 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d907      	bls.n	8003744 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e150      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
 8003738:	40023800 	.word	0x40023800
 800373c:	42470000 	.word	0x42470000
 8003740:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003744:	4b88      	ldr	r3, [pc, #544]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003746:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1ea      	bne.n	8003726 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 8097 	beq.w	800388c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800375e:	2300      	movs	r3, #0
 8003760:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003762:	4b81      	ldr	r3, [pc, #516]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10f      	bne.n	800378e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800376e:	2300      	movs	r3, #0
 8003770:	60bb      	str	r3, [r7, #8]
 8003772:	4b7d      	ldr	r3, [pc, #500]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003776:	4a7c      	ldr	r2, [pc, #496]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800377c:	6413      	str	r3, [r2, #64]	@ 0x40
 800377e:	4b7a      	ldr	r3, [pc, #488]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003786:	60bb      	str	r3, [r7, #8]
 8003788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800378a:	2301      	movs	r3, #1
 800378c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378e:	4b77      	ldr	r3, [pc, #476]	@ (800396c <HAL_RCC_OscConfig+0x474>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d118      	bne.n	80037cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800379a:	4b74      	ldr	r3, [pc, #464]	@ (800396c <HAL_RCC_OscConfig+0x474>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a73      	ldr	r2, [pc, #460]	@ (800396c <HAL_RCC_OscConfig+0x474>)
 80037a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037a6:	f7fe f98f 	bl	8001ac8 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ae:	f7fe f98b 	bl	8001ac8 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e10c      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c0:	4b6a      	ldr	r3, [pc, #424]	@ (800396c <HAL_RCC_OscConfig+0x474>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0f0      	beq.n	80037ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d106      	bne.n	80037e2 <HAL_RCC_OscConfig+0x2ea>
 80037d4:	4b64      	ldr	r3, [pc, #400]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 80037d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d8:	4a63      	ldr	r2, [pc, #396]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	6713      	str	r3, [r2, #112]	@ 0x70
 80037e0:	e01c      	b.n	800381c <HAL_RCC_OscConfig+0x324>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2b05      	cmp	r3, #5
 80037e8:	d10c      	bne.n	8003804 <HAL_RCC_OscConfig+0x30c>
 80037ea:	4b5f      	ldr	r3, [pc, #380]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ee:	4a5e      	ldr	r2, [pc, #376]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 80037f0:	f043 0304 	orr.w	r3, r3, #4
 80037f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80037f6:	4b5c      	ldr	r3, [pc, #368]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 80037f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037fa:	4a5b      	ldr	r2, [pc, #364]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 80037fc:	f043 0301 	orr.w	r3, r3, #1
 8003800:	6713      	str	r3, [r2, #112]	@ 0x70
 8003802:	e00b      	b.n	800381c <HAL_RCC_OscConfig+0x324>
 8003804:	4b58      	ldr	r3, [pc, #352]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003808:	4a57      	ldr	r2, [pc, #348]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 800380a:	f023 0301 	bic.w	r3, r3, #1
 800380e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003810:	4b55      	ldr	r3, [pc, #340]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003814:	4a54      	ldr	r2, [pc, #336]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003816:	f023 0304 	bic.w	r3, r3, #4
 800381a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d015      	beq.n	8003850 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003824:	f7fe f950 	bl	8001ac8 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382a:	e00a      	b.n	8003842 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382c:	f7fe f94c 	bl	8001ac8 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800383a:	4293      	cmp	r3, r2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e0cb      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003842:	4b49      	ldr	r3, [pc, #292]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0ee      	beq.n	800382c <HAL_RCC_OscConfig+0x334>
 800384e:	e014      	b.n	800387a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003850:	f7fe f93a 	bl	8001ac8 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003856:	e00a      	b.n	800386e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003858:	f7fe f936 	bl	8001ac8 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003866:	4293      	cmp	r3, r2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e0b5      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386e:	4b3e      	ldr	r3, [pc, #248]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1ee      	bne.n	8003858 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800387a:	7dfb      	ldrb	r3, [r7, #23]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d105      	bne.n	800388c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003880:	4b39      	ldr	r3, [pc, #228]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003884:	4a38      	ldr	r2, [pc, #224]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003886:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800388a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 80a1 	beq.w	80039d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003896:	4b34      	ldr	r3, [pc, #208]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d05c      	beq.n	800395c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d141      	bne.n	800392e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038aa:	4b31      	ldr	r3, [pc, #196]	@ (8003970 <HAL_RCC_OscConfig+0x478>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b0:	f7fe f90a 	bl	8001ac8 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b8:	f7fe f906 	bl	8001ac8 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e087      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ca:	4b27      	ldr	r3, [pc, #156]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1f0      	bne.n	80038b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69da      	ldr	r2, [r3, #28]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e4:	019b      	lsls	r3, r3, #6
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ec:	085b      	lsrs	r3, r3, #1
 80038ee:	3b01      	subs	r3, #1
 80038f0:	041b      	lsls	r3, r3, #16
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f8:	061b      	lsls	r3, r3, #24
 80038fa:	491b      	ldr	r1, [pc, #108]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003900:	4b1b      	ldr	r3, [pc, #108]	@ (8003970 <HAL_RCC_OscConfig+0x478>)
 8003902:	2201      	movs	r2, #1
 8003904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003906:	f7fe f8df 	bl	8001ac8 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390c:	e008      	b.n	8003920 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800390e:	f7fe f8db 	bl	8001ac8 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e05c      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003920:	4b11      	ldr	r3, [pc, #68]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0f0      	beq.n	800390e <HAL_RCC_OscConfig+0x416>
 800392c:	e054      	b.n	80039d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392e:	4b10      	ldr	r3, [pc, #64]	@ (8003970 <HAL_RCC_OscConfig+0x478>)
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003934:	f7fe f8c8 	bl	8001ac8 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393c:	f7fe f8c4 	bl	8001ac8 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e045      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394e:	4b06      	ldr	r3, [pc, #24]	@ (8003968 <HAL_RCC_OscConfig+0x470>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0x444>
 800395a:	e03d      	b.n	80039d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d107      	bne.n	8003974 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e038      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
 8003968:	40023800 	.word	0x40023800
 800396c:	40007000 	.word	0x40007000
 8003970:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003974:	4b1b      	ldr	r3, [pc, #108]	@ (80039e4 <HAL_RCC_OscConfig+0x4ec>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d028      	beq.n	80039d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800398c:	429a      	cmp	r2, r3
 800398e:	d121      	bne.n	80039d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399a:	429a      	cmp	r2, r3
 800399c:	d11a      	bne.n	80039d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80039a4:	4013      	ands	r3, r2
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d111      	bne.n	80039d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ba:	085b      	lsrs	r3, r3, #1
 80039bc:	3b01      	subs	r3, #1
 80039be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d107      	bne.n	80039d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d001      	beq.n	80039d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40023800 	.word	0x40023800

080039e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0cc      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039fc:	4b68      	ldr	r3, [pc, #416]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d90c      	bls.n	8003a24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0a:	4b65      	ldr	r3, [pc, #404]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a12:	4b63      	ldr	r3, [pc, #396]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0b8      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d020      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a3c:	4b59      	ldr	r3, [pc, #356]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	4a58      	ldr	r2, [pc, #352]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0308 	and.w	r3, r3, #8
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a54:	4b53      	ldr	r3, [pc, #332]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	4a52      	ldr	r2, [pc, #328]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a60:	4b50      	ldr	r3, [pc, #320]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	494d      	ldr	r1, [pc, #308]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d044      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d107      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a86:	4b47      	ldr	r3, [pc, #284]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d119      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e07f      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d003      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	d107      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d109      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e06f      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e067      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ac6:	4b37      	ldr	r3, [pc, #220]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f023 0203 	bic.w	r2, r3, #3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	4934      	ldr	r1, [pc, #208]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ad8:	f7fd fff6 	bl	8001ac8 <HAL_GetTick>
 8003adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ade:	e00a      	b.n	8003af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae0:	f7fd fff2 	bl	8001ac8 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e04f      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af6:	4b2b      	ldr	r3, [pc, #172]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 020c 	and.w	r2, r3, #12
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d1eb      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b08:	4b25      	ldr	r3, [pc, #148]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d20c      	bcs.n	8003b30 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b16:	4b22      	ldr	r3, [pc, #136]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1e:	4b20      	ldr	r3, [pc, #128]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0307 	and.w	r3, r3, #7
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e032      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b3c:	4b19      	ldr	r3, [pc, #100]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	4916      	ldr	r1, [pc, #88]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d009      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b5a:	4b12      	ldr	r3, [pc, #72]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	490e      	ldr	r1, [pc, #56]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b6e:	f000 f821 	bl	8003bb4 <HAL_RCC_GetSysClockFreq>
 8003b72:	4602      	mov	r2, r0
 8003b74:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	490a      	ldr	r1, [pc, #40]	@ (8003ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b80:	5ccb      	ldrb	r3, [r1, r3]
 8003b82:	fa22 f303 	lsr.w	r3, r2, r3
 8003b86:	4a09      	ldr	r2, [pc, #36]	@ (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b8a:	4b09      	ldr	r3, [pc, #36]	@ (8003bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fd ff56 	bl	8001a40 <HAL_InitTick>

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40023c00 	.word	0x40023c00
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	0800bc70 	.word	0x0800bc70
 8003bac:	20000000 	.word	0x20000000
 8003bb0:	20000004 	.word	0x20000004

08003bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb8:	b094      	sub	sp, #80	@ 0x50
 8003bba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bcc:	4b79      	ldr	r3, [pc, #484]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 030c 	and.w	r3, r3, #12
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d00d      	beq.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x40>
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	f200 80e1 	bhi.w	8003da0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d002      	beq.n	8003be8 <HAL_RCC_GetSysClockFreq+0x34>
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d003      	beq.n	8003bee <HAL_RCC_GetSysClockFreq+0x3a>
 8003be6:	e0db      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003be8:	4b73      	ldr	r3, [pc, #460]	@ (8003db8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bec:	e0db      	b.n	8003da6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bee:	4b73      	ldr	r3, [pc, #460]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0x208>)
 8003bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bf2:	e0d8      	b.n	8003da6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bf4:	4b6f      	ldr	r3, [pc, #444]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bfc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bfe:	4b6d      	ldr	r3, [pc, #436]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d063      	beq.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c0a:	4b6a      	ldr	r3, [pc, #424]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	099b      	lsrs	r3, r3, #6
 8003c10:	2200      	movs	r2, #0
 8003c12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c14:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c1e:	2300      	movs	r3, #0
 8003c20:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c26:	4622      	mov	r2, r4
 8003c28:	462b      	mov	r3, r5
 8003c2a:	f04f 0000 	mov.w	r0, #0
 8003c2e:	f04f 0100 	mov.w	r1, #0
 8003c32:	0159      	lsls	r1, r3, #5
 8003c34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c38:	0150      	lsls	r0, r2, #5
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4621      	mov	r1, r4
 8003c40:	1a51      	subs	r1, r2, r1
 8003c42:	6139      	str	r1, [r7, #16]
 8003c44:	4629      	mov	r1, r5
 8003c46:	eb63 0301 	sbc.w	r3, r3, r1
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c58:	4659      	mov	r1, fp
 8003c5a:	018b      	lsls	r3, r1, #6
 8003c5c:	4651      	mov	r1, sl
 8003c5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c62:	4651      	mov	r1, sl
 8003c64:	018a      	lsls	r2, r1, #6
 8003c66:	4651      	mov	r1, sl
 8003c68:	ebb2 0801 	subs.w	r8, r2, r1
 8003c6c:	4659      	mov	r1, fp
 8003c6e:	eb63 0901 	sbc.w	r9, r3, r1
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	f04f 0300 	mov.w	r3, #0
 8003c7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c86:	4690      	mov	r8, r2
 8003c88:	4699      	mov	r9, r3
 8003c8a:	4623      	mov	r3, r4
 8003c8c:	eb18 0303 	adds.w	r3, r8, r3
 8003c90:	60bb      	str	r3, [r7, #8]
 8003c92:	462b      	mov	r3, r5
 8003c94:	eb49 0303 	adc.w	r3, r9, r3
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ca6:	4629      	mov	r1, r5
 8003ca8:	024b      	lsls	r3, r1, #9
 8003caa:	4621      	mov	r1, r4
 8003cac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cb0:	4621      	mov	r1, r4
 8003cb2:	024a      	lsls	r2, r1, #9
 8003cb4:	4610      	mov	r0, r2
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cba:	2200      	movs	r2, #0
 8003cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cc4:	f7fc ff78 	bl	8000bb8 <__aeabi_uldivmod>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4613      	mov	r3, r2
 8003cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cd0:	e058      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cd2:	4b38      	ldr	r3, [pc, #224]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	099b      	lsrs	r3, r3, #6
 8003cd8:	2200      	movs	r2, #0
 8003cda:	4618      	mov	r0, r3
 8003cdc:	4611      	mov	r1, r2
 8003cde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ce2:	623b      	str	r3, [r7, #32]
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ce8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cec:	4642      	mov	r2, r8
 8003cee:	464b      	mov	r3, r9
 8003cf0:	f04f 0000 	mov.w	r0, #0
 8003cf4:	f04f 0100 	mov.w	r1, #0
 8003cf8:	0159      	lsls	r1, r3, #5
 8003cfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cfe:	0150      	lsls	r0, r2, #5
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	4641      	mov	r1, r8
 8003d06:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d0a:	4649      	mov	r1, r9
 8003d0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	f04f 0300 	mov.w	r3, #0
 8003d18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d24:	ebb2 040a 	subs.w	r4, r2, sl
 8003d28:	eb63 050b 	sbc.w	r5, r3, fp
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	f04f 0300 	mov.w	r3, #0
 8003d34:	00eb      	lsls	r3, r5, #3
 8003d36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d3a:	00e2      	lsls	r2, r4, #3
 8003d3c:	4614      	mov	r4, r2
 8003d3e:	461d      	mov	r5, r3
 8003d40:	4643      	mov	r3, r8
 8003d42:	18e3      	adds	r3, r4, r3
 8003d44:	603b      	str	r3, [r7, #0]
 8003d46:	464b      	mov	r3, r9
 8003d48:	eb45 0303 	adc.w	r3, r5, r3
 8003d4c:	607b      	str	r3, [r7, #4]
 8003d4e:	f04f 0200 	mov.w	r2, #0
 8003d52:	f04f 0300 	mov.w	r3, #0
 8003d56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d5a:	4629      	mov	r1, r5
 8003d5c:	028b      	lsls	r3, r1, #10
 8003d5e:	4621      	mov	r1, r4
 8003d60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d64:	4621      	mov	r1, r4
 8003d66:	028a      	lsls	r2, r1, #10
 8003d68:	4610      	mov	r0, r2
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d6e:	2200      	movs	r2, #0
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	61fa      	str	r2, [r7, #28]
 8003d74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d78:	f7fc ff1e 	bl	8000bb8 <__aeabi_uldivmod>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4613      	mov	r3, r2
 8003d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d84:	4b0b      	ldr	r3, [pc, #44]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	0c1b      	lsrs	r3, r3, #16
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	3301      	adds	r3, #1
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003d94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d9e:	e002      	b.n	8003da6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003da0:	4b05      	ldr	r3, [pc, #20]	@ (8003db8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003da2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003da4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003da6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3750      	adds	r7, #80	@ 0x50
 8003dac:	46bd      	mov	sp, r7
 8003dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003db2:	bf00      	nop
 8003db4:	40023800 	.word	0x40023800
 8003db8:	00f42400 	.word	0x00f42400
 8003dbc:	007a1200 	.word	0x007a1200

08003dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dc4:	4b03      	ldr	r3, [pc, #12]	@ (8003dd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	20000000 	.word	0x20000000

08003dd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e041      	b.n	8003e6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d106      	bne.n	8003e04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7fd fbe0 	bl	80015c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2202      	movs	r2, #2
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3304      	adds	r3, #4
 8003e14:	4619      	mov	r1, r3
 8003e16:	4610      	mov	r0, r2
 8003e18:	f000 fd2c 	bl	8004874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b082      	sub	sp, #8
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e041      	b.n	8003f0c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d106      	bne.n	8003ea2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f839 	bl	8003f14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	4610      	mov	r0, r2
 8003eb6:	f000 fcdd 	bl	8004874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d109      	bne.n	8003f4c <HAL_TIM_PWM_Start+0x24>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	bf14      	ite	ne
 8003f44:	2301      	movne	r3, #1
 8003f46:	2300      	moveq	r3, #0
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	e022      	b.n	8003f92 <HAL_TIM_PWM_Start+0x6a>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	2b04      	cmp	r3, #4
 8003f50:	d109      	bne.n	8003f66 <HAL_TIM_PWM_Start+0x3e>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	bf14      	ite	ne
 8003f5e:	2301      	movne	r3, #1
 8003f60:	2300      	moveq	r3, #0
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	e015      	b.n	8003f92 <HAL_TIM_PWM_Start+0x6a>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d109      	bne.n	8003f80 <HAL_TIM_PWM_Start+0x58>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	bf14      	ite	ne
 8003f78:	2301      	movne	r3, #1
 8003f7a:	2300      	moveq	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	e008      	b.n	8003f92 <HAL_TIM_PWM_Start+0x6a>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	bf14      	ite	ne
 8003f8c:	2301      	movne	r3, #1
 8003f8e:	2300      	moveq	r3, #0
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e068      	b.n	800406c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d104      	bne.n	8003faa <HAL_TIM_PWM_Start+0x82>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fa8:	e013      	b.n	8003fd2 <HAL_TIM_PWM_Start+0xaa>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d104      	bne.n	8003fba <HAL_TIM_PWM_Start+0x92>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fb8:	e00b      	b.n	8003fd2 <HAL_TIM_PWM_Start+0xaa>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d104      	bne.n	8003fca <HAL_TIM_PWM_Start+0xa2>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fc8:	e003      	b.n	8003fd2 <HAL_TIM_PWM_Start+0xaa>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2202      	movs	r2, #2
 8003fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	6839      	ldr	r1, [r7, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fefc 	bl	8004dd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a23      	ldr	r2, [pc, #140]	@ (8004074 <HAL_TIM_PWM_Start+0x14c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d107      	bne.n	8003ffa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ff8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a1d      	ldr	r2, [pc, #116]	@ (8004074 <HAL_TIM_PWM_Start+0x14c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d018      	beq.n	8004036 <HAL_TIM_PWM_Start+0x10e>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800400c:	d013      	beq.n	8004036 <HAL_TIM_PWM_Start+0x10e>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a19      	ldr	r2, [pc, #100]	@ (8004078 <HAL_TIM_PWM_Start+0x150>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00e      	beq.n	8004036 <HAL_TIM_PWM_Start+0x10e>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a17      	ldr	r2, [pc, #92]	@ (800407c <HAL_TIM_PWM_Start+0x154>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d009      	beq.n	8004036 <HAL_TIM_PWM_Start+0x10e>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a16      	ldr	r2, [pc, #88]	@ (8004080 <HAL_TIM_PWM_Start+0x158>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d004      	beq.n	8004036 <HAL_TIM_PWM_Start+0x10e>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a14      	ldr	r2, [pc, #80]	@ (8004084 <HAL_TIM_PWM_Start+0x15c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d111      	bne.n	800405a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2b06      	cmp	r3, #6
 8004046:	d010      	beq.n	800406a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004058:	e007      	b.n	800406a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f042 0201 	orr.w	r2, r2, #1
 8004068:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40010000 	.word	0x40010000
 8004078:	40000400 	.word	0x40000400
 800407c:	40000800 	.word	0x40000800
 8004080:	40000c00 	.word	0x40000c00
 8004084:	40014000 	.word	0x40014000

08004088 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e097      	b.n	80041cc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d106      	bne.n	80040b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7fd f9fd 	bl	80014b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2202      	movs	r2, #2
 80040ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6812      	ldr	r2, [r2, #0]
 80040c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040cc:	f023 0307 	bic.w	r3, r3, #7
 80040d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	3304      	adds	r3, #4
 80040da:	4619      	mov	r1, r3
 80040dc:	4610      	mov	r0, r2
 80040de:	f000 fbc9 	bl	8004874 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	4313      	orrs	r3, r2
 8004102:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800410a:	f023 0303 	bic.w	r3, r3, #3
 800410e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	021b      	lsls	r3, r3, #8
 800411a:	4313      	orrs	r3, r2
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4313      	orrs	r3, r2
 8004120:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004128:	f023 030c 	bic.w	r3, r3, #12
 800412c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004134:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004138:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	021b      	lsls	r3, r3, #8
 8004144:	4313      	orrs	r3, r2
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	011a      	lsls	r2, r3, #4
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	031b      	lsls	r3, r3, #12
 8004158:	4313      	orrs	r3, r2
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004166:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800416e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	4313      	orrs	r3, r2
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80041ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80041fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d110      	bne.n	8004226 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004204:	7bfb      	ldrb	r3, [r7, #15]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d102      	bne.n	8004210 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800420a:	7b7b      	ldrb	r3, [r7, #13]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d001      	beq.n	8004214 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e089      	b.n	8004328 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004224:	e031      	b.n	800428a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b04      	cmp	r3, #4
 800422a:	d110      	bne.n	800424e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800422c:	7bbb      	ldrb	r3, [r7, #14]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d102      	bne.n	8004238 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004232:	7b3b      	ldrb	r3, [r7, #12]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d001      	beq.n	800423c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e075      	b.n	8004328 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800424c:	e01d      	b.n	800428a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d108      	bne.n	8004266 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004254:	7bbb      	ldrb	r3, [r7, #14]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d105      	bne.n	8004266 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800425a:	7b7b      	ldrb	r3, [r7, #13]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d102      	bne.n	8004266 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004260:	7b3b      	ldrb	r3, [r7, #12]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d001      	beq.n	800426a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e05e      	b.n	8004328 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2202      	movs	r2, #2
 800426e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2202      	movs	r2, #2
 8004276:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2202      	movs	r2, #2
 800427e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2202      	movs	r2, #2
 8004286:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	2b04      	cmp	r3, #4
 8004294:	d010      	beq.n	80042b8 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004296:	e01f      	b.n	80042d8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2201      	movs	r2, #1
 800429e:	2100      	movs	r1, #0
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 fd99 	bl	8004dd8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0202 	orr.w	r2, r2, #2
 80042b4:	60da      	str	r2, [r3, #12]
      break;
 80042b6:	e02e      	b.n	8004316 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2201      	movs	r2, #1
 80042be:	2104      	movs	r1, #4
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 fd89 	bl	8004dd8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f042 0204 	orr.w	r2, r2, #4
 80042d4:	60da      	str	r2, [r3, #12]
      break;
 80042d6:	e01e      	b.n	8004316 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2201      	movs	r2, #1
 80042de:	2100      	movs	r1, #0
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fd79 	bl	8004dd8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2201      	movs	r2, #1
 80042ec:	2104      	movs	r1, #4
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fd72 	bl	8004dd8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68da      	ldr	r2, [r3, #12]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0202 	orr.w	r2, r2, #2
 8004302:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0204 	orr.w	r2, r2, #4
 8004312:	60da      	str	r2, [r3, #12]
      break;
 8004314:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f042 0201 	orr.w	r2, r2, #1
 8004324:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d020      	beq.n	8004394 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d01b      	beq.n	8004394 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f06f 0202 	mvn.w	r2, #2
 8004364:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7fc fd94 	bl	8000ea8 <HAL_TIM_IC_CaptureCallback>
 8004380:	e005      	b.n	800438e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 fa57 	bl	8004836 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 fa5e 	bl	800484a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f003 0304 	and.w	r3, r3, #4
 800439a:	2b00      	cmp	r3, #0
 800439c:	d020      	beq.n	80043e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d01b      	beq.n	80043e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f06f 0204 	mvn.w	r2, #4
 80043b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2202      	movs	r2, #2
 80043b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7fc fd6e 	bl	8000ea8 <HAL_TIM_IC_CaptureCallback>
 80043cc:	e005      	b.n	80043da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 fa31 	bl	8004836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 fa38 	bl	800484a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f003 0308 	and.w	r3, r3, #8
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d020      	beq.n	800442c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f003 0308 	and.w	r3, r3, #8
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d01b      	beq.n	800442c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f06f 0208 	mvn.w	r2, #8
 80043fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2204      	movs	r2, #4
 8004402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	f003 0303 	and.w	r3, r3, #3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7fc fd48 	bl	8000ea8 <HAL_TIM_IC_CaptureCallback>
 8004418:	e005      	b.n	8004426 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fa0b 	bl	8004836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 fa12 	bl	800484a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f003 0310 	and.w	r3, r3, #16
 8004432:	2b00      	cmp	r3, #0
 8004434:	d020      	beq.n	8004478 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f003 0310 	and.w	r3, r3, #16
 800443c:	2b00      	cmp	r3, #0
 800443e:	d01b      	beq.n	8004478 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f06f 0210 	mvn.w	r2, #16
 8004448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2208      	movs	r2, #8
 800444e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7fc fd22 	bl	8000ea8 <HAL_TIM_IC_CaptureCallback>
 8004464:	e005      	b.n	8004472 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f9e5 	bl	8004836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f9ec 	bl	800484a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00c      	beq.n	800449c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	d007      	beq.n	800449c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f06f 0201 	mvn.w	r2, #1
 8004494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f9c3 	bl	8004822 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00c      	beq.n	80044c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d007      	beq.n	80044c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80044b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fd2a 	bl	8004f14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00c      	beq.n	80044e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d007      	beq.n	80044e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80044dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f9bd 	bl	800485e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f003 0320 	and.w	r3, r3, #32
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00c      	beq.n	8004508 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f003 0320 	and.w	r3, r3, #32
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d007      	beq.n	8004508 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f06f 0220 	mvn.w	r2, #32
 8004500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 fcfc 	bl	8004f00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004508:	bf00      	nop
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800451c:	2300      	movs	r3, #0
 800451e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004526:	2b01      	cmp	r3, #1
 8004528:	d101      	bne.n	800452e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800452a:	2302      	movs	r3, #2
 800452c:	e0ae      	b.n	800468c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b0c      	cmp	r3, #12
 800453a:	f200 809f 	bhi.w	800467c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800453e:	a201      	add	r2, pc, #4	@ (adr r2, 8004544 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004544:	08004579 	.word	0x08004579
 8004548:	0800467d 	.word	0x0800467d
 800454c:	0800467d 	.word	0x0800467d
 8004550:	0800467d 	.word	0x0800467d
 8004554:	080045b9 	.word	0x080045b9
 8004558:	0800467d 	.word	0x0800467d
 800455c:	0800467d 	.word	0x0800467d
 8004560:	0800467d 	.word	0x0800467d
 8004564:	080045fb 	.word	0x080045fb
 8004568:	0800467d 	.word	0x0800467d
 800456c:	0800467d 	.word	0x0800467d
 8004570:	0800467d 	.word	0x0800467d
 8004574:	0800463b 	.word	0x0800463b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68b9      	ldr	r1, [r7, #8]
 800457e:	4618      	mov	r0, r3
 8004580:	f000 fa04 	bl	800498c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699a      	ldr	r2, [r3, #24]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0208 	orr.w	r2, r2, #8
 8004592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	699a      	ldr	r2, [r3, #24]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0204 	bic.w	r2, r2, #4
 80045a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6999      	ldr	r1, [r3, #24]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	691a      	ldr	r2, [r3, #16]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	619a      	str	r2, [r3, #24]
      break;
 80045b6:	e064      	b.n	8004682 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68b9      	ldr	r1, [r7, #8]
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 fa4a 	bl	8004a58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699a      	ldr	r2, [r3, #24]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699a      	ldr	r2, [r3, #24]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6999      	ldr	r1, [r3, #24]
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	021a      	lsls	r2, r3, #8
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	619a      	str	r2, [r3, #24]
      break;
 80045f8:	e043      	b.n	8004682 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68b9      	ldr	r1, [r7, #8]
 8004600:	4618      	mov	r0, r3
 8004602:	f000 fa95 	bl	8004b30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	69da      	ldr	r2, [r3, #28]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f042 0208 	orr.w	r2, r2, #8
 8004614:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	69da      	ldr	r2, [r3, #28]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0204 	bic.w	r2, r2, #4
 8004624:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69d9      	ldr	r1, [r3, #28]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	691a      	ldr	r2, [r3, #16]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	61da      	str	r2, [r3, #28]
      break;
 8004638:	e023      	b.n	8004682 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68b9      	ldr	r1, [r7, #8]
 8004640:	4618      	mov	r0, r3
 8004642:	f000 fadf 	bl	8004c04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	69da      	ldr	r2, [r3, #28]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004654:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	69da      	ldr	r2, [r3, #28]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69d9      	ldr	r1, [r3, #28]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	021a      	lsls	r2, r3, #8
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	61da      	str	r2, [r3, #28]
      break;
 800467a:	e002      	b.n	8004682 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	75fb      	strb	r3, [r7, #23]
      break;
 8004680:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800468a:	7dfb      	ldrb	r3, [r7, #23]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3718      	adds	r7, #24
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d101      	bne.n	80046b0 <HAL_TIM_ConfigClockSource+0x1c>
 80046ac:	2302      	movs	r3, #2
 80046ae:	e0b4      	b.n	800481a <HAL_TIM_ConfigClockSource+0x186>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80046ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046e8:	d03e      	beq.n	8004768 <HAL_TIM_ConfigClockSource+0xd4>
 80046ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046ee:	f200 8087 	bhi.w	8004800 <HAL_TIM_ConfigClockSource+0x16c>
 80046f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046f6:	f000 8086 	beq.w	8004806 <HAL_TIM_ConfigClockSource+0x172>
 80046fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046fe:	d87f      	bhi.n	8004800 <HAL_TIM_ConfigClockSource+0x16c>
 8004700:	2b70      	cmp	r3, #112	@ 0x70
 8004702:	d01a      	beq.n	800473a <HAL_TIM_ConfigClockSource+0xa6>
 8004704:	2b70      	cmp	r3, #112	@ 0x70
 8004706:	d87b      	bhi.n	8004800 <HAL_TIM_ConfigClockSource+0x16c>
 8004708:	2b60      	cmp	r3, #96	@ 0x60
 800470a:	d050      	beq.n	80047ae <HAL_TIM_ConfigClockSource+0x11a>
 800470c:	2b60      	cmp	r3, #96	@ 0x60
 800470e:	d877      	bhi.n	8004800 <HAL_TIM_ConfigClockSource+0x16c>
 8004710:	2b50      	cmp	r3, #80	@ 0x50
 8004712:	d03c      	beq.n	800478e <HAL_TIM_ConfigClockSource+0xfa>
 8004714:	2b50      	cmp	r3, #80	@ 0x50
 8004716:	d873      	bhi.n	8004800 <HAL_TIM_ConfigClockSource+0x16c>
 8004718:	2b40      	cmp	r3, #64	@ 0x40
 800471a:	d058      	beq.n	80047ce <HAL_TIM_ConfigClockSource+0x13a>
 800471c:	2b40      	cmp	r3, #64	@ 0x40
 800471e:	d86f      	bhi.n	8004800 <HAL_TIM_ConfigClockSource+0x16c>
 8004720:	2b30      	cmp	r3, #48	@ 0x30
 8004722:	d064      	beq.n	80047ee <HAL_TIM_ConfigClockSource+0x15a>
 8004724:	2b30      	cmp	r3, #48	@ 0x30
 8004726:	d86b      	bhi.n	8004800 <HAL_TIM_ConfigClockSource+0x16c>
 8004728:	2b20      	cmp	r3, #32
 800472a:	d060      	beq.n	80047ee <HAL_TIM_ConfigClockSource+0x15a>
 800472c:	2b20      	cmp	r3, #32
 800472e:	d867      	bhi.n	8004800 <HAL_TIM_ConfigClockSource+0x16c>
 8004730:	2b00      	cmp	r3, #0
 8004732:	d05c      	beq.n	80047ee <HAL_TIM_ConfigClockSource+0x15a>
 8004734:	2b10      	cmp	r3, #16
 8004736:	d05a      	beq.n	80047ee <HAL_TIM_ConfigClockSource+0x15a>
 8004738:	e062      	b.n	8004800 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800474a:	f000 fb25 	bl	8004d98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800475c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	609a      	str	r2, [r3, #8]
      break;
 8004766:	e04f      	b.n	8004808 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004778:	f000 fb0e 	bl	8004d98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689a      	ldr	r2, [r3, #8]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800478a:	609a      	str	r2, [r3, #8]
      break;
 800478c:	e03c      	b.n	8004808 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800479a:	461a      	mov	r2, r3
 800479c:	f000 fa82 	bl	8004ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2150      	movs	r1, #80	@ 0x50
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 fadb 	bl	8004d62 <TIM_ITRx_SetConfig>
      break;
 80047ac:	e02c      	b.n	8004808 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ba:	461a      	mov	r2, r3
 80047bc:	f000 faa1 	bl	8004d02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2160      	movs	r1, #96	@ 0x60
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 facb 	bl	8004d62 <TIM_ITRx_SetConfig>
      break;
 80047cc:	e01c      	b.n	8004808 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047da:	461a      	mov	r2, r3
 80047dc:	f000 fa62 	bl	8004ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2140      	movs	r1, #64	@ 0x40
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fabb 	bl	8004d62 <TIM_ITRx_SetConfig>
      break;
 80047ec:	e00c      	b.n	8004808 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4619      	mov	r1, r3
 80047f8:	4610      	mov	r0, r2
 80047fa:	f000 fab2 	bl	8004d62 <TIM_ITRx_SetConfig>
      break;
 80047fe:	e003      	b.n	8004808 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	73fb      	strb	r3, [r7, #15]
      break;
 8004804:	e000      	b.n	8004808 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004806:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004818:	7bfb      	ldrb	r3, [r7, #15]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
	...

08004874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a3a      	ldr	r2, [pc, #232]	@ (8004970 <TIM_Base_SetConfig+0xfc>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d00f      	beq.n	80048ac <TIM_Base_SetConfig+0x38>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004892:	d00b      	beq.n	80048ac <TIM_Base_SetConfig+0x38>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a37      	ldr	r2, [pc, #220]	@ (8004974 <TIM_Base_SetConfig+0x100>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d007      	beq.n	80048ac <TIM_Base_SetConfig+0x38>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a36      	ldr	r2, [pc, #216]	@ (8004978 <TIM_Base_SetConfig+0x104>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d003      	beq.n	80048ac <TIM_Base_SetConfig+0x38>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a35      	ldr	r2, [pc, #212]	@ (800497c <TIM_Base_SetConfig+0x108>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d108      	bne.n	80048be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a2b      	ldr	r2, [pc, #172]	@ (8004970 <TIM_Base_SetConfig+0xfc>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d01b      	beq.n	80048fe <TIM_Base_SetConfig+0x8a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048cc:	d017      	beq.n	80048fe <TIM_Base_SetConfig+0x8a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a28      	ldr	r2, [pc, #160]	@ (8004974 <TIM_Base_SetConfig+0x100>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d013      	beq.n	80048fe <TIM_Base_SetConfig+0x8a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a27      	ldr	r2, [pc, #156]	@ (8004978 <TIM_Base_SetConfig+0x104>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d00f      	beq.n	80048fe <TIM_Base_SetConfig+0x8a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a26      	ldr	r2, [pc, #152]	@ (800497c <TIM_Base_SetConfig+0x108>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00b      	beq.n	80048fe <TIM_Base_SetConfig+0x8a>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a25      	ldr	r2, [pc, #148]	@ (8004980 <TIM_Base_SetConfig+0x10c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d007      	beq.n	80048fe <TIM_Base_SetConfig+0x8a>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a24      	ldr	r2, [pc, #144]	@ (8004984 <TIM_Base_SetConfig+0x110>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d003      	beq.n	80048fe <TIM_Base_SetConfig+0x8a>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a23      	ldr	r2, [pc, #140]	@ (8004988 <TIM_Base_SetConfig+0x114>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d108      	bne.n	8004910 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	4313      	orrs	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a0e      	ldr	r2, [pc, #56]	@ (8004970 <TIM_Base_SetConfig+0xfc>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d103      	bne.n	8004944 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	691a      	ldr	r2, [r3, #16]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b01      	cmp	r3, #1
 8004954:	d105      	bne.n	8004962 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f023 0201 	bic.w	r2, r3, #1
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	611a      	str	r2, [r3, #16]
  }
}
 8004962:	bf00      	nop
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	40010000 	.word	0x40010000
 8004974:	40000400 	.word	0x40000400
 8004978:	40000800 	.word	0x40000800
 800497c:	40000c00 	.word	0x40000c00
 8004980:	40014000 	.word	0x40014000
 8004984:	40014400 	.word	0x40014400
 8004988:	40014800 	.word	0x40014800

0800498c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	f023 0201 	bic.w	r2, r3, #1
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 0303 	bic.w	r3, r3, #3
 80049c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f023 0302 	bic.w	r3, r3, #2
 80049d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a1c      	ldr	r2, [pc, #112]	@ (8004a54 <TIM_OC1_SetConfig+0xc8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d10c      	bne.n	8004a02 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f023 0308 	bic.w	r3, r3, #8
 80049ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f023 0304 	bic.w	r3, r3, #4
 8004a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a13      	ldr	r2, [pc, #76]	@ (8004a54 <TIM_OC1_SetConfig+0xc8>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d111      	bne.n	8004a2e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	621a      	str	r2, [r3, #32]
}
 8004a48:	bf00      	nop
 8004a4a:	371c      	adds	r7, #28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	40010000 	.word	0x40010000

08004a58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	f023 0210 	bic.w	r2, r3, #16
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	021b      	lsls	r3, r3, #8
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f023 0320 	bic.w	r3, r3, #32
 8004aa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	011b      	lsls	r3, r3, #4
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a1e      	ldr	r2, [pc, #120]	@ (8004b2c <TIM_OC2_SetConfig+0xd4>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d10d      	bne.n	8004ad4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ad2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a15      	ldr	r2, [pc, #84]	@ (8004b2c <TIM_OC2_SetConfig+0xd4>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d113      	bne.n	8004b04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ae2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004aea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	621a      	str	r2, [r3, #32]
}
 8004b1e:	bf00      	nop
 8004b20:	371c      	adds	r7, #28
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	40010000 	.word	0x40010000

08004b30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f023 0303 	bic.w	r3, r3, #3
 8004b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	021b      	lsls	r3, r3, #8
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a1d      	ldr	r2, [pc, #116]	@ (8004c00 <TIM_OC3_SetConfig+0xd0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d10d      	bne.n	8004baa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	021b      	lsls	r3, r3, #8
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a14      	ldr	r2, [pc, #80]	@ (8004c00 <TIM_OC3_SetConfig+0xd0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d113      	bne.n	8004bda <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004bb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	621a      	str	r2, [r3, #32]
}
 8004bf4:	bf00      	nop
 8004bf6:	371c      	adds	r7, #28
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	40010000 	.word	0x40010000

08004c04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	021b      	lsls	r3, r3, #8
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	031b      	lsls	r3, r3, #12
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a10      	ldr	r2, [pc, #64]	@ (8004ca0 <TIM_OC4_SetConfig+0x9c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d109      	bne.n	8004c78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	019b      	lsls	r3, r3, #6
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	621a      	str	r2, [r3, #32]
}
 8004c92:	bf00      	nop
 8004c94:	371c      	adds	r7, #28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40010000 	.word	0x40010000

08004ca4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b087      	sub	sp, #28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	f023 0201 	bic.w	r2, r3, #1
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f023 030a 	bic.w	r3, r3, #10
 8004ce0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	621a      	str	r2, [r3, #32]
}
 8004cf6:	bf00      	nop
 8004cf8:	371c      	adds	r7, #28
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b087      	sub	sp, #28
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	f023 0210 	bic.w	r2, r3, #16
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	031b      	lsls	r3, r3, #12
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	011b      	lsls	r3, r3, #4
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	621a      	str	r2, [r3, #32]
}
 8004d56:	bf00      	nop
 8004d58:	371c      	adds	r7, #28
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b085      	sub	sp, #20
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
 8004d6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f043 0307 	orr.w	r3, r3, #7
 8004d84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	609a      	str	r2, [r3, #8]
}
 8004d8c:	bf00      	nop
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
 8004da4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004db2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	021a      	lsls	r2, r3, #8
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	609a      	str	r2, [r3, #8]
}
 8004dcc:	bf00      	nop
 8004dce:	371c      	adds	r7, #28
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f003 031f 	and.w	r3, r3, #31
 8004dea:	2201      	movs	r2, #1
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a1a      	ldr	r2, [r3, #32]
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	401a      	ands	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a1a      	ldr	r2, [r3, #32]
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f003 031f 	and.w	r3, r3, #31
 8004e0a:	6879      	ldr	r1, [r7, #4]
 8004e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e10:	431a      	orrs	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	621a      	str	r2, [r3, #32]
}
 8004e16:	bf00      	nop
 8004e18:	371c      	adds	r7, #28
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
	...

08004e24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d101      	bne.n	8004e3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	e050      	b.n	8004ede <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a1c      	ldr	r2, [pc, #112]	@ (8004eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d018      	beq.n	8004eb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e88:	d013      	beq.n	8004eb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a18      	ldr	r2, [pc, #96]	@ (8004ef0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d00e      	beq.n	8004eb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a16      	ldr	r2, [pc, #88]	@ (8004ef4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d009      	beq.n	8004eb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a15      	ldr	r2, [pc, #84]	@ (8004ef8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d004      	beq.n	8004eb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a13      	ldr	r2, [pc, #76]	@ (8004efc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d10c      	bne.n	8004ecc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40010000 	.word	0x40010000
 8004ef0:	40000400 	.word	0x40000400
 8004ef4:	40000800 	.word	0x40000800
 8004ef8:	40000c00 	.word	0x40000c00
 8004efc:	40014000 	.word	0x40014000

08004f00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f28:	b084      	sub	sp, #16
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b084      	sub	sp, #16
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
 8004f32:	f107 001c 	add.w	r0, r7, #28
 8004f36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f3a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d123      	bne.n	8004f8a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f46:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004f56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f6a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d105      	bne.n	8004f7e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f001 fae8 	bl	8006554 <USB_CoreReset>
 8004f84:	4603      	mov	r3, r0
 8004f86:	73fb      	strb	r3, [r7, #15]
 8004f88:	e01b      	b.n	8004fc2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f001 fadc 	bl	8006554 <USB_CoreReset>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004fa0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d106      	bne.n	8004fb6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	639a      	str	r2, [r3, #56]	@ 0x38
 8004fb4:	e005      	b.n	8004fc2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004fc2:	7fbb      	ldrb	r3, [r7, #30]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d10b      	bne.n	8004fe0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f043 0206 	orr.w	r2, r3, #6
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f043 0220 	orr.w	r2, r3, #32
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fec:	b004      	add	sp, #16
 8004fee:	4770      	bx	lr

08004ff0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004ffe:	79fb      	ldrb	r3, [r7, #7]
 8005000:	2b02      	cmp	r3, #2
 8005002:	d165      	bne.n	80050d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	4a41      	ldr	r2, [pc, #260]	@ (800510c <USB_SetTurnaroundTime+0x11c>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d906      	bls.n	800501a <USB_SetTurnaroundTime+0x2a>
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	4a40      	ldr	r2, [pc, #256]	@ (8005110 <USB_SetTurnaroundTime+0x120>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d202      	bcs.n	800501a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005014:	230f      	movs	r3, #15
 8005016:	617b      	str	r3, [r7, #20]
 8005018:	e062      	b.n	80050e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	4a3c      	ldr	r2, [pc, #240]	@ (8005110 <USB_SetTurnaroundTime+0x120>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d306      	bcc.n	8005030 <USB_SetTurnaroundTime+0x40>
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	4a3b      	ldr	r2, [pc, #236]	@ (8005114 <USB_SetTurnaroundTime+0x124>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d202      	bcs.n	8005030 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800502a:	230e      	movs	r3, #14
 800502c:	617b      	str	r3, [r7, #20]
 800502e:	e057      	b.n	80050e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	4a38      	ldr	r2, [pc, #224]	@ (8005114 <USB_SetTurnaroundTime+0x124>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d306      	bcc.n	8005046 <USB_SetTurnaroundTime+0x56>
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	4a37      	ldr	r2, [pc, #220]	@ (8005118 <USB_SetTurnaroundTime+0x128>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d202      	bcs.n	8005046 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005040:	230d      	movs	r3, #13
 8005042:	617b      	str	r3, [r7, #20]
 8005044:	e04c      	b.n	80050e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	4a33      	ldr	r2, [pc, #204]	@ (8005118 <USB_SetTurnaroundTime+0x128>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d306      	bcc.n	800505c <USB_SetTurnaroundTime+0x6c>
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	4a32      	ldr	r2, [pc, #200]	@ (800511c <USB_SetTurnaroundTime+0x12c>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d802      	bhi.n	800505c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005056:	230c      	movs	r3, #12
 8005058:	617b      	str	r3, [r7, #20]
 800505a:	e041      	b.n	80050e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	4a2f      	ldr	r2, [pc, #188]	@ (800511c <USB_SetTurnaroundTime+0x12c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d906      	bls.n	8005072 <USB_SetTurnaroundTime+0x82>
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	4a2e      	ldr	r2, [pc, #184]	@ (8005120 <USB_SetTurnaroundTime+0x130>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d802      	bhi.n	8005072 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800506c:	230b      	movs	r3, #11
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	e036      	b.n	80050e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	4a2a      	ldr	r2, [pc, #168]	@ (8005120 <USB_SetTurnaroundTime+0x130>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d906      	bls.n	8005088 <USB_SetTurnaroundTime+0x98>
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	4a29      	ldr	r2, [pc, #164]	@ (8005124 <USB_SetTurnaroundTime+0x134>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d802      	bhi.n	8005088 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005082:	230a      	movs	r3, #10
 8005084:	617b      	str	r3, [r7, #20]
 8005086:	e02b      	b.n	80050e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	4a26      	ldr	r2, [pc, #152]	@ (8005124 <USB_SetTurnaroundTime+0x134>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d906      	bls.n	800509e <USB_SetTurnaroundTime+0xae>
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	4a25      	ldr	r2, [pc, #148]	@ (8005128 <USB_SetTurnaroundTime+0x138>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d202      	bcs.n	800509e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005098:	2309      	movs	r3, #9
 800509a:	617b      	str	r3, [r7, #20]
 800509c:	e020      	b.n	80050e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	4a21      	ldr	r2, [pc, #132]	@ (8005128 <USB_SetTurnaroundTime+0x138>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d306      	bcc.n	80050b4 <USB_SetTurnaroundTime+0xc4>
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	4a20      	ldr	r2, [pc, #128]	@ (800512c <USB_SetTurnaroundTime+0x13c>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d802      	bhi.n	80050b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80050ae:	2308      	movs	r3, #8
 80050b0:	617b      	str	r3, [r7, #20]
 80050b2:	e015      	b.n	80050e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	4a1d      	ldr	r2, [pc, #116]	@ (800512c <USB_SetTurnaroundTime+0x13c>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d906      	bls.n	80050ca <USB_SetTurnaroundTime+0xda>
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	4a1c      	ldr	r2, [pc, #112]	@ (8005130 <USB_SetTurnaroundTime+0x140>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d202      	bcs.n	80050ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80050c4:	2307      	movs	r3, #7
 80050c6:	617b      	str	r3, [r7, #20]
 80050c8:	e00a      	b.n	80050e0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80050ca:	2306      	movs	r3, #6
 80050cc:	617b      	str	r3, [r7, #20]
 80050ce:	e007      	b.n	80050e0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80050d0:	79fb      	ldrb	r3, [r7, #7]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d102      	bne.n	80050dc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80050d6:	2309      	movs	r3, #9
 80050d8:	617b      	str	r3, [r7, #20]
 80050da:	e001      	b.n	80050e0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80050dc:	2309      	movs	r3, #9
 80050de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	68da      	ldr	r2, [r3, #12]
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	029b      	lsls	r3, r3, #10
 80050f4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80050f8:	431a      	orrs	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	371c      	adds	r7, #28
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	00d8acbf 	.word	0x00d8acbf
 8005110:	00e4e1c0 	.word	0x00e4e1c0
 8005114:	00f42400 	.word	0x00f42400
 8005118:	01067380 	.word	0x01067380
 800511c:	011a499f 	.word	0x011a499f
 8005120:	01312cff 	.word	0x01312cff
 8005124:	014ca43f 	.word	0x014ca43f
 8005128:	016e3600 	.word	0x016e3600
 800512c:	01a6ab1f 	.word	0x01a6ab1f
 8005130:	01e84800 	.word	0x01e84800

08005134 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f043 0201 	orr.w	r2, r3, #1
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f023 0201 	bic.w	r2, r3, #1
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	460b      	mov	r3, r1
 8005182:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005194:	78fb      	ldrb	r3, [r7, #3]
 8005196:	2b01      	cmp	r3, #1
 8005198:	d115      	bne.n	80051c6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80051a6:	200a      	movs	r0, #10
 80051a8:	f7fc fc9a 	bl	8001ae0 <HAL_Delay>
      ms += 10U;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	330a      	adds	r3, #10
 80051b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f001 f93f 	bl	8006436 <USB_GetMode>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d01e      	beq.n	80051fc <USB_SetCurrentMode+0x84>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2bc7      	cmp	r3, #199	@ 0xc7
 80051c2:	d9f0      	bls.n	80051a6 <USB_SetCurrentMode+0x2e>
 80051c4:	e01a      	b.n	80051fc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80051c6:	78fb      	ldrb	r3, [r7, #3]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d115      	bne.n	80051f8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80051d8:	200a      	movs	r0, #10
 80051da:	f7fc fc81 	bl	8001ae0 <HAL_Delay>
      ms += 10U;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	330a      	adds	r3, #10
 80051e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f001 f926 	bl	8006436 <USB_GetMode>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d005      	beq.n	80051fc <USB_SetCurrentMode+0x84>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2bc7      	cmp	r3, #199	@ 0xc7
 80051f4:	d9f0      	bls.n	80051d8 <USB_SetCurrentMode+0x60>
 80051f6:	e001      	b.n	80051fc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e005      	b.n	8005208 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2bc8      	cmp	r3, #200	@ 0xc8
 8005200:	d101      	bne.n	8005206 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e000      	b.n	8005208 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005210:	b084      	sub	sp, #16
 8005212:	b580      	push	{r7, lr}
 8005214:	b086      	sub	sp, #24
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800521e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005222:	2300      	movs	r3, #0
 8005224:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800522a:	2300      	movs	r3, #0
 800522c:	613b      	str	r3, [r7, #16]
 800522e:	e009      	b.n	8005244 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	3340      	adds	r3, #64	@ 0x40
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	2200      	movs	r2, #0
 800523c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	3301      	adds	r3, #1
 8005242:	613b      	str	r3, [r7, #16]
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	2b0e      	cmp	r3, #14
 8005248:	d9f2      	bls.n	8005230 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800524a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800524e:	2b00      	cmp	r3, #0
 8005250:	d11c      	bne.n	800528c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005260:	f043 0302 	orr.w	r3, r3, #2
 8005264:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800526a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005276:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005282:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	639a      	str	r2, [r3, #56]	@ 0x38
 800528a:	e00b      	b.n	80052a4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005290:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800529c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80052aa:	461a      	mov	r2, r3
 80052ac:	2300      	movs	r3, #0
 80052ae:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052b0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d10d      	bne.n	80052d4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80052b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d104      	bne.n	80052ca <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80052c0:	2100      	movs	r1, #0
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f968 	bl	8005598 <USB_SetDevSpeed>
 80052c8:	e008      	b.n	80052dc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80052ca:	2101      	movs	r1, #1
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f963 	bl	8005598 <USB_SetDevSpeed>
 80052d2:	e003      	b.n	80052dc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80052d4:	2103      	movs	r1, #3
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f95e 	bl	8005598 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052dc:	2110      	movs	r1, #16
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f8fa 	bl	80054d8 <USB_FlushTxFifo>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f924 	bl	800553c <USB_FlushRxFifo>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005304:	461a      	mov	r2, r3
 8005306:	2300      	movs	r3, #0
 8005308:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005310:	461a      	mov	r2, r3
 8005312:	2300      	movs	r3, #0
 8005314:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800531c:	461a      	mov	r2, r3
 800531e:	2300      	movs	r3, #0
 8005320:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005322:	2300      	movs	r3, #0
 8005324:	613b      	str	r3, [r7, #16]
 8005326:	e043      	b.n	80053b0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800533a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800533e:	d118      	bne.n	8005372 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10a      	bne.n	800535c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	4413      	add	r3, r2
 800534e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005352:	461a      	mov	r2, r3
 8005354:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	e013      	b.n	8005384 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005368:	461a      	mov	r2, r3
 800536a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800536e:	6013      	str	r3, [r2, #0]
 8005370:	e008      	b.n	8005384 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	015a      	lsls	r2, r3, #5
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	4413      	add	r3, r2
 800537a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800537e:	461a      	mov	r2, r3
 8005380:	2300      	movs	r3, #0
 8005382:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005390:	461a      	mov	r2, r3
 8005392:	2300      	movs	r3, #0
 8005394:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053a2:	461a      	mov	r2, r3
 80053a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80053a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	3301      	adds	r3, #1
 80053ae:	613b      	str	r3, [r7, #16]
 80053b0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80053b4:	461a      	mov	r2, r3
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d3b5      	bcc.n	8005328 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053bc:	2300      	movs	r3, #0
 80053be:	613b      	str	r3, [r7, #16]
 80053c0:	e043      	b.n	800544a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053d8:	d118      	bne.n	800540c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10a      	bne.n	80053f6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ec:	461a      	mov	r2, r3
 80053ee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80053f2:	6013      	str	r3, [r2, #0]
 80053f4:	e013      	b.n	800541e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005402:	461a      	mov	r2, r3
 8005404:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	e008      	b.n	800541e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4413      	add	r3, r2
 8005414:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005418:	461a      	mov	r2, r3
 800541a:	2300      	movs	r3, #0
 800541c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4413      	add	r3, r2
 8005426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800542a:	461a      	mov	r2, r3
 800542c:	2300      	movs	r3, #0
 800542e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800543c:	461a      	mov	r2, r3
 800543e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005442:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	3301      	adds	r3, #1
 8005448:	613b      	str	r3, [r7, #16]
 800544a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800544e:	461a      	mov	r2, r3
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	4293      	cmp	r3, r2
 8005454:	d3b5      	bcc.n	80053c2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005464:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005468:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005476:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005478:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800547c:	2b00      	cmp	r3, #0
 800547e:	d105      	bne.n	800548c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	f043 0210 	orr.w	r2, r3, #16
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	699a      	ldr	r2, [r3, #24]
 8005490:	4b10      	ldr	r3, [pc, #64]	@ (80054d4 <USB_DevInit+0x2c4>)
 8005492:	4313      	orrs	r3, r2
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005498:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800549c:	2b00      	cmp	r3, #0
 800549e:	d005      	beq.n	80054ac <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	f043 0208 	orr.w	r2, r3, #8
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80054ac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d107      	bne.n	80054c4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80054bc:	f043 0304 	orr.w	r3, r3, #4
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80054c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054d0:	b004      	add	sp, #16
 80054d2:	4770      	bx	lr
 80054d4:	803c3800 	.word	0x803c3800

080054d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80054e2:	2300      	movs	r3, #0
 80054e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	3301      	adds	r3, #1
 80054ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054f2:	d901      	bls.n	80054f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e01b      	b.n	8005530 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	daf2      	bge.n	80054e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005500:	2300      	movs	r3, #0
 8005502:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	019b      	lsls	r3, r3, #6
 8005508:	f043 0220 	orr.w	r2, r3, #32
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	3301      	adds	r3, #1
 8005514:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800551c:	d901      	bls.n	8005522 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e006      	b.n	8005530 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f003 0320 	and.w	r3, r3, #32
 800552a:	2b20      	cmp	r3, #32
 800552c:	d0f0      	beq.n	8005510 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005544:	2300      	movs	r3, #0
 8005546:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3301      	adds	r3, #1
 800554c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005554:	d901      	bls.n	800555a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e018      	b.n	800558c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	2b00      	cmp	r3, #0
 8005560:	daf2      	bge.n	8005548 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005562:	2300      	movs	r3, #0
 8005564:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2210      	movs	r2, #16
 800556a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	3301      	adds	r3, #1
 8005570:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005578:	d901      	bls.n	800557e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e006      	b.n	800558c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f003 0310 	and.w	r3, r3, #16
 8005586:	2b10      	cmp	r3, #16
 8005588:	d0f0      	beq.n	800556c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	460b      	mov	r3, r1
 80055a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	78fb      	ldrb	r3, [r7, #3]
 80055b2:	68f9      	ldr	r1, [r7, #12]
 80055b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055b8:	4313      	orrs	r3, r2
 80055ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b087      	sub	sp, #28
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f003 0306 	and.w	r3, r3, #6
 80055e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d102      	bne.n	80055f0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80055ea:	2300      	movs	r3, #0
 80055ec:	75fb      	strb	r3, [r7, #23]
 80055ee:	e00a      	b.n	8005606 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d002      	beq.n	80055fc <USB_GetDevSpeed+0x32>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2b06      	cmp	r3, #6
 80055fa:	d102      	bne.n	8005602 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80055fc:	2302      	movs	r3, #2
 80055fe:	75fb      	strb	r3, [r7, #23]
 8005600:	e001      	b.n	8005606 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005602:	230f      	movs	r3, #15
 8005604:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005606:	7dfb      	ldrb	r3, [r7, #23]
}
 8005608:	4618      	mov	r0, r3
 800560a:	371c      	adds	r7, #28
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	785b      	ldrb	r3, [r3, #1]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d13a      	bne.n	80056a6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005636:	69da      	ldr	r2, [r3, #28]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	f003 030f 	and.w	r3, r3, #15
 8005640:	2101      	movs	r1, #1
 8005642:	fa01 f303 	lsl.w	r3, r1, r3
 8005646:	b29b      	uxth	r3, r3
 8005648:	68f9      	ldr	r1, [r7, #12]
 800564a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800564e:	4313      	orrs	r3, r2
 8005650:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d155      	bne.n	8005714 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	791b      	ldrb	r3, [r3, #4]
 8005682:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005684:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	059b      	lsls	r3, r3, #22
 800568a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800568c:	4313      	orrs	r3, r2
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	0151      	lsls	r1, r2, #5
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	440a      	add	r2, r1
 8005696:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800569a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800569e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056a2:	6013      	str	r3, [r2, #0]
 80056a4:	e036      	b.n	8005714 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056ac:	69da      	ldr	r2, [r3, #28]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	f003 030f 	and.w	r3, r3, #15
 80056b6:	2101      	movs	r1, #1
 80056b8:	fa01 f303 	lsl.w	r3, r1, r3
 80056bc:	041b      	lsls	r3, r3, #16
 80056be:	68f9      	ldr	r1, [r7, #12]
 80056c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056c4:	4313      	orrs	r3, r2
 80056c6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	015a      	lsls	r2, r3, #5
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d11a      	bne.n	8005714 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	015a      	lsls	r2, r3, #5
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	4413      	add	r3, r2
 80056e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	791b      	ldrb	r3, [r3, #4]
 80056f8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80056fa:	430b      	orrs	r3, r1
 80056fc:	4313      	orrs	r3, r2
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	0151      	lsls	r1, r2, #5
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	440a      	add	r2, r1
 8005706:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800570a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800570e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005712:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
	...

08005724 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	785b      	ldrb	r3, [r3, #1]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d161      	bne.n	8005804 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005752:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005756:	d11f      	bne.n	8005798 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	0151      	lsls	r1, r2, #5
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	440a      	add	r2, r1
 800576e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005772:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005776:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	0151      	lsls	r1, r2, #5
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	440a      	add	r2, r1
 800578e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005792:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005796:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800579e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	f003 030f 	and.w	r3, r3, #15
 80057a8:	2101      	movs	r1, #1
 80057aa:	fa01 f303 	lsl.w	r3, r1, r3
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	43db      	mvns	r3, r3
 80057b2:	68f9      	ldr	r1, [r7, #12]
 80057b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80057b8:	4013      	ands	r3, r2
 80057ba:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057c2:	69da      	ldr	r2, [r3, #28]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	f003 030f 	and.w	r3, r3, #15
 80057cc:	2101      	movs	r1, #1
 80057ce:	fa01 f303 	lsl.w	r3, r1, r3
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	43db      	mvns	r3, r3
 80057d6:	68f9      	ldr	r1, [r7, #12]
 80057d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80057dc:	4013      	ands	r3, r2
 80057de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	0159      	lsls	r1, r3, #5
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	440b      	add	r3, r1
 80057f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057fa:	4619      	mov	r1, r3
 80057fc:	4b35      	ldr	r3, [pc, #212]	@ (80058d4 <USB_DeactivateEndpoint+0x1b0>)
 80057fe:	4013      	ands	r3, r2
 8005800:	600b      	str	r3, [r1, #0]
 8005802:	e060      	b.n	80058c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4413      	add	r3, r2
 800580c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005816:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800581a:	d11f      	bne.n	800585c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	0151      	lsls	r1, r2, #5
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	440a      	add	r2, r1
 8005832:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005836:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800583a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	0151      	lsls	r1, r2, #5
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	440a      	add	r2, r1
 8005852:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005856:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800585a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005862:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	f003 030f 	and.w	r3, r3, #15
 800586c:	2101      	movs	r1, #1
 800586e:	fa01 f303 	lsl.w	r3, r1, r3
 8005872:	041b      	lsls	r3, r3, #16
 8005874:	43db      	mvns	r3, r3
 8005876:	68f9      	ldr	r1, [r7, #12]
 8005878:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800587c:	4013      	ands	r3, r2
 800587e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005886:	69da      	ldr	r2, [r3, #28]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	f003 030f 	and.w	r3, r3, #15
 8005890:	2101      	movs	r1, #1
 8005892:	fa01 f303 	lsl.w	r3, r1, r3
 8005896:	041b      	lsls	r3, r3, #16
 8005898:	43db      	mvns	r3, r3
 800589a:	68f9      	ldr	r1, [r7, #12]
 800589c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80058a0:	4013      	ands	r3, r2
 80058a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	0159      	lsls	r1, r3, #5
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	440b      	add	r3, r1
 80058ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058be:	4619      	mov	r1, r3
 80058c0:	4b05      	ldr	r3, [pc, #20]	@ (80058d8 <USB_DeactivateEndpoint+0x1b4>)
 80058c2:	4013      	ands	r3, r2
 80058c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr
 80058d4:	ec337800 	.word	0xec337800
 80058d8:	eff37800 	.word	0xeff37800

080058dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b08a      	sub	sp, #40	@ 0x28
 80058e0:	af02      	add	r7, sp, #8
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	4613      	mov	r3, r2
 80058e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	785b      	ldrb	r3, [r3, #1]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	f040 817f 	bne.w	8005bfc <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d132      	bne.n	800596c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	0151      	lsls	r1, r2, #5
 8005918:	69fa      	ldr	r2, [r7, #28]
 800591a:	440a      	add	r2, r1
 800591c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005920:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005924:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005928:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	4413      	add	r3, r2
 8005932:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	0151      	lsls	r1, r2, #5
 800593c:	69fa      	ldr	r2, [r7, #28]
 800593e:	440a      	add	r2, r1
 8005940:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005944:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005948:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	0151      	lsls	r1, r2, #5
 800595c:	69fa      	ldr	r2, [r7, #28]
 800595e:	440a      	add	r2, r1
 8005960:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005964:	0cdb      	lsrs	r3, r3, #19
 8005966:	04db      	lsls	r3, r3, #19
 8005968:	6113      	str	r3, [r2, #16]
 800596a:	e097      	b.n	8005a9c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	4413      	add	r3, r2
 8005974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	0151      	lsls	r1, r2, #5
 800597e:	69fa      	ldr	r2, [r7, #28]
 8005980:	440a      	add	r2, r1
 8005982:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005986:	0cdb      	lsrs	r3, r3, #19
 8005988:	04db      	lsls	r3, r3, #19
 800598a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	0151      	lsls	r1, r2, #5
 800599e:	69fa      	ldr	r2, [r7, #28]
 80059a0:	440a      	add	r2, r1
 80059a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059a6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80059aa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80059ae:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d11a      	bne.n	80059ec <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	691a      	ldr	r2, [r3, #16]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d903      	bls.n	80059ca <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	689a      	ldr	r2, [r3, #8]
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	0151      	lsls	r1, r2, #5
 80059dc:	69fa      	ldr	r2, [r7, #28]
 80059de:	440a      	add	r2, r1
 80059e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80059e8:	6113      	str	r3, [r2, #16]
 80059ea:	e044      	b.n	8005a76 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	691a      	ldr	r2, [r3, #16]
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	4413      	add	r3, r2
 80059f6:	1e5a      	subs	r2, r3, #1
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a00:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a0e:	691a      	ldr	r2, [r3, #16]
 8005a10:	8afb      	ldrh	r3, [r7, #22]
 8005a12:	04d9      	lsls	r1, r3, #19
 8005a14:	4ba4      	ldr	r3, [pc, #656]	@ (8005ca8 <USB_EPStartXfer+0x3cc>)
 8005a16:	400b      	ands	r3, r1
 8005a18:	69b9      	ldr	r1, [r7, #24]
 8005a1a:	0148      	lsls	r0, r1, #5
 8005a1c:	69f9      	ldr	r1, [r7, #28]
 8005a1e:	4401      	add	r1, r0
 8005a20:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005a24:	4313      	orrs	r3, r2
 8005a26:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	791b      	ldrb	r3, [r3, #4]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d122      	bne.n	8005a76 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	0151      	lsls	r1, r2, #5
 8005a42:	69fa      	ldr	r2, [r7, #28]
 8005a44:	440a      	add	r2, r1
 8005a46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a4a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005a4e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a5c:	691a      	ldr	r2, [r3, #16]
 8005a5e:	8afb      	ldrh	r3, [r7, #22]
 8005a60:	075b      	lsls	r3, r3, #29
 8005a62:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005a66:	69b9      	ldr	r1, [r7, #24]
 8005a68:	0148      	lsls	r0, r1, #5
 8005a6a:	69f9      	ldr	r1, [r7, #28]
 8005a6c:	4401      	add	r1, r0
 8005a6e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005a72:	4313      	orrs	r3, r2
 8005a74:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a82:	691a      	ldr	r2, [r3, #16]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a8c:	69b9      	ldr	r1, [r7, #24]
 8005a8e:	0148      	lsls	r0, r1, #5
 8005a90:	69f9      	ldr	r1, [r7, #28]
 8005a92:	4401      	add	r1, r0
 8005a94:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a9c:	79fb      	ldrb	r3, [r7, #7]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d14b      	bne.n	8005b3a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d009      	beq.n	8005abe <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	69db      	ldr	r3, [r3, #28]
 8005abc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	791b      	ldrb	r3, [r3, #4]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d128      	bne.n	8005b18 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d110      	bne.n	8005af8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	0151      	lsls	r1, r2, #5
 8005ae8:	69fa      	ldr	r2, [r7, #28]
 8005aea:	440a      	add	r2, r1
 8005aec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005af0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005af4:	6013      	str	r3, [r2, #0]
 8005af6:	e00f      	b.n	8005b18 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	0151      	lsls	r1, r2, #5
 8005b0a:	69fa      	ldr	r2, [r7, #28]
 8005b0c:	440a      	add	r2, r1
 8005b0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b16:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	0151      	lsls	r1, r2, #5
 8005b2a:	69fa      	ldr	r2, [r7, #28]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b32:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005b36:	6013      	str	r3, [r2, #0]
 8005b38:	e166      	b.n	8005e08 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	0151      	lsls	r1, r2, #5
 8005b4c:	69fa      	ldr	r2, [r7, #28]
 8005b4e:	440a      	add	r2, r1
 8005b50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b54:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005b58:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	791b      	ldrb	r3, [r3, #4]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d015      	beq.n	8005b8e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 814e 	beq.w	8005e08 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	f003 030f 	and.w	r3, r3, #15
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b82:	69f9      	ldr	r1, [r7, #28]
 8005b84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	634b      	str	r3, [r1, #52]	@ 0x34
 8005b8c:	e13c      	b.n	8005e08 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d110      	bne.n	8005bc0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	0151      	lsls	r1, r2, #5
 8005bb0:	69fa      	ldr	r2, [r7, #28]
 8005bb2:	440a      	add	r2, r1
 8005bb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bb8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005bbc:	6013      	str	r3, [r2, #0]
 8005bbe:	e00f      	b.n	8005be0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	0151      	lsls	r1, r2, #5
 8005bd2:	69fa      	ldr	r2, [r7, #28]
 8005bd4:	440a      	add	r2, r1
 8005bd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bde:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	68d9      	ldr	r1, [r3, #12]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	781a      	ldrb	r2, [r3, #0]
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	b298      	uxth	r0, r3
 8005bee:	79fb      	ldrb	r3, [r7, #7]
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f000 f9b9 	bl	8005f6c <USB_WritePacket>
 8005bfa:	e105      	b.n	8005e08 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	69ba      	ldr	r2, [r7, #24]
 8005c0c:	0151      	lsls	r1, r2, #5
 8005c0e:	69fa      	ldr	r2, [r7, #28]
 8005c10:	440a      	add	r2, r1
 8005c12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c16:	0cdb      	lsrs	r3, r3, #19
 8005c18:	04db      	lsls	r3, r3, #19
 8005c1a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	0151      	lsls	r1, r2, #5
 8005c2e:	69fa      	ldr	r2, [r7, #28]
 8005c30:	440a      	add	r2, r1
 8005c32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c36:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005c3a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005c3e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d132      	bne.n	8005cac <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	689a      	ldr	r2, [r3, #8]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	689a      	ldr	r2, [r3, #8]
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c6a:	691a      	ldr	r2, [r3, #16]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c74:	69b9      	ldr	r1, [r7, #24]
 8005c76:	0148      	lsls	r0, r1, #5
 8005c78:	69f9      	ldr	r1, [r7, #28]
 8005c7a:	4401      	add	r1, r0
 8005c7c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005c80:	4313      	orrs	r3, r2
 8005c82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	0151      	lsls	r1, r2, #5
 8005c96:	69fa      	ldr	r2, [r7, #28]
 8005c98:	440a      	add	r2, r1
 8005c9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c9e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ca2:	6113      	str	r3, [r2, #16]
 8005ca4:	e062      	b.n	8005d6c <USB_EPStartXfer+0x490>
 8005ca6:	bf00      	nop
 8005ca8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d123      	bne.n	8005cfc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cc0:	691a      	ldr	r2, [r3, #16]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cca:	69b9      	ldr	r1, [r7, #24]
 8005ccc:	0148      	lsls	r0, r1, #5
 8005cce:	69f9      	ldr	r1, [r7, #28]
 8005cd0:	4401      	add	r1, r0
 8005cd2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	0151      	lsls	r1, r2, #5
 8005cec:	69fa      	ldr	r2, [r7, #28]
 8005cee:	440a      	add	r2, r1
 8005cf0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cf4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005cf8:	6113      	str	r3, [r2, #16]
 8005cfa:	e037      	b.n	8005d6c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	691a      	ldr	r2, [r3, #16]
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	4413      	add	r3, r2
 8005d06:	1e5a      	subs	r2, r3, #1
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d10:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	8afa      	ldrh	r2, [r7, #22]
 8005d18:	fb03 f202 	mul.w	r2, r3, r2
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d2c:	691a      	ldr	r2, [r3, #16]
 8005d2e:	8afb      	ldrh	r3, [r7, #22]
 8005d30:	04d9      	lsls	r1, r3, #19
 8005d32:	4b38      	ldr	r3, [pc, #224]	@ (8005e14 <USB_EPStartXfer+0x538>)
 8005d34:	400b      	ands	r3, r1
 8005d36:	69b9      	ldr	r1, [r7, #24]
 8005d38:	0148      	lsls	r0, r1, #5
 8005d3a:	69f9      	ldr	r1, [r7, #28]
 8005d3c:	4401      	add	r1, r0
 8005d3e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005d42:	4313      	orrs	r3, r2
 8005d44:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d52:	691a      	ldr	r2, [r3, #16]
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	6a1b      	ldr	r3, [r3, #32]
 8005d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d5c:	69b9      	ldr	r1, [r7, #24]
 8005d5e:	0148      	lsls	r0, r1, #5
 8005d60:	69f9      	ldr	r1, [r7, #28]
 8005d62:	4401      	add	r1, r0
 8005d64:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005d6c:	79fb      	ldrb	r3, [r7, #7]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d10d      	bne.n	8005d8e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d009      	beq.n	8005d8e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	68d9      	ldr	r1, [r3, #12]
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d8a:	460a      	mov	r2, r1
 8005d8c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	791b      	ldrb	r3, [r3, #4]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d128      	bne.n	8005de8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d110      	bne.n	8005dc8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	0151      	lsls	r1, r2, #5
 8005db8:	69fa      	ldr	r2, [r7, #28]
 8005dba:	440a      	add	r2, r1
 8005dbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dc0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	e00f      	b.n	8005de8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	69ba      	ldr	r2, [r7, #24]
 8005dd8:	0151      	lsls	r1, r2, #5
 8005dda:	69fa      	ldr	r2, [r7, #28]
 8005ddc:	440a      	add	r2, r1
 8005dde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005de2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005de6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	0151      	lsls	r1, r2, #5
 8005dfa:	69fa      	ldr	r2, [r7, #28]
 8005dfc:	440a      	add	r2, r1
 8005dfe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e02:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005e06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3720      	adds	r7, #32
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	1ff80000 	.word	0x1ff80000

08005e18 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e22:	2300      	movs	r3, #0
 8005e24:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e26:	2300      	movs	r3, #0
 8005e28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	785b      	ldrb	r3, [r3, #1]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d14a      	bne.n	8005ecc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e4e:	f040 8086 	bne.w	8005f5e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	7812      	ldrb	r2, [r2, #0]
 8005e66:	0151      	lsls	r1, r2, #5
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	440a      	add	r2, r1
 8005e6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e70:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005e74:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	7812      	ldrb	r2, [r2, #0]
 8005e8a:	0151      	lsls	r1, r2, #5
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	440a      	add	r2, r1
 8005e90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d902      	bls.n	8005eb0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	75fb      	strb	r3, [r7, #23]
          break;
 8005eae:	e056      	b.n	8005f5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ec8:	d0e7      	beq.n	8005e9a <USB_EPStopXfer+0x82>
 8005eca:	e048      	b.n	8005f5e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ee4:	d13b      	bne.n	8005f5e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	7812      	ldrb	r2, [r2, #0]
 8005efa:	0151      	lsls	r1, r2, #5
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	440a      	add	r2, r1
 8005f00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f04:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f08:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	7812      	ldrb	r2, [r2, #0]
 8005f1e:	0151      	lsls	r1, r2, #5
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	440a      	add	r2, r1
 8005f24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f28:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	3301      	adds	r3, #1
 8005f32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d902      	bls.n	8005f44 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	75fb      	strb	r3, [r7, #23]
          break;
 8005f42:	e00c      	b.n	8005f5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f5c:	d0e7      	beq.n	8005f2e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	371c      	adds	r7, #28
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b089      	sub	sp, #36	@ 0x24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	4611      	mov	r1, r2
 8005f78:	461a      	mov	r2, r3
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	71fb      	strb	r3, [r7, #7]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005f8a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d123      	bne.n	8005fda <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f92:	88bb      	ldrh	r3, [r7, #4]
 8005f94:	3303      	adds	r3, #3
 8005f96:	089b      	lsrs	r3, r3, #2
 8005f98:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	61bb      	str	r3, [r7, #24]
 8005f9e:	e018      	b.n	8005fd2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005fa0:	79fb      	ldrb	r3, [r7, #7]
 8005fa2:	031a      	lsls	r2, r3, #12
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fac:	461a      	mov	r2, r3
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	61bb      	str	r3, [r7, #24]
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d3e2      	bcc.n	8005fa0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3724      	adds	r7, #36	@ 0x24
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b08b      	sub	sp, #44	@ 0x2c
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005ffe:	88fb      	ldrh	r3, [r7, #6]
 8006000:	089b      	lsrs	r3, r3, #2
 8006002:	b29b      	uxth	r3, r3
 8006004:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006006:	88fb      	ldrh	r3, [r7, #6]
 8006008:	f003 0303 	and.w	r3, r3, #3
 800600c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800600e:	2300      	movs	r3, #0
 8006010:	623b      	str	r3, [r7, #32]
 8006012:	e014      	b.n	800603e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006022:	3301      	adds	r3, #1
 8006024:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006028:	3301      	adds	r3, #1
 800602a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800602c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602e:	3301      	adds	r3, #1
 8006030:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006034:	3301      	adds	r3, #1
 8006036:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	3301      	adds	r3, #1
 800603c:	623b      	str	r3, [r7, #32]
 800603e:	6a3a      	ldr	r2, [r7, #32]
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	429a      	cmp	r2, r3
 8006044:	d3e6      	bcc.n	8006014 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006046:	8bfb      	ldrh	r3, [r7, #30]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d01e      	beq.n	800608a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800604c:	2300      	movs	r3, #0
 800604e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006056:	461a      	mov	r2, r3
 8006058:	f107 0310 	add.w	r3, r7, #16
 800605c:	6812      	ldr	r2, [r2, #0]
 800605e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	6a3b      	ldr	r3, [r7, #32]
 8006064:	b2db      	uxtb	r3, r3
 8006066:	00db      	lsls	r3, r3, #3
 8006068:	fa22 f303 	lsr.w	r3, r2, r3
 800606c:	b2da      	uxtb	r2, r3
 800606e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006070:	701a      	strb	r2, [r3, #0]
      i++;
 8006072:	6a3b      	ldr	r3, [r7, #32]
 8006074:	3301      	adds	r3, #1
 8006076:	623b      	str	r3, [r7, #32]
      pDest++;
 8006078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607a:	3301      	adds	r3, #1
 800607c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800607e:	8bfb      	ldrh	r3, [r7, #30]
 8006080:	3b01      	subs	r3, #1
 8006082:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006084:	8bfb      	ldrh	r3, [r7, #30]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1ea      	bne.n	8006060 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800608a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800608c:	4618      	mov	r0, r3
 800608e:	372c      	adds	r7, #44	@ 0x2c
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	785b      	ldrb	r3, [r3, #1]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d12c      	bne.n	800610e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	db12      	blt.n	80060ec <USB_EPSetStall+0x54>
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00f      	beq.n	80060ec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	0151      	lsls	r1, r2, #5
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	440a      	add	r2, r1
 80060e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060e6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80060ea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	0151      	lsls	r1, r2, #5
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	440a      	add	r2, r1
 8006102:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006106:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800610a:	6013      	str	r3, [r2, #0]
 800610c:	e02b      	b.n	8006166 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4413      	add	r3, r2
 8006116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	db12      	blt.n	8006146 <USB_EPSetStall+0xae>
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00f      	beq.n	8006146 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	4413      	add	r3, r2
 800612e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	0151      	lsls	r1, r2, #5
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	440a      	add	r2, r1
 800613c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006140:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006144:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	4413      	add	r3, r2
 800614e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	0151      	lsls	r1, r2, #5
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	440a      	add	r2, r1
 800615c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006160:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006164:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	785b      	ldrb	r3, [r3, #1]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d128      	bne.n	80061e2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	0151      	lsls	r1, r2, #5
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	440a      	add	r2, r1
 80061a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80061ae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	791b      	ldrb	r3, [r3, #4]
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	d003      	beq.n	80061c0 <USB_EPClearStall+0x4c>
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	791b      	ldrb	r3, [r3, #4]
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d138      	bne.n	8006232 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	0151      	lsls	r1, r2, #5
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	440a      	add	r2, r1
 80061d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061de:	6013      	str	r3, [r2, #0]
 80061e0:	e027      	b.n	8006232 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	015a      	lsls	r2, r3, #5
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	0151      	lsls	r1, r2, #5
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	440a      	add	r2, r1
 80061f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061fc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006200:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	791b      	ldrb	r3, [r3, #4]
 8006206:	2b03      	cmp	r3, #3
 8006208:	d003      	beq.n	8006212 <USB_EPClearStall+0x9e>
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	791b      	ldrb	r3, [r3, #4]
 800620e:	2b02      	cmp	r3, #2
 8006210:	d10f      	bne.n	8006232 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	4413      	add	r3, r2
 800621a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	0151      	lsls	r1, r2, #5
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	440a      	add	r2, r1
 8006228:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800622c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006230:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3714      	adds	r7, #20
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	460b      	mov	r3, r1
 800624a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800625e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006262:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	78fb      	ldrb	r3, [r7, #3]
 800626e:	011b      	lsls	r3, r3, #4
 8006270:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006274:	68f9      	ldr	r1, [r7, #12]
 8006276:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800627a:	4313      	orrs	r3, r2
 800627c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80062a6:	f023 0303 	bic.w	r3, r3, #3
 80062aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062ba:	f023 0302 	bic.w	r3, r3, #2
 80062be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b085      	sub	sp, #20
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80062e8:	f023 0303 	bic.w	r3, r3, #3
 80062ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062fc:	f043 0302 	orr.w	r3, r3, #2
 8006300:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3714      	adds	r7, #20
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	4013      	ands	r3, r2
 8006326:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006328:	68fb      	ldr	r3, [r7, #12]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006336:	b480      	push	{r7}
 8006338:	b085      	sub	sp, #20
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006352:	69db      	ldr	r3, [r3, #28]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	4013      	ands	r3, r2
 8006358:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	0c1b      	lsrs	r3, r3, #16
}
 800635e:	4618      	mov	r0, r3
 8006360:	3714      	adds	r7, #20
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800636a:	b480      	push	{r7}
 800636c:	b085      	sub	sp, #20
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006386:	69db      	ldr	r3, [r3, #28]
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	4013      	ands	r3, r2
 800638c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	b29b      	uxth	r3, r3
}
 8006392:	4618      	mov	r0, r3
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800639e:	b480      	push	{r7}
 80063a0:	b085      	sub	sp, #20
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	460b      	mov	r3, r1
 80063a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80063ae:	78fb      	ldrb	r3, [r7, #3]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	4013      	ands	r3, r2
 80063ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063cc:	68bb      	ldr	r3, [r7, #8]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3714      	adds	r7, #20
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80063da:	b480      	push	{r7}
 80063dc:	b087      	sub	sp, #28
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
 80063e2:	460b      	mov	r3, r1
 80063e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063fc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80063fe:	78fb      	ldrb	r3, [r7, #3]
 8006400:	f003 030f 	and.w	r3, r3, #15
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	fa22 f303 	lsr.w	r3, r2, r3
 800640a:	01db      	lsls	r3, r3, #7
 800640c:	b2db      	uxtb	r3, r3
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	4313      	orrs	r3, r2
 8006412:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006414:	78fb      	ldrb	r3, [r7, #3]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	4013      	ands	r3, r2
 8006426:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006428:	68bb      	ldr	r3, [r7, #8]
}
 800642a:	4618      	mov	r0, r3
 800642c:	371c      	adds	r7, #28
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006436:	b480      	push	{r7}
 8006438:	b083      	sub	sp, #12
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	f003 0301 	and.w	r3, r3, #1
}
 8006446:	4618      	mov	r0, r3
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006452:	b480      	push	{r7}
 8006454:	b085      	sub	sp, #20
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800646c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006470:	f023 0307 	bic.w	r3, r3, #7
 8006474:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006484:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006488:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006498:	b480      	push	{r7}
 800649a:	b087      	sub	sp, #28
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	460b      	mov	r3, r1
 80064a2:	607a      	str	r2, [r7, #4]
 80064a4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	333c      	adds	r3, #60	@ 0x3c
 80064ae:	3304      	adds	r3, #4
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	4a26      	ldr	r2, [pc, #152]	@ (8006550 <USB_EP0_OutStart+0xb8>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d90a      	bls.n	80064d2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064cc:	d101      	bne.n	80064d2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	e037      	b.n	8006542 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064d8:	461a      	mov	r2, r3
 80064da:	2300      	movs	r3, #0
 80064dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80064f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006500:	f043 0318 	orr.w	r3, r3, #24
 8006504:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006514:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006518:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800651a:	7afb      	ldrb	r3, [r7, #11]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d10f      	bne.n	8006540 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006526:	461a      	mov	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800653a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800653e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	371c      	adds	r7, #28
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	4f54300a 	.word	0x4f54300a

08006554 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800655c:	2300      	movs	r3, #0
 800655e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	3301      	adds	r3, #1
 8006564:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800656c:	d901      	bls.n	8006572 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e01b      	b.n	80065aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	2b00      	cmp	r3, #0
 8006578:	daf2      	bge.n	8006560 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800657a:	2300      	movs	r3, #0
 800657c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	f043 0201 	orr.w	r2, r3, #1
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3301      	adds	r3, #1
 800658e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006596:	d901      	bls.n	800659c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	e006      	b.n	80065aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d0f0      	beq.n	800658a <USB_CoreReset+0x36>

  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
	...

080065b8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	460b      	mov	r3, r1
 80065c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80065c4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80065c8:	f002 fc94 	bl	8008ef4 <USBD_static_malloc>
 80065cc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d109      	bne.n	80065e8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	32b0      	adds	r2, #176	@ 0xb0
 80065de:	2100      	movs	r1, #0
 80065e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80065e4:	2302      	movs	r3, #2
 80065e6:	e0d4      	b.n	8006792 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80065e8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80065ec:	2100      	movs	r1, #0
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f003 fa41 	bl	8009a76 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	32b0      	adds	r2, #176	@ 0xb0
 80065fe:	68f9      	ldr	r1, [r7, #12]
 8006600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	32b0      	adds	r2, #176	@ 0xb0
 800660e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	7c1b      	ldrb	r3, [r3, #16]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d138      	bne.n	8006692 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006620:	4b5e      	ldr	r3, [pc, #376]	@ (800679c <USBD_CDC_Init+0x1e4>)
 8006622:	7819      	ldrb	r1, [r3, #0]
 8006624:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006628:	2202      	movs	r2, #2
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f002 fb3f 	bl	8008cae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006630:	4b5a      	ldr	r3, [pc, #360]	@ (800679c <USBD_CDC_Init+0x1e4>)
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	f003 020f 	and.w	r2, r3, #15
 8006638:	6879      	ldr	r1, [r7, #4]
 800663a:	4613      	mov	r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	440b      	add	r3, r1
 8006644:	3324      	adds	r3, #36	@ 0x24
 8006646:	2201      	movs	r2, #1
 8006648:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800664a:	4b55      	ldr	r3, [pc, #340]	@ (80067a0 <USBD_CDC_Init+0x1e8>)
 800664c:	7819      	ldrb	r1, [r3, #0]
 800664e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006652:	2202      	movs	r2, #2
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f002 fb2a 	bl	8008cae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800665a:	4b51      	ldr	r3, [pc, #324]	@ (80067a0 <USBD_CDC_Init+0x1e8>)
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	f003 020f 	and.w	r2, r3, #15
 8006662:	6879      	ldr	r1, [r7, #4]
 8006664:	4613      	mov	r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	440b      	add	r3, r1
 800666e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006672:	2201      	movs	r2, #1
 8006674:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006676:	4b4b      	ldr	r3, [pc, #300]	@ (80067a4 <USBD_CDC_Init+0x1ec>)
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	f003 020f 	and.w	r2, r3, #15
 800667e:	6879      	ldr	r1, [r7, #4]
 8006680:	4613      	mov	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	440b      	add	r3, r1
 800668a:	3326      	adds	r3, #38	@ 0x26
 800668c:	2210      	movs	r2, #16
 800668e:	801a      	strh	r2, [r3, #0]
 8006690:	e035      	b.n	80066fe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006692:	4b42      	ldr	r3, [pc, #264]	@ (800679c <USBD_CDC_Init+0x1e4>)
 8006694:	7819      	ldrb	r1, [r3, #0]
 8006696:	2340      	movs	r3, #64	@ 0x40
 8006698:	2202      	movs	r2, #2
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f002 fb07 	bl	8008cae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80066a0:	4b3e      	ldr	r3, [pc, #248]	@ (800679c <USBD_CDC_Init+0x1e4>)
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	f003 020f 	and.w	r2, r3, #15
 80066a8:	6879      	ldr	r1, [r7, #4]
 80066aa:	4613      	mov	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	440b      	add	r3, r1
 80066b4:	3324      	adds	r3, #36	@ 0x24
 80066b6:	2201      	movs	r2, #1
 80066b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80066ba:	4b39      	ldr	r3, [pc, #228]	@ (80067a0 <USBD_CDC_Init+0x1e8>)
 80066bc:	7819      	ldrb	r1, [r3, #0]
 80066be:	2340      	movs	r3, #64	@ 0x40
 80066c0:	2202      	movs	r2, #2
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f002 faf3 	bl	8008cae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80066c8:	4b35      	ldr	r3, [pc, #212]	@ (80067a0 <USBD_CDC_Init+0x1e8>)
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	f003 020f 	and.w	r2, r3, #15
 80066d0:	6879      	ldr	r1, [r7, #4]
 80066d2:	4613      	mov	r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	440b      	add	r3, r1
 80066dc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80066e0:	2201      	movs	r2, #1
 80066e2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80066e4:	4b2f      	ldr	r3, [pc, #188]	@ (80067a4 <USBD_CDC_Init+0x1ec>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	f003 020f 	and.w	r2, r3, #15
 80066ec:	6879      	ldr	r1, [r7, #4]
 80066ee:	4613      	mov	r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	440b      	add	r3, r1
 80066f8:	3326      	adds	r3, #38	@ 0x26
 80066fa:	2210      	movs	r2, #16
 80066fc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80066fe:	4b29      	ldr	r3, [pc, #164]	@ (80067a4 <USBD_CDC_Init+0x1ec>)
 8006700:	7819      	ldrb	r1, [r3, #0]
 8006702:	2308      	movs	r3, #8
 8006704:	2203      	movs	r2, #3
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f002 fad1 	bl	8008cae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800670c:	4b25      	ldr	r3, [pc, #148]	@ (80067a4 <USBD_CDC_Init+0x1ec>)
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	f003 020f 	and.w	r2, r3, #15
 8006714:	6879      	ldr	r1, [r7, #4]
 8006716:	4613      	mov	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	440b      	add	r3, r1
 8006720:	3324      	adds	r3, #36	@ 0x24
 8006722:	2201      	movs	r2, #1
 8006724:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	33b0      	adds	r3, #176	@ 0xb0
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4413      	add	r3, r2
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800675c:	2302      	movs	r3, #2
 800675e:	e018      	b.n	8006792 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	7c1b      	ldrb	r3, [r3, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10a      	bne.n	800677e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006768:	4b0d      	ldr	r3, [pc, #52]	@ (80067a0 <USBD_CDC_Init+0x1e8>)
 800676a:	7819      	ldrb	r1, [r3, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006772:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f002 fb88 	bl	8008e8c <USBD_LL_PrepareReceive>
 800677c:	e008      	b.n	8006790 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800677e:	4b08      	ldr	r3, [pc, #32]	@ (80067a0 <USBD_CDC_Init+0x1e8>)
 8006780:	7819      	ldrb	r1, [r3, #0]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006788:	2340      	movs	r3, #64	@ 0x40
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f002 fb7e 	bl	8008e8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	20000093 	.word	0x20000093
 80067a0:	20000094 	.word	0x20000094
 80067a4:	20000095 	.word	0x20000095

080067a8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	460b      	mov	r3, r1
 80067b2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80067b4:	4b3a      	ldr	r3, [pc, #232]	@ (80068a0 <USBD_CDC_DeInit+0xf8>)
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	4619      	mov	r1, r3
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f002 fa9d 	bl	8008cfa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80067c0:	4b37      	ldr	r3, [pc, #220]	@ (80068a0 <USBD_CDC_DeInit+0xf8>)
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	f003 020f 	and.w	r2, r3, #15
 80067c8:	6879      	ldr	r1, [r7, #4]
 80067ca:	4613      	mov	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	4413      	add	r3, r2
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	440b      	add	r3, r1
 80067d4:	3324      	adds	r3, #36	@ 0x24
 80067d6:	2200      	movs	r2, #0
 80067d8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80067da:	4b32      	ldr	r3, [pc, #200]	@ (80068a4 <USBD_CDC_DeInit+0xfc>)
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	4619      	mov	r1, r3
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f002 fa8a 	bl	8008cfa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80067e6:	4b2f      	ldr	r3, [pc, #188]	@ (80068a4 <USBD_CDC_DeInit+0xfc>)
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	f003 020f 	and.w	r2, r3, #15
 80067ee:	6879      	ldr	r1, [r7, #4]
 80067f0:	4613      	mov	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	440b      	add	r3, r1
 80067fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80067fe:	2200      	movs	r2, #0
 8006800:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006802:	4b29      	ldr	r3, [pc, #164]	@ (80068a8 <USBD_CDC_DeInit+0x100>)
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	4619      	mov	r1, r3
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f002 fa76 	bl	8008cfa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800680e:	4b26      	ldr	r3, [pc, #152]	@ (80068a8 <USBD_CDC_DeInit+0x100>)
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	f003 020f 	and.w	r2, r3, #15
 8006816:	6879      	ldr	r1, [r7, #4]
 8006818:	4613      	mov	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	440b      	add	r3, r1
 8006822:	3324      	adds	r3, #36	@ 0x24
 8006824:	2200      	movs	r2, #0
 8006826:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006828:	4b1f      	ldr	r3, [pc, #124]	@ (80068a8 <USBD_CDC_DeInit+0x100>)
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	f003 020f 	and.w	r2, r3, #15
 8006830:	6879      	ldr	r1, [r7, #4]
 8006832:	4613      	mov	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4413      	add	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	440b      	add	r3, r1
 800683c:	3326      	adds	r3, #38	@ 0x26
 800683e:	2200      	movs	r2, #0
 8006840:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	32b0      	adds	r2, #176	@ 0xb0
 800684c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d01f      	beq.n	8006894 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	33b0      	adds	r3, #176	@ 0xb0
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4413      	add	r3, r2
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	32b0      	adds	r2, #176	@ 0xb0
 8006872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006876:	4618      	mov	r0, r3
 8006878:	f002 fb4a 	bl	8008f10 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	32b0      	adds	r2, #176	@ 0xb0
 8006886:	2100      	movs	r1, #0
 8006888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	20000093 	.word	0x20000093
 80068a4:	20000094 	.word	0x20000094
 80068a8:	20000095 	.word	0x20000095

080068ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	32b0      	adds	r2, #176	@ 0xb0
 80068c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068c4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80068c6:	2300      	movs	r3, #0
 80068c8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80068ca:	2300      	movs	r3, #0
 80068cc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80068ce:	2300      	movs	r3, #0
 80068d0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d101      	bne.n	80068dc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80068d8:	2303      	movs	r3, #3
 80068da:	e0bf      	b.n	8006a5c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d050      	beq.n	800698a <USBD_CDC_Setup+0xde>
 80068e8:	2b20      	cmp	r3, #32
 80068ea:	f040 80af 	bne.w	8006a4c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	88db      	ldrh	r3, [r3, #6]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d03a      	beq.n	800696c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	b25b      	sxtb	r3, r3
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	da1b      	bge.n	8006938 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	33b0      	adds	r3, #176	@ 0xb0
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006916:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006918:	683a      	ldr	r2, [r7, #0]
 800691a:	88d2      	ldrh	r2, [r2, #6]
 800691c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	88db      	ldrh	r3, [r3, #6]
 8006922:	2b07      	cmp	r3, #7
 8006924:	bf28      	it	cs
 8006926:	2307      	movcs	r3, #7
 8006928:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	89fa      	ldrh	r2, [r7, #14]
 800692e:	4619      	mov	r1, r3
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f001 fd93 	bl	800845c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006936:	e090      	b.n	8006a5a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	785a      	ldrb	r2, [r3, #1]
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	88db      	ldrh	r3, [r3, #6]
 8006946:	2b3f      	cmp	r3, #63	@ 0x3f
 8006948:	d803      	bhi.n	8006952 <USBD_CDC_Setup+0xa6>
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	88db      	ldrh	r3, [r3, #6]
 800694e:	b2da      	uxtb	r2, r3
 8006950:	e000      	b.n	8006954 <USBD_CDC_Setup+0xa8>
 8006952:	2240      	movs	r2, #64	@ 0x40
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800695a:	6939      	ldr	r1, [r7, #16]
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006962:	461a      	mov	r2, r3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f001 fda5 	bl	80084b4 <USBD_CtlPrepareRx>
      break;
 800696a:	e076      	b.n	8006a5a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	33b0      	adds	r3, #176	@ 0xb0
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	7850      	ldrb	r0, [r2, #1]
 8006982:	2200      	movs	r2, #0
 8006984:	6839      	ldr	r1, [r7, #0]
 8006986:	4798      	blx	r3
      break;
 8006988:	e067      	b.n	8006a5a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	785b      	ldrb	r3, [r3, #1]
 800698e:	2b0b      	cmp	r3, #11
 8006990:	d851      	bhi.n	8006a36 <USBD_CDC_Setup+0x18a>
 8006992:	a201      	add	r2, pc, #4	@ (adr r2, 8006998 <USBD_CDC_Setup+0xec>)
 8006994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006998:	080069c9 	.word	0x080069c9
 800699c:	08006a45 	.word	0x08006a45
 80069a0:	08006a37 	.word	0x08006a37
 80069a4:	08006a37 	.word	0x08006a37
 80069a8:	08006a37 	.word	0x08006a37
 80069ac:	08006a37 	.word	0x08006a37
 80069b0:	08006a37 	.word	0x08006a37
 80069b4:	08006a37 	.word	0x08006a37
 80069b8:	08006a37 	.word	0x08006a37
 80069bc:	08006a37 	.word	0x08006a37
 80069c0:	080069f3 	.word	0x080069f3
 80069c4:	08006a1d 	.word	0x08006a1d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b03      	cmp	r3, #3
 80069d2:	d107      	bne.n	80069e4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80069d4:	f107 030a 	add.w	r3, r7, #10
 80069d8:	2202      	movs	r2, #2
 80069da:	4619      	mov	r1, r3
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f001 fd3d 	bl	800845c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069e2:	e032      	b.n	8006a4a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80069e4:	6839      	ldr	r1, [r7, #0]
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f001 fcbb 	bl	8008362 <USBD_CtlError>
            ret = USBD_FAIL;
 80069ec:	2303      	movs	r3, #3
 80069ee:	75fb      	strb	r3, [r7, #23]
          break;
 80069f0:	e02b      	b.n	8006a4a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b03      	cmp	r3, #3
 80069fc:	d107      	bne.n	8006a0e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80069fe:	f107 030d 	add.w	r3, r7, #13
 8006a02:	2201      	movs	r2, #1
 8006a04:	4619      	mov	r1, r3
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f001 fd28 	bl	800845c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a0c:	e01d      	b.n	8006a4a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a0e:	6839      	ldr	r1, [r7, #0]
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f001 fca6 	bl	8008362 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a16:	2303      	movs	r3, #3
 8006a18:	75fb      	strb	r3, [r7, #23]
          break;
 8006a1a:	e016      	b.n	8006a4a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b03      	cmp	r3, #3
 8006a26:	d00f      	beq.n	8006a48 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006a28:	6839      	ldr	r1, [r7, #0]
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f001 fc99 	bl	8008362 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a30:	2303      	movs	r3, #3
 8006a32:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a34:	e008      	b.n	8006a48 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f001 fc92 	bl	8008362 <USBD_CtlError>
          ret = USBD_FAIL;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	75fb      	strb	r3, [r7, #23]
          break;
 8006a42:	e002      	b.n	8006a4a <USBD_CDC_Setup+0x19e>
          break;
 8006a44:	bf00      	nop
 8006a46:	e008      	b.n	8006a5a <USBD_CDC_Setup+0x1ae>
          break;
 8006a48:	bf00      	nop
      }
      break;
 8006a4a:	e006      	b.n	8006a5a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006a4c:	6839      	ldr	r1, [r7, #0]
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f001 fc87 	bl	8008362 <USBD_CtlError>
      ret = USBD_FAIL;
 8006a54:	2303      	movs	r3, #3
 8006a56:	75fb      	strb	r3, [r7, #23]
      break;
 8006a58:	bf00      	nop
  }

  return (uint8_t)ret;
 8006a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3718      	adds	r7, #24
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006a76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	32b0      	adds	r2, #176	@ 0xb0
 8006a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d101      	bne.n	8006a8e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e065      	b.n	8006b5a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	32b0      	adds	r2, #176	@ 0xb0
 8006a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a9c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006a9e:	78fb      	ldrb	r3, [r7, #3]
 8006aa0:	f003 020f 	and.w	r2, r3, #15
 8006aa4:	6879      	ldr	r1, [r7, #4]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	440b      	add	r3, r1
 8006ab0:	3318      	adds	r3, #24
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d02f      	beq.n	8006b18 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006ab8:	78fb      	ldrb	r3, [r7, #3]
 8006aba:	f003 020f 	and.w	r2, r3, #15
 8006abe:	6879      	ldr	r1, [r7, #4]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	440b      	add	r3, r1
 8006aca:	3318      	adds	r3, #24
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	78fb      	ldrb	r3, [r7, #3]
 8006ad0:	f003 010f 	and.w	r1, r3, #15
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	00db      	lsls	r3, r3, #3
 8006ada:	440b      	add	r3, r1
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4403      	add	r3, r0
 8006ae0:	331c      	adds	r3, #28
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ae8:	fb01 f303 	mul.w	r3, r1, r3
 8006aec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d112      	bne.n	8006b18 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006af2:	78fb      	ldrb	r3, [r7, #3]
 8006af4:	f003 020f 	and.w	r2, r3, #15
 8006af8:	6879      	ldr	r1, [r7, #4]
 8006afa:	4613      	mov	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4413      	add	r3, r2
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	440b      	add	r3, r1
 8006b04:	3318      	adds	r3, #24
 8006b06:	2200      	movs	r2, #0
 8006b08:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b0a:	78f9      	ldrb	r1, [r7, #3]
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	2200      	movs	r2, #0
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f002 f99a 	bl	8008e4a <USBD_LL_Transmit>
 8006b16:	e01f      	b.n	8006b58 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	33b0      	adds	r3, #176	@ 0xb0
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d010      	beq.n	8006b58 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	33b0      	adds	r3, #176	@ 0xb0
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006b54:	78fa      	ldrb	r2, [r7, #3]
 8006b56:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b084      	sub	sp, #16
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	32b0      	adds	r2, #176	@ 0xb0
 8006b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b7c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	32b0      	adds	r2, #176	@ 0xb0
 8006b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d101      	bne.n	8006b94 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e01a      	b.n	8006bca <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b94:	78fb      	ldrb	r3, [r7, #3]
 8006b96:	4619      	mov	r1, r3
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f002 f998 	bl	8008ece <USBD_LL_GetRxDataSize>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	33b0      	adds	r3, #176	@ 0xb0
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006bc4:	4611      	mov	r1, r2
 8006bc6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b084      	sub	sp, #16
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	32b0      	adds	r2, #176	@ 0xb0
 8006be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e024      	b.n	8006c3e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	33b0      	adds	r3, #176	@ 0xb0
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d019      	beq.n	8006c3c <USBD_CDC_EP0_RxReady+0x6a>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006c0e:	2bff      	cmp	r3, #255	@ 0xff
 8006c10:	d014      	beq.n	8006c3c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	33b0      	adds	r3, #176	@ 0xb0
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006c2a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c32:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	22ff      	movs	r2, #255	@ 0xff
 8006c38:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
	...

08006c48 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c50:	2182      	movs	r1, #130	@ 0x82
 8006c52:	4818      	ldr	r0, [pc, #96]	@ (8006cb4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c54:	f000 fd4f 	bl	80076f6 <USBD_GetEpDesc>
 8006c58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c5a:	2101      	movs	r1, #1
 8006c5c:	4815      	ldr	r0, [pc, #84]	@ (8006cb4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c5e:	f000 fd4a 	bl	80076f6 <USBD_GetEpDesc>
 8006c62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c64:	2181      	movs	r1, #129	@ 0x81
 8006c66:	4813      	ldr	r0, [pc, #76]	@ (8006cb4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c68:	f000 fd45 	bl	80076f6 <USBD_GetEpDesc>
 8006c6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d002      	beq.n	8006c7a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	2210      	movs	r2, #16
 8006c78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d006      	beq.n	8006c8e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c88:	711a      	strb	r2, [r3, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d006      	beq.n	8006ca2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c9c:	711a      	strb	r2, [r3, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2243      	movs	r2, #67	@ 0x43
 8006ca6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006ca8:	4b02      	ldr	r3, [pc, #8]	@ (8006cb4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3718      	adds	r7, #24
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	20000050 	.word	0x20000050

08006cb8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006cc0:	2182      	movs	r1, #130	@ 0x82
 8006cc2:	4818      	ldr	r0, [pc, #96]	@ (8006d24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006cc4:	f000 fd17 	bl	80076f6 <USBD_GetEpDesc>
 8006cc8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006cca:	2101      	movs	r1, #1
 8006ccc:	4815      	ldr	r0, [pc, #84]	@ (8006d24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006cce:	f000 fd12 	bl	80076f6 <USBD_GetEpDesc>
 8006cd2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006cd4:	2181      	movs	r1, #129	@ 0x81
 8006cd6:	4813      	ldr	r0, [pc, #76]	@ (8006d24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006cd8:	f000 fd0d 	bl	80076f6 <USBD_GetEpDesc>
 8006cdc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	2210      	movs	r2, #16
 8006ce8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d006      	beq.n	8006cfe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	711a      	strb	r2, [r3, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f042 0202 	orr.w	r2, r2, #2
 8006cfc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d006      	beq.n	8006d12 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	711a      	strb	r2, [r3, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f042 0202 	orr.w	r2, r2, #2
 8006d10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2243      	movs	r2, #67	@ 0x43
 8006d16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d18:	4b02      	ldr	r3, [pc, #8]	@ (8006d24 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3718      	adds	r7, #24
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	20000050 	.word	0x20000050

08006d28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d30:	2182      	movs	r1, #130	@ 0x82
 8006d32:	4818      	ldr	r0, [pc, #96]	@ (8006d94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d34:	f000 fcdf 	bl	80076f6 <USBD_GetEpDesc>
 8006d38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	4815      	ldr	r0, [pc, #84]	@ (8006d94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d3e:	f000 fcda 	bl	80076f6 <USBD_GetEpDesc>
 8006d42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d44:	2181      	movs	r1, #129	@ 0x81
 8006d46:	4813      	ldr	r0, [pc, #76]	@ (8006d94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d48:	f000 fcd5 	bl	80076f6 <USBD_GetEpDesc>
 8006d4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d002      	beq.n	8006d5a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	2210      	movs	r2, #16
 8006d58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d006      	beq.n	8006d6e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d68:	711a      	strb	r2, [r3, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d006      	beq.n	8006d82 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d7c:	711a      	strb	r2, [r3, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2243      	movs	r2, #67	@ 0x43
 8006d86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d88:	4b02      	ldr	r3, [pc, #8]	@ (8006d94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3718      	adds	r7, #24
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	20000050 	.word	0x20000050

08006d98 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	220a      	movs	r2, #10
 8006da4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006da6:	4b03      	ldr	r3, [pc, #12]	@ (8006db4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	2000000c 	.word	0x2000000c

08006db8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d101      	bne.n	8006dcc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e009      	b.n	8006de0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	33b0      	adds	r3, #176	@ 0xb0
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4413      	add	r3, r2
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	32b0      	adds	r2, #176	@ 0xb0
 8006e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e06:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e008      	b.n	8006e24 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	371c      	adds	r7, #28
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	32b0      	adds	r2, #176	@ 0xb0
 8006e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e48:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e004      	b.n	8006e5e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	683a      	ldr	r2, [r7, #0]
 8006e58:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3714      	adds	r7, #20
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
	...

08006e6c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	32b0      	adds	r2, #176	@ 0xb0
 8006e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e82:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006e84:	2301      	movs	r3, #1
 8006e86:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e025      	b.n	8006ede <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d11f      	bne.n	8006edc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006ea4:	4b10      	ldr	r3, [pc, #64]	@ (8006ee8 <USBD_CDC_TransmitPacket+0x7c>)
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	f003 020f 	and.w	r2, r3, #15
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	4413      	add	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4403      	add	r3, r0
 8006ebe:	3318      	adds	r3, #24
 8006ec0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006ec2:	4b09      	ldr	r3, [pc, #36]	@ (8006ee8 <USBD_CDC_TransmitPacket+0x7c>)
 8006ec4:	7819      	ldrb	r1, [r3, #0]
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f001 ffb9 	bl	8008e4a <USBD_LL_Transmit>

    ret = USBD_OK;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	20000093 	.word	0x20000093

08006eec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	32b0      	adds	r2, #176	@ 0xb0
 8006efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f02:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	32b0      	adds	r2, #176	@ 0xb0
 8006f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e018      	b.n	8006f4c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	7c1b      	ldrb	r3, [r3, #16]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10a      	bne.n	8006f38 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f22:	4b0c      	ldr	r3, [pc, #48]	@ (8006f54 <USBD_CDC_ReceivePacket+0x68>)
 8006f24:	7819      	ldrb	r1, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006f2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f001 ffab 	bl	8008e8c <USBD_LL_PrepareReceive>
 8006f36:	e008      	b.n	8006f4a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f38:	4b06      	ldr	r3, [pc, #24]	@ (8006f54 <USBD_CDC_ReceivePacket+0x68>)
 8006f3a:	7819      	ldrb	r1, [r3, #0]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006f42:	2340      	movs	r3, #64	@ 0x40
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f001 ffa1 	bl	8008e8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	20000094 	.word	0x20000094

08006f58 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b086      	sub	sp, #24
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	4613      	mov	r3, r2
 8006f64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d101      	bne.n	8006f70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	e01f      	b.n	8006fb0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d003      	beq.n	8006f96 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	79fa      	ldrb	r2, [r7, #7]
 8006fa2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f001 fe1b 	bl	8008be0 <USBD_LL_Init>
 8006faa:	4603      	mov	r3, r0
 8006fac:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3718      	adds	r7, #24
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d101      	bne.n	8006fd0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e025      	b.n	800701c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	32ae      	adds	r2, #174	@ 0xae
 8006fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00f      	beq.n	800700c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	32ae      	adds	r2, #174	@ 0xae
 8006ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ffc:	f107 020e 	add.w	r2, r7, #14
 8007000:	4610      	mov	r0, r2
 8007002:	4798      	blx	r3
 8007004:	4602      	mov	r2, r0
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007012:	1c5a      	adds	r2, r3, #1
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f001 fe23 	bl	8008c78 <USBD_LL_Start>
 8007032:	4603      	mov	r3, r0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007044:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007046:	4618      	mov	r0, r3
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b084      	sub	sp, #16
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
 800705a:	460b      	mov	r3, r1
 800705c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800705e:	2300      	movs	r3, #0
 8007060:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007068:	2b00      	cmp	r3, #0
 800706a:	d009      	beq.n	8007080 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	78fa      	ldrb	r2, [r7, #3]
 8007076:	4611      	mov	r1, r2
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	4798      	blx	r3
 800707c:	4603      	mov	r3, r0
 800707e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007080:	7bfb      	ldrb	r3, [r7, #15]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b084      	sub	sp, #16
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
 8007092:	460b      	mov	r3, r1
 8007094:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007096:	2300      	movs	r3, #0
 8007098:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	78fa      	ldrb	r2, [r7, #3]
 80070a4:	4611      	mov	r1, r2
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	4798      	blx	r3
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d001      	beq.n	80070b4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80070b0:	2303      	movs	r3, #3
 80070b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80070b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b084      	sub	sp, #16
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
 80070c6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80070ce:	6839      	ldr	r1, [r7, #0]
 80070d0:	4618      	mov	r0, r3
 80070d2:	f001 f90c 	bl	80082ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80070e4:	461a      	mov	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80070f2:	f003 031f 	and.w	r3, r3, #31
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d01a      	beq.n	8007130 <USBD_LL_SetupStage+0x72>
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d822      	bhi.n	8007144 <USBD_LL_SetupStage+0x86>
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d002      	beq.n	8007108 <USBD_LL_SetupStage+0x4a>
 8007102:	2b01      	cmp	r3, #1
 8007104:	d00a      	beq.n	800711c <USBD_LL_SetupStage+0x5e>
 8007106:	e01d      	b.n	8007144 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800710e:	4619      	mov	r1, r3
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fb63 	bl	80077dc <USBD_StdDevReq>
 8007116:	4603      	mov	r3, r0
 8007118:	73fb      	strb	r3, [r7, #15]
      break;
 800711a:	e020      	b.n	800715e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007122:	4619      	mov	r1, r3
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fbcb 	bl	80078c0 <USBD_StdItfReq>
 800712a:	4603      	mov	r3, r0
 800712c:	73fb      	strb	r3, [r7, #15]
      break;
 800712e:	e016      	b.n	800715e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007136:	4619      	mov	r1, r3
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fc2d 	bl	8007998 <USBD_StdEPReq>
 800713e:	4603      	mov	r3, r0
 8007140:	73fb      	strb	r3, [r7, #15]
      break;
 8007142:	e00c      	b.n	800715e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800714a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800714e:	b2db      	uxtb	r3, r3
 8007150:	4619      	mov	r1, r3
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f001 fdf0 	bl	8008d38 <USBD_LL_StallEP>
 8007158:	4603      	mov	r3, r0
 800715a:	73fb      	strb	r3, [r7, #15]
      break;
 800715c:	bf00      	nop
  }

  return ret;
 800715e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007160:	4618      	mov	r0, r3
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	460b      	mov	r3, r1
 8007172:	607a      	str	r2, [r7, #4]
 8007174:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007176:	2300      	movs	r3, #0
 8007178:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800717a:	7afb      	ldrb	r3, [r7, #11]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d16e      	bne.n	800725e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007186:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800718e:	2b03      	cmp	r3, #3
 8007190:	f040 8098 	bne.w	80072c4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	689a      	ldr	r2, [r3, #8]
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	429a      	cmp	r2, r3
 800719e:	d913      	bls.n	80071c8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	689a      	ldr	r2, [r3, #8]
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	1ad2      	subs	r2, r2, r3
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	68da      	ldr	r2, [r3, #12]
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	4293      	cmp	r3, r2
 80071b8:	bf28      	it	cs
 80071ba:	4613      	movcs	r3, r2
 80071bc:	461a      	mov	r2, r3
 80071be:	6879      	ldr	r1, [r7, #4]
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f001 f994 	bl	80084ee <USBD_CtlContinueRx>
 80071c6:	e07d      	b.n	80072c4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80071ce:	f003 031f 	and.w	r3, r3, #31
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d014      	beq.n	8007200 <USBD_LL_DataOutStage+0x98>
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d81d      	bhi.n	8007216 <USBD_LL_DataOutStage+0xae>
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d002      	beq.n	80071e4 <USBD_LL_DataOutStage+0x7c>
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d003      	beq.n	80071ea <USBD_LL_DataOutStage+0x82>
 80071e2:	e018      	b.n	8007216 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80071e4:	2300      	movs	r3, #0
 80071e6:	75bb      	strb	r3, [r7, #22]
            break;
 80071e8:	e018      	b.n	800721c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	4619      	mov	r1, r3
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f000 fa64 	bl	80076c2 <USBD_CoreFindIF>
 80071fa:	4603      	mov	r3, r0
 80071fc:	75bb      	strb	r3, [r7, #22]
            break;
 80071fe:	e00d      	b.n	800721c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007206:	b2db      	uxtb	r3, r3
 8007208:	4619      	mov	r1, r3
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f000 fa66 	bl	80076dc <USBD_CoreFindEP>
 8007210:	4603      	mov	r3, r0
 8007212:	75bb      	strb	r3, [r7, #22]
            break;
 8007214:	e002      	b.n	800721c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007216:	2300      	movs	r3, #0
 8007218:	75bb      	strb	r3, [r7, #22]
            break;
 800721a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800721c:	7dbb      	ldrb	r3, [r7, #22]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d119      	bne.n	8007256 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b03      	cmp	r3, #3
 800722c:	d113      	bne.n	8007256 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800722e:	7dba      	ldrb	r2, [r7, #22]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	32ae      	adds	r2, #174	@ 0xae
 8007234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00b      	beq.n	8007256 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800723e:	7dba      	ldrb	r2, [r7, #22]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007246:	7dba      	ldrb	r2, [r7, #22]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	32ae      	adds	r2, #174	@ 0xae
 800724c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f001 f95a 	bl	8008510 <USBD_CtlSendStatus>
 800725c:	e032      	b.n	80072c4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800725e:	7afb      	ldrb	r3, [r7, #11]
 8007260:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007264:	b2db      	uxtb	r3, r3
 8007266:	4619      	mov	r1, r3
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f000 fa37 	bl	80076dc <USBD_CoreFindEP>
 800726e:	4603      	mov	r3, r0
 8007270:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007272:	7dbb      	ldrb	r3, [r7, #22]
 8007274:	2bff      	cmp	r3, #255	@ 0xff
 8007276:	d025      	beq.n	80072c4 <USBD_LL_DataOutStage+0x15c>
 8007278:	7dbb      	ldrb	r3, [r7, #22]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d122      	bne.n	80072c4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b03      	cmp	r3, #3
 8007288:	d117      	bne.n	80072ba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800728a:	7dba      	ldrb	r2, [r7, #22]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	32ae      	adds	r2, #174	@ 0xae
 8007290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00f      	beq.n	80072ba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800729a:	7dba      	ldrb	r2, [r7, #22]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80072a2:	7dba      	ldrb	r2, [r7, #22]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	32ae      	adds	r2, #174	@ 0xae
 80072a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	7afa      	ldrb	r2, [r7, #11]
 80072b0:	4611      	mov	r1, r2
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	4798      	blx	r3
 80072b6:	4603      	mov	r3, r0
 80072b8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80072ba:	7dfb      	ldrb	r3, [r7, #23]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d001      	beq.n	80072c4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80072c0:	7dfb      	ldrb	r3, [r7, #23]
 80072c2:	e000      	b.n	80072c6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3718      	adds	r7, #24
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b086      	sub	sp, #24
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	60f8      	str	r0, [r7, #12]
 80072d6:	460b      	mov	r3, r1
 80072d8:	607a      	str	r2, [r7, #4]
 80072da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80072dc:	7afb      	ldrb	r3, [r7, #11]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d16f      	bne.n	80073c2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	3314      	adds	r3, #20
 80072e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d15a      	bne.n	80073a8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	689a      	ldr	r2, [r3, #8]
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d914      	bls.n	8007328 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	689a      	ldr	r2, [r3, #8]
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	1ad2      	subs	r2, r2, r3
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	461a      	mov	r2, r3
 8007312:	6879      	ldr	r1, [r7, #4]
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f001 f8bc 	bl	8008492 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800731a:	2300      	movs	r3, #0
 800731c:	2200      	movs	r2, #0
 800731e:	2100      	movs	r1, #0
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f001 fdb3 	bl	8008e8c <USBD_LL_PrepareReceive>
 8007326:	e03f      	b.n	80073a8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	68da      	ldr	r2, [r3, #12]
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	429a      	cmp	r2, r3
 8007332:	d11c      	bne.n	800736e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800733c:	429a      	cmp	r2, r3
 800733e:	d316      	bcc.n	800736e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	685a      	ldr	r2, [r3, #4]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800734a:	429a      	cmp	r2, r3
 800734c:	d20f      	bcs.n	800736e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800734e:	2200      	movs	r2, #0
 8007350:	2100      	movs	r1, #0
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f001 f89d 	bl	8008492 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007360:	2300      	movs	r3, #0
 8007362:	2200      	movs	r2, #0
 8007364:	2100      	movs	r1, #0
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f001 fd90 	bl	8008e8c <USBD_LL_PrepareReceive>
 800736c:	e01c      	b.n	80073a8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b03      	cmp	r3, #3
 8007378:	d10f      	bne.n	800739a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d009      	beq.n	800739a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800739a:	2180      	movs	r1, #128	@ 0x80
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f001 fccb 	bl	8008d38 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	f001 f8c7 	bl	8008536 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d03a      	beq.n	8007428 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f7ff fe42 	bl	800703c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80073c0:	e032      	b.n	8007428 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80073c2:	7afb      	ldrb	r3, [r7, #11]
 80073c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	4619      	mov	r1, r3
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f000 f985 	bl	80076dc <USBD_CoreFindEP>
 80073d2:	4603      	mov	r3, r0
 80073d4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073d6:	7dfb      	ldrb	r3, [r7, #23]
 80073d8:	2bff      	cmp	r3, #255	@ 0xff
 80073da:	d025      	beq.n	8007428 <USBD_LL_DataInStage+0x15a>
 80073dc:	7dfb      	ldrb	r3, [r7, #23]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d122      	bne.n	8007428 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b03      	cmp	r3, #3
 80073ec:	d11c      	bne.n	8007428 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80073ee:	7dfa      	ldrb	r2, [r7, #23]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	32ae      	adds	r2, #174	@ 0xae
 80073f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d014      	beq.n	8007428 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80073fe:	7dfa      	ldrb	r2, [r7, #23]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007406:	7dfa      	ldrb	r2, [r7, #23]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	32ae      	adds	r2, #174	@ 0xae
 800740c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007410:	695b      	ldr	r3, [r3, #20]
 8007412:	7afa      	ldrb	r2, [r7, #11]
 8007414:	4611      	mov	r1, r2
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	4798      	blx	r3
 800741a:	4603      	mov	r3, r0
 800741c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800741e:	7dbb      	ldrb	r3, [r7, #22]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d001      	beq.n	8007428 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007424:	7dbb      	ldrb	r3, [r7, #22]
 8007426:	e000      	b.n	800742a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3718      	adds	r7, #24
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b084      	sub	sp, #16
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800743a:	2300      	movs	r3, #0
 800743c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800746a:	2b00      	cmp	r3, #0
 800746c:	d014      	beq.n	8007498 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00e      	beq.n	8007498 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	6852      	ldr	r2, [r2, #4]
 8007486:	b2d2      	uxtb	r2, r2
 8007488:	4611      	mov	r1, r2
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	4798      	blx	r3
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d001      	beq.n	8007498 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007494:	2303      	movs	r3, #3
 8007496:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007498:	2340      	movs	r3, #64	@ 0x40
 800749a:	2200      	movs	r2, #0
 800749c:	2100      	movs	r1, #0
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f001 fc05 	bl	8008cae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2240      	movs	r2, #64	@ 0x40
 80074b0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074b4:	2340      	movs	r3, #64	@ 0x40
 80074b6:	2200      	movs	r2, #0
 80074b8:	2180      	movs	r1, #128	@ 0x80
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f001 fbf7 	bl	8008cae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2240      	movs	r2, #64	@ 0x40
 80074ca:	621a      	str	r2, [r3, #32]

  return ret;
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b083      	sub	sp, #12
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	460b      	mov	r3, r1
 80074e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	78fa      	ldrb	r2, [r7, #3]
 80074e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	370c      	adds	r7, #12
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b083      	sub	sp, #12
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b04      	cmp	r3, #4
 8007508:	d006      	beq.n	8007518 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007510:	b2da      	uxtb	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2204      	movs	r2, #4
 800751c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	370c      	adds	r7, #12
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800752e:	b480      	push	{r7}
 8007530:	b083      	sub	sp, #12
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b04      	cmp	r3, #4
 8007540:	d106      	bne.n	8007550 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007548:	b2da      	uxtb	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	370c      	adds	r7, #12
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr

0800755e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b082      	sub	sp, #8
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b03      	cmp	r3, #3
 8007570:	d110      	bne.n	8007594 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00b      	beq.n	8007594 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007582:	69db      	ldr	r3, [r3, #28]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d005      	beq.n	8007594 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800758e:	69db      	ldr	r3, [r3, #28]
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b082      	sub	sp, #8
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
 80075a6:	460b      	mov	r3, r1
 80075a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	32ae      	adds	r2, #174	@ 0xae
 80075b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d101      	bne.n	80075c0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80075bc:	2303      	movs	r3, #3
 80075be:	e01c      	b.n	80075fa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b03      	cmp	r3, #3
 80075ca:	d115      	bne.n	80075f8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	32ae      	adds	r2, #174	@ 0xae
 80075d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075da:	6a1b      	ldr	r3, [r3, #32]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00b      	beq.n	80075f8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	32ae      	adds	r2, #174	@ 0xae
 80075ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ee:	6a1b      	ldr	r3, [r3, #32]
 80075f0:	78fa      	ldrb	r2, [r7, #3]
 80075f2:	4611      	mov	r1, r2
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3708      	adds	r7, #8
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b082      	sub	sp, #8
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
 800760a:	460b      	mov	r3, r1
 800760c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	32ae      	adds	r2, #174	@ 0xae
 8007618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007620:	2303      	movs	r3, #3
 8007622:	e01c      	b.n	800765e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b03      	cmp	r3, #3
 800762e:	d115      	bne.n	800765c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	32ae      	adds	r2, #174	@ 0xae
 800763a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800763e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00b      	beq.n	800765c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	32ae      	adds	r2, #174	@ 0xae
 800764e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007654:	78fa      	ldrb	r2, [r7, #3]
 8007656:	4611      	mov	r1, r2
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007666:	b480      	push	{r7}
 8007668:	b083      	sub	sp, #12
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007684:	2300      	movs	r3, #0
 8007686:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00e      	beq.n	80076b8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	6852      	ldr	r2, [r2, #4]
 80076a6:	b2d2      	uxtb	r2, r2
 80076a8:	4611      	mov	r1, r2
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	4798      	blx	r3
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d001      	beq.n	80076b8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80076b4:	2303      	movs	r3, #3
 80076b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80076b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b083      	sub	sp, #12
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
 80076ca:	460b      	mov	r3, r1
 80076cc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80076ce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	460b      	mov	r3, r1
 80076e6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80076e8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	370c      	adds	r7, #12
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr

080076f6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b086      	sub	sp, #24
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
 80076fe:	460b      	mov	r3, r1
 8007700:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800770a:	2300      	movs	r3, #0
 800770c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	885b      	ldrh	r3, [r3, #2]
 8007712:	b29b      	uxth	r3, r3
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	7812      	ldrb	r2, [r2, #0]
 8007718:	4293      	cmp	r3, r2
 800771a:	d91f      	bls.n	800775c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007722:	e013      	b.n	800774c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007724:	f107 030a 	add.w	r3, r7, #10
 8007728:	4619      	mov	r1, r3
 800772a:	6978      	ldr	r0, [r7, #20]
 800772c:	f000 f81b 	bl	8007766 <USBD_GetNextDesc>
 8007730:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	785b      	ldrb	r3, [r3, #1]
 8007736:	2b05      	cmp	r3, #5
 8007738:	d108      	bne.n	800774c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	789b      	ldrb	r3, [r3, #2]
 8007742:	78fa      	ldrb	r2, [r7, #3]
 8007744:	429a      	cmp	r2, r3
 8007746:	d008      	beq.n	800775a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007748:	2300      	movs	r3, #0
 800774a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	885b      	ldrh	r3, [r3, #2]
 8007750:	b29a      	uxth	r2, r3
 8007752:	897b      	ldrh	r3, [r7, #10]
 8007754:	429a      	cmp	r2, r3
 8007756:	d8e5      	bhi.n	8007724 <USBD_GetEpDesc+0x2e>
 8007758:	e000      	b.n	800775c <USBD_GetEpDesc+0x66>
          break;
 800775a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800775c:	693b      	ldr	r3, [r7, #16]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3718      	adds	r7, #24
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007766:	b480      	push	{r7}
 8007768:	b085      	sub	sp, #20
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
 800776e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	881b      	ldrh	r3, [r3, #0]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	7812      	ldrb	r2, [r2, #0]
 800777c:	4413      	add	r3, r2
 800777e:	b29a      	uxth	r2, r3
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	461a      	mov	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4413      	add	r3, r2
 800778e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007790:	68fb      	ldr	r3, [r7, #12]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3714      	adds	r7, #20
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800779e:	b480      	push	{r7}
 80077a0:	b087      	sub	sp, #28
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	3301      	adds	r3, #1
 80077b4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80077bc:	8a3b      	ldrh	r3, [r7, #16]
 80077be:	021b      	lsls	r3, r3, #8
 80077c0:	b21a      	sxth	r2, r3
 80077c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	b21b      	sxth	r3, r3
 80077ca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80077cc:	89fb      	ldrh	r3, [r7, #14]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	371c      	adds	r7, #28
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
	...

080077dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80077f2:	2b40      	cmp	r3, #64	@ 0x40
 80077f4:	d005      	beq.n	8007802 <USBD_StdDevReq+0x26>
 80077f6:	2b40      	cmp	r3, #64	@ 0x40
 80077f8:	d857      	bhi.n	80078aa <USBD_StdDevReq+0xce>
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00f      	beq.n	800781e <USBD_StdDevReq+0x42>
 80077fe:	2b20      	cmp	r3, #32
 8007800:	d153      	bne.n	80078aa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	32ae      	adds	r2, #174	@ 0xae
 800780c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	6839      	ldr	r1, [r7, #0]
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	4798      	blx	r3
 8007818:	4603      	mov	r3, r0
 800781a:	73fb      	strb	r3, [r7, #15]
      break;
 800781c:	e04a      	b.n	80078b4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	785b      	ldrb	r3, [r3, #1]
 8007822:	2b09      	cmp	r3, #9
 8007824:	d83b      	bhi.n	800789e <USBD_StdDevReq+0xc2>
 8007826:	a201      	add	r2, pc, #4	@ (adr r2, 800782c <USBD_StdDevReq+0x50>)
 8007828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782c:	08007881 	.word	0x08007881
 8007830:	08007895 	.word	0x08007895
 8007834:	0800789f 	.word	0x0800789f
 8007838:	0800788b 	.word	0x0800788b
 800783c:	0800789f 	.word	0x0800789f
 8007840:	0800785f 	.word	0x0800785f
 8007844:	08007855 	.word	0x08007855
 8007848:	0800789f 	.word	0x0800789f
 800784c:	08007877 	.word	0x08007877
 8007850:	08007869 	.word	0x08007869
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fa3c 	bl	8007cd4 <USBD_GetDescriptor>
          break;
 800785c:	e024      	b.n	80078a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fba1 	bl	8007fa8 <USBD_SetAddress>
          break;
 8007866:	e01f      	b.n	80078a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fbe0 	bl	8008030 <USBD_SetConfig>
 8007870:	4603      	mov	r3, r0
 8007872:	73fb      	strb	r3, [r7, #15]
          break;
 8007874:	e018      	b.n	80078a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fc83 	bl	8008184 <USBD_GetConfig>
          break;
 800787e:	e013      	b.n	80078a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007880:	6839      	ldr	r1, [r7, #0]
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fcb4 	bl	80081f0 <USBD_GetStatus>
          break;
 8007888:	e00e      	b.n	80078a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fce3 	bl	8008258 <USBD_SetFeature>
          break;
 8007892:	e009      	b.n	80078a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fd07 	bl	80082aa <USBD_ClrFeature>
          break;
 800789c:	e004      	b.n	80078a8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fd5e 	bl	8008362 <USBD_CtlError>
          break;
 80078a6:	bf00      	nop
      }
      break;
 80078a8:	e004      	b.n	80078b4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80078aa:	6839      	ldr	r1, [r7, #0]
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fd58 	bl	8008362 <USBD_CtlError>
      break;
 80078b2:	bf00      	nop
  }

  return ret;
 80078b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop

080078c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ca:	2300      	movs	r3, #0
 80078cc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80078d6:	2b40      	cmp	r3, #64	@ 0x40
 80078d8:	d005      	beq.n	80078e6 <USBD_StdItfReq+0x26>
 80078da:	2b40      	cmp	r3, #64	@ 0x40
 80078dc:	d852      	bhi.n	8007984 <USBD_StdItfReq+0xc4>
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d001      	beq.n	80078e6 <USBD_StdItfReq+0x26>
 80078e2:	2b20      	cmp	r3, #32
 80078e4:	d14e      	bne.n	8007984 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	3b01      	subs	r3, #1
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d840      	bhi.n	8007976 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	889b      	ldrh	r3, [r3, #4]
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d836      	bhi.n	800796c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	889b      	ldrh	r3, [r3, #4]
 8007902:	b2db      	uxtb	r3, r3
 8007904:	4619      	mov	r1, r3
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7ff fedb 	bl	80076c2 <USBD_CoreFindIF>
 800790c:	4603      	mov	r3, r0
 800790e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007910:	7bbb      	ldrb	r3, [r7, #14]
 8007912:	2bff      	cmp	r3, #255	@ 0xff
 8007914:	d01d      	beq.n	8007952 <USBD_StdItfReq+0x92>
 8007916:	7bbb      	ldrb	r3, [r7, #14]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d11a      	bne.n	8007952 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800791c:	7bba      	ldrb	r2, [r7, #14]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	32ae      	adds	r2, #174	@ 0xae
 8007922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00f      	beq.n	800794c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800792c:	7bba      	ldrb	r2, [r7, #14]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007934:	7bba      	ldrb	r2, [r7, #14]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	32ae      	adds	r2, #174	@ 0xae
 800793a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	6839      	ldr	r1, [r7, #0]
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	4798      	blx	r3
 8007946:	4603      	mov	r3, r0
 8007948:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800794a:	e004      	b.n	8007956 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800794c:	2303      	movs	r3, #3
 800794e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007950:	e001      	b.n	8007956 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007952:	2303      	movs	r3, #3
 8007954:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	88db      	ldrh	r3, [r3, #6]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d110      	bne.n	8007980 <USBD_StdItfReq+0xc0>
 800795e:	7bfb      	ldrb	r3, [r7, #15]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10d      	bne.n	8007980 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 fdd3 	bl	8008510 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800796a:	e009      	b.n	8007980 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800796c:	6839      	ldr	r1, [r7, #0]
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 fcf7 	bl	8008362 <USBD_CtlError>
          break;
 8007974:	e004      	b.n	8007980 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007976:	6839      	ldr	r1, [r7, #0]
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fcf2 	bl	8008362 <USBD_CtlError>
          break;
 800797e:	e000      	b.n	8007982 <USBD_StdItfReq+0xc2>
          break;
 8007980:	bf00      	nop
      }
      break;
 8007982:	e004      	b.n	800798e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007984:	6839      	ldr	r1, [r7, #0]
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fceb 	bl	8008362 <USBD_CtlError>
      break;
 800798c:	bf00      	nop
  }

  return ret;
 800798e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80079a2:	2300      	movs	r3, #0
 80079a4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	889b      	ldrh	r3, [r3, #4]
 80079aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80079b4:	2b40      	cmp	r3, #64	@ 0x40
 80079b6:	d007      	beq.n	80079c8 <USBD_StdEPReq+0x30>
 80079b8:	2b40      	cmp	r3, #64	@ 0x40
 80079ba:	f200 817f 	bhi.w	8007cbc <USBD_StdEPReq+0x324>
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d02a      	beq.n	8007a18 <USBD_StdEPReq+0x80>
 80079c2:	2b20      	cmp	r3, #32
 80079c4:	f040 817a 	bne.w	8007cbc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80079c8:	7bbb      	ldrb	r3, [r7, #14]
 80079ca:	4619      	mov	r1, r3
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7ff fe85 	bl	80076dc <USBD_CoreFindEP>
 80079d2:	4603      	mov	r3, r0
 80079d4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079d6:	7b7b      	ldrb	r3, [r7, #13]
 80079d8:	2bff      	cmp	r3, #255	@ 0xff
 80079da:	f000 8174 	beq.w	8007cc6 <USBD_StdEPReq+0x32e>
 80079de:	7b7b      	ldrb	r3, [r7, #13]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f040 8170 	bne.w	8007cc6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80079e6:	7b7a      	ldrb	r2, [r7, #13]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80079ee:	7b7a      	ldrb	r2, [r7, #13]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	32ae      	adds	r2, #174	@ 0xae
 80079f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f000 8163 	beq.w	8007cc6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007a00:	7b7a      	ldrb	r2, [r7, #13]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	32ae      	adds	r2, #174	@ 0xae
 8007a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	4798      	blx	r3
 8007a12:	4603      	mov	r3, r0
 8007a14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a16:	e156      	b.n	8007cc6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	785b      	ldrb	r3, [r3, #1]
 8007a1c:	2b03      	cmp	r3, #3
 8007a1e:	d008      	beq.n	8007a32 <USBD_StdEPReq+0x9a>
 8007a20:	2b03      	cmp	r3, #3
 8007a22:	f300 8145 	bgt.w	8007cb0 <USBD_StdEPReq+0x318>
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f000 809b 	beq.w	8007b62 <USBD_StdEPReq+0x1ca>
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d03c      	beq.n	8007aaa <USBD_StdEPReq+0x112>
 8007a30:	e13e      	b.n	8007cb0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d002      	beq.n	8007a44 <USBD_StdEPReq+0xac>
 8007a3e:	2b03      	cmp	r3, #3
 8007a40:	d016      	beq.n	8007a70 <USBD_StdEPReq+0xd8>
 8007a42:	e02c      	b.n	8007a9e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a44:	7bbb      	ldrb	r3, [r7, #14]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00d      	beq.n	8007a66 <USBD_StdEPReq+0xce>
 8007a4a:	7bbb      	ldrb	r3, [r7, #14]
 8007a4c:	2b80      	cmp	r3, #128	@ 0x80
 8007a4e:	d00a      	beq.n	8007a66 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a50:	7bbb      	ldrb	r3, [r7, #14]
 8007a52:	4619      	mov	r1, r3
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f001 f96f 	bl	8008d38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a5a:	2180      	movs	r1, #128	@ 0x80
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f001 f96b 	bl	8008d38 <USBD_LL_StallEP>
 8007a62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a64:	e020      	b.n	8007aa8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007a66:	6839      	ldr	r1, [r7, #0]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 fc7a 	bl	8008362 <USBD_CtlError>
              break;
 8007a6e:	e01b      	b.n	8007aa8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	885b      	ldrh	r3, [r3, #2]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d10e      	bne.n	8007a96 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a78:	7bbb      	ldrb	r3, [r7, #14]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00b      	beq.n	8007a96 <USBD_StdEPReq+0xfe>
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
 8007a80:	2b80      	cmp	r3, #128	@ 0x80
 8007a82:	d008      	beq.n	8007a96 <USBD_StdEPReq+0xfe>
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	88db      	ldrh	r3, [r3, #6]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d104      	bne.n	8007a96 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a8c:	7bbb      	ldrb	r3, [r7, #14]
 8007a8e:	4619      	mov	r1, r3
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f001 f951 	bl	8008d38 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 fd3a 	bl	8008510 <USBD_CtlSendStatus>

              break;
 8007a9c:	e004      	b.n	8007aa8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007a9e:	6839      	ldr	r1, [r7, #0]
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 fc5e 	bl	8008362 <USBD_CtlError>
              break;
 8007aa6:	bf00      	nop
          }
          break;
 8007aa8:	e107      	b.n	8007cba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d002      	beq.n	8007abc <USBD_StdEPReq+0x124>
 8007ab6:	2b03      	cmp	r3, #3
 8007ab8:	d016      	beq.n	8007ae8 <USBD_StdEPReq+0x150>
 8007aba:	e04b      	b.n	8007b54 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007abc:	7bbb      	ldrb	r3, [r7, #14]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00d      	beq.n	8007ade <USBD_StdEPReq+0x146>
 8007ac2:	7bbb      	ldrb	r3, [r7, #14]
 8007ac4:	2b80      	cmp	r3, #128	@ 0x80
 8007ac6:	d00a      	beq.n	8007ade <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ac8:	7bbb      	ldrb	r3, [r7, #14]
 8007aca:	4619      	mov	r1, r3
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f001 f933 	bl	8008d38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ad2:	2180      	movs	r1, #128	@ 0x80
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f001 f92f 	bl	8008d38 <USBD_LL_StallEP>
 8007ada:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007adc:	e040      	b.n	8007b60 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007ade:	6839      	ldr	r1, [r7, #0]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fc3e 	bl	8008362 <USBD_CtlError>
              break;
 8007ae6:	e03b      	b.n	8007b60 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	885b      	ldrh	r3, [r3, #2]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d136      	bne.n	8007b5e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007af0:	7bbb      	ldrb	r3, [r7, #14]
 8007af2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d004      	beq.n	8007b04 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007afa:	7bbb      	ldrb	r3, [r7, #14]
 8007afc:	4619      	mov	r1, r3
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f001 f939 	bl	8008d76 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fd03 	bl	8008510 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007b0a:	7bbb      	ldrb	r3, [r7, #14]
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f7ff fde4 	bl	80076dc <USBD_CoreFindEP>
 8007b14:	4603      	mov	r3, r0
 8007b16:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b18:	7b7b      	ldrb	r3, [r7, #13]
 8007b1a:	2bff      	cmp	r3, #255	@ 0xff
 8007b1c:	d01f      	beq.n	8007b5e <USBD_StdEPReq+0x1c6>
 8007b1e:	7b7b      	ldrb	r3, [r7, #13]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d11c      	bne.n	8007b5e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007b24:	7b7a      	ldrb	r2, [r7, #13]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007b2c:	7b7a      	ldrb	r2, [r7, #13]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	32ae      	adds	r2, #174	@ 0xae
 8007b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d010      	beq.n	8007b5e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b3c:	7b7a      	ldrb	r2, [r7, #13]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	32ae      	adds	r2, #174	@ 0xae
 8007b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	6839      	ldr	r1, [r7, #0]
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	4798      	blx	r3
 8007b4e:	4603      	mov	r3, r0
 8007b50:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007b52:	e004      	b.n	8007b5e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007b54:	6839      	ldr	r1, [r7, #0]
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fc03 	bl	8008362 <USBD_CtlError>
              break;
 8007b5c:	e000      	b.n	8007b60 <USBD_StdEPReq+0x1c8>
              break;
 8007b5e:	bf00      	nop
          }
          break;
 8007b60:	e0ab      	b.n	8007cba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d002      	beq.n	8007b74 <USBD_StdEPReq+0x1dc>
 8007b6e:	2b03      	cmp	r3, #3
 8007b70:	d032      	beq.n	8007bd8 <USBD_StdEPReq+0x240>
 8007b72:	e097      	b.n	8007ca4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b74:	7bbb      	ldrb	r3, [r7, #14]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d007      	beq.n	8007b8a <USBD_StdEPReq+0x1f2>
 8007b7a:	7bbb      	ldrb	r3, [r7, #14]
 8007b7c:	2b80      	cmp	r3, #128	@ 0x80
 8007b7e:	d004      	beq.n	8007b8a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007b80:	6839      	ldr	r1, [r7, #0]
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fbed 	bl	8008362 <USBD_CtlError>
                break;
 8007b88:	e091      	b.n	8007cae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	da0b      	bge.n	8007baa <USBD_StdEPReq+0x212>
 8007b92:	7bbb      	ldrb	r3, [r7, #14]
 8007b94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b98:	4613      	mov	r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4413      	add	r3, r2
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	3310      	adds	r3, #16
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	3304      	adds	r3, #4
 8007ba8:	e00b      	b.n	8007bc2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007baa:	7bbb      	ldrb	r3, [r7, #14]
 8007bac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4413      	add	r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	3304      	adds	r3, #4
 8007bc2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	2202      	movs	r2, #2
 8007bce:	4619      	mov	r1, r3
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 fc43 	bl	800845c <USBD_CtlSendData>
              break;
 8007bd6:	e06a      	b.n	8007cae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007bd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	da11      	bge.n	8007c04 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007be0:	7bbb      	ldrb	r3, [r7, #14]
 8007be2:	f003 020f 	and.w	r2, r3, #15
 8007be6:	6879      	ldr	r1, [r7, #4]
 8007be8:	4613      	mov	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	440b      	add	r3, r1
 8007bf2:	3324      	adds	r3, #36	@ 0x24
 8007bf4:	881b      	ldrh	r3, [r3, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d117      	bne.n	8007c2a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007bfa:	6839      	ldr	r1, [r7, #0]
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 fbb0 	bl	8008362 <USBD_CtlError>
                  break;
 8007c02:	e054      	b.n	8007cae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c04:	7bbb      	ldrb	r3, [r7, #14]
 8007c06:	f003 020f 	and.w	r2, r3, #15
 8007c0a:	6879      	ldr	r1, [r7, #4]
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	440b      	add	r3, r1
 8007c16:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007c1a:	881b      	ldrh	r3, [r3, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d104      	bne.n	8007c2a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c20:	6839      	ldr	r1, [r7, #0]
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 fb9d 	bl	8008362 <USBD_CtlError>
                  break;
 8007c28:	e041      	b.n	8007cae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	da0b      	bge.n	8007c4a <USBD_StdEPReq+0x2b2>
 8007c32:	7bbb      	ldrb	r3, [r7, #14]
 8007c34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007c38:	4613      	mov	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	3310      	adds	r3, #16
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	4413      	add	r3, r2
 8007c46:	3304      	adds	r3, #4
 8007c48:	e00b      	b.n	8007c62 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c4a:	7bbb      	ldrb	r3, [r7, #14]
 8007c4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c50:	4613      	mov	r3, r2
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	4413      	add	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	4413      	add	r3, r2
 8007c60:	3304      	adds	r3, #4
 8007c62:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c64:	7bbb      	ldrb	r3, [r7, #14]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d002      	beq.n	8007c70 <USBD_StdEPReq+0x2d8>
 8007c6a:	7bbb      	ldrb	r3, [r7, #14]
 8007c6c:	2b80      	cmp	r3, #128	@ 0x80
 8007c6e:	d103      	bne.n	8007c78 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	2200      	movs	r2, #0
 8007c74:	601a      	str	r2, [r3, #0]
 8007c76:	e00e      	b.n	8007c96 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c78:	7bbb      	ldrb	r3, [r7, #14]
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f001 f899 	bl	8008db4 <USBD_LL_IsStallEP>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d003      	beq.n	8007c90 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	e002      	b.n	8007c96 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	2200      	movs	r2, #0
 8007c94:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	2202      	movs	r2, #2
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 fbdd 	bl	800845c <USBD_CtlSendData>
              break;
 8007ca2:	e004      	b.n	8007cae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 fb5b 	bl	8008362 <USBD_CtlError>
              break;
 8007cac:	bf00      	nop
          }
          break;
 8007cae:	e004      	b.n	8007cba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007cb0:	6839      	ldr	r1, [r7, #0]
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fb55 	bl	8008362 <USBD_CtlError>
          break;
 8007cb8:	bf00      	nop
      }
      break;
 8007cba:	e005      	b.n	8007cc8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fb4f 	bl	8008362 <USBD_CtlError>
      break;
 8007cc4:	e000      	b.n	8007cc8 <USBD_StdEPReq+0x330>
      break;
 8007cc6:	bf00      	nop
  }

  return ret;
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
	...

08007cd4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	885b      	ldrh	r3, [r3, #2]
 8007cee:	0a1b      	lsrs	r3, r3, #8
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	2b06      	cmp	r3, #6
 8007cf6:	f200 8128 	bhi.w	8007f4a <USBD_GetDescriptor+0x276>
 8007cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8007d00 <USBD_GetDescriptor+0x2c>)
 8007cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d00:	08007d1d 	.word	0x08007d1d
 8007d04:	08007d35 	.word	0x08007d35
 8007d08:	08007d75 	.word	0x08007d75
 8007d0c:	08007f4b 	.word	0x08007f4b
 8007d10:	08007f4b 	.word	0x08007f4b
 8007d14:	08007eeb 	.word	0x08007eeb
 8007d18:	08007f17 	.word	0x08007f17
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	7c12      	ldrb	r2, [r2, #16]
 8007d28:	f107 0108 	add.w	r1, r7, #8
 8007d2c:	4610      	mov	r0, r2
 8007d2e:	4798      	blx	r3
 8007d30:	60f8      	str	r0, [r7, #12]
      break;
 8007d32:	e112      	b.n	8007f5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	7c1b      	ldrb	r3, [r3, #16]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d10d      	bne.n	8007d58 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d44:	f107 0208 	add.w	r2, r7, #8
 8007d48:	4610      	mov	r0, r2
 8007d4a:	4798      	blx	r3
 8007d4c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	3301      	adds	r3, #1
 8007d52:	2202      	movs	r2, #2
 8007d54:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d56:	e100      	b.n	8007f5a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d60:	f107 0208 	add.w	r2, r7, #8
 8007d64:	4610      	mov	r0, r2
 8007d66:	4798      	blx	r3
 8007d68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	2202      	movs	r2, #2
 8007d70:	701a      	strb	r2, [r3, #0]
      break;
 8007d72:	e0f2      	b.n	8007f5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	885b      	ldrh	r3, [r3, #2]
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b05      	cmp	r3, #5
 8007d7c:	f200 80ac 	bhi.w	8007ed8 <USBD_GetDescriptor+0x204>
 8007d80:	a201      	add	r2, pc, #4	@ (adr r2, 8007d88 <USBD_GetDescriptor+0xb4>)
 8007d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d86:	bf00      	nop
 8007d88:	08007da1 	.word	0x08007da1
 8007d8c:	08007dd5 	.word	0x08007dd5
 8007d90:	08007e09 	.word	0x08007e09
 8007d94:	08007e3d 	.word	0x08007e3d
 8007d98:	08007e71 	.word	0x08007e71
 8007d9c:	08007ea5 	.word	0x08007ea5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00b      	beq.n	8007dc4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	7c12      	ldrb	r2, [r2, #16]
 8007db8:	f107 0108 	add.w	r1, r7, #8
 8007dbc:	4610      	mov	r0, r2
 8007dbe:	4798      	blx	r3
 8007dc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dc2:	e091      	b.n	8007ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dc4:	6839      	ldr	r1, [r7, #0]
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 facb 	bl	8008362 <USBD_CtlError>
            err++;
 8007dcc:	7afb      	ldrb	r3, [r7, #11]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	72fb      	strb	r3, [r7, #11]
          break;
 8007dd2:	e089      	b.n	8007ee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00b      	beq.n	8007df8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	7c12      	ldrb	r2, [r2, #16]
 8007dec:	f107 0108 	add.w	r1, r7, #8
 8007df0:	4610      	mov	r0, r2
 8007df2:	4798      	blx	r3
 8007df4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007df6:	e077      	b.n	8007ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007df8:	6839      	ldr	r1, [r7, #0]
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fab1 	bl	8008362 <USBD_CtlError>
            err++;
 8007e00:	7afb      	ldrb	r3, [r7, #11]
 8007e02:	3301      	adds	r3, #1
 8007e04:	72fb      	strb	r3, [r7, #11]
          break;
 8007e06:	e06f      	b.n	8007ee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00b      	beq.n	8007e2c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	7c12      	ldrb	r2, [r2, #16]
 8007e20:	f107 0108 	add.w	r1, r7, #8
 8007e24:	4610      	mov	r0, r2
 8007e26:	4798      	blx	r3
 8007e28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e2a:	e05d      	b.n	8007ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e2c:	6839      	ldr	r1, [r7, #0]
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 fa97 	bl	8008362 <USBD_CtlError>
            err++;
 8007e34:	7afb      	ldrb	r3, [r7, #11]
 8007e36:	3301      	adds	r3, #1
 8007e38:	72fb      	strb	r3, [r7, #11]
          break;
 8007e3a:	e055      	b.n	8007ee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00b      	beq.n	8007e60 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	7c12      	ldrb	r2, [r2, #16]
 8007e54:	f107 0108 	add.w	r1, r7, #8
 8007e58:	4610      	mov	r0, r2
 8007e5a:	4798      	blx	r3
 8007e5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e5e:	e043      	b.n	8007ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e60:	6839      	ldr	r1, [r7, #0]
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 fa7d 	bl	8008362 <USBD_CtlError>
            err++;
 8007e68:	7afb      	ldrb	r3, [r7, #11]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e6e:	e03b      	b.n	8007ee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e76:	695b      	ldr	r3, [r3, #20]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00b      	beq.n	8007e94 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e82:	695b      	ldr	r3, [r3, #20]
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	7c12      	ldrb	r2, [r2, #16]
 8007e88:	f107 0108 	add.w	r1, r7, #8
 8007e8c:	4610      	mov	r0, r2
 8007e8e:	4798      	blx	r3
 8007e90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e92:	e029      	b.n	8007ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e94:	6839      	ldr	r1, [r7, #0]
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 fa63 	bl	8008362 <USBD_CtlError>
            err++;
 8007e9c:	7afb      	ldrb	r3, [r7, #11]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ea2:	e021      	b.n	8007ee8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00b      	beq.n	8007ec8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	7c12      	ldrb	r2, [r2, #16]
 8007ebc:	f107 0108 	add.w	r1, r7, #8
 8007ec0:	4610      	mov	r0, r2
 8007ec2:	4798      	blx	r3
 8007ec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ec6:	e00f      	b.n	8007ee8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ec8:	6839      	ldr	r1, [r7, #0]
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 fa49 	bl	8008362 <USBD_CtlError>
            err++;
 8007ed0:	7afb      	ldrb	r3, [r7, #11]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ed6:	e007      	b.n	8007ee8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fa41 	bl	8008362 <USBD_CtlError>
          err++;
 8007ee0:	7afb      	ldrb	r3, [r7, #11]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007ee6:	bf00      	nop
      }
      break;
 8007ee8:	e037      	b.n	8007f5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	7c1b      	ldrb	r3, [r3, #16]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d109      	bne.n	8007f06 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ef8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007efa:	f107 0208 	add.w	r2, r7, #8
 8007efe:	4610      	mov	r0, r2
 8007f00:	4798      	blx	r3
 8007f02:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f04:	e029      	b.n	8007f5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f06:	6839      	ldr	r1, [r7, #0]
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fa2a 	bl	8008362 <USBD_CtlError>
        err++;
 8007f0e:	7afb      	ldrb	r3, [r7, #11]
 8007f10:	3301      	adds	r3, #1
 8007f12:	72fb      	strb	r3, [r7, #11]
      break;
 8007f14:	e021      	b.n	8007f5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	7c1b      	ldrb	r3, [r3, #16]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10d      	bne.n	8007f3a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f26:	f107 0208 	add.w	r2, r7, #8
 8007f2a:	4610      	mov	r0, r2
 8007f2c:	4798      	blx	r3
 8007f2e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	3301      	adds	r3, #1
 8007f34:	2207      	movs	r2, #7
 8007f36:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f38:	e00f      	b.n	8007f5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f3a:	6839      	ldr	r1, [r7, #0]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fa10 	bl	8008362 <USBD_CtlError>
        err++;
 8007f42:	7afb      	ldrb	r3, [r7, #11]
 8007f44:	3301      	adds	r3, #1
 8007f46:	72fb      	strb	r3, [r7, #11]
      break;
 8007f48:	e007      	b.n	8007f5a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f4a:	6839      	ldr	r1, [r7, #0]
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 fa08 	bl	8008362 <USBD_CtlError>
      err++;
 8007f52:	7afb      	ldrb	r3, [r7, #11]
 8007f54:	3301      	adds	r3, #1
 8007f56:	72fb      	strb	r3, [r7, #11]
      break;
 8007f58:	bf00      	nop
  }

  if (err != 0U)
 8007f5a:	7afb      	ldrb	r3, [r7, #11]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d11e      	bne.n	8007f9e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	88db      	ldrh	r3, [r3, #6]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d016      	beq.n	8007f96 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007f68:	893b      	ldrh	r3, [r7, #8]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00e      	beq.n	8007f8c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	88da      	ldrh	r2, [r3, #6]
 8007f72:	893b      	ldrh	r3, [r7, #8]
 8007f74:	4293      	cmp	r3, r2
 8007f76:	bf28      	it	cs
 8007f78:	4613      	movcs	r3, r2
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f7e:	893b      	ldrh	r3, [r7, #8]
 8007f80:	461a      	mov	r2, r3
 8007f82:	68f9      	ldr	r1, [r7, #12]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 fa69 	bl	800845c <USBD_CtlSendData>
 8007f8a:	e009      	b.n	8007fa0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007f8c:	6839      	ldr	r1, [r7, #0]
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f9e7 	bl	8008362 <USBD_CtlError>
 8007f94:	e004      	b.n	8007fa0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 faba 	bl	8008510 <USBD_CtlSendStatus>
 8007f9c:	e000      	b.n	8007fa0 <USBD_GetDescriptor+0x2cc>
    return;
 8007f9e:	bf00      	nop
  }
}
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop

08007fa8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	889b      	ldrh	r3, [r3, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d131      	bne.n	800801e <USBD_SetAddress+0x76>
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	88db      	ldrh	r3, [r3, #6]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d12d      	bne.n	800801e <USBD_SetAddress+0x76>
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	885b      	ldrh	r3, [r3, #2]
 8007fc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8007fc8:	d829      	bhi.n	800801e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	885b      	ldrh	r3, [r3, #2]
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fd4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b03      	cmp	r3, #3
 8007fe0:	d104      	bne.n	8007fec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007fe2:	6839      	ldr	r1, [r7, #0]
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 f9bc 	bl	8008362 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fea:	e01d      	b.n	8008028 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	7bfa      	ldrb	r2, [r7, #15]
 8007ff0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ff4:	7bfb      	ldrb	r3, [r7, #15]
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 ff07 	bl	8008e0c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 fa86 	bl	8008510 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008004:	7bfb      	ldrb	r3, [r7, #15]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d004      	beq.n	8008014 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2202      	movs	r2, #2
 800800e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008012:	e009      	b.n	8008028 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800801c:	e004      	b.n	8008028 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800801e:	6839      	ldr	r1, [r7, #0]
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 f99e 	bl	8008362 <USBD_CtlError>
  }
}
 8008026:	bf00      	nop
 8008028:	bf00      	nop
 800802a:	3710      	adds	r7, #16
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800803a:	2300      	movs	r3, #0
 800803c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	885b      	ldrh	r3, [r3, #2]
 8008042:	b2da      	uxtb	r2, r3
 8008044:	4b4e      	ldr	r3, [pc, #312]	@ (8008180 <USBD_SetConfig+0x150>)
 8008046:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008048:	4b4d      	ldr	r3, [pc, #308]	@ (8008180 <USBD_SetConfig+0x150>)
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	2b01      	cmp	r3, #1
 800804e:	d905      	bls.n	800805c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008050:	6839      	ldr	r1, [r7, #0]
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 f985 	bl	8008362 <USBD_CtlError>
    return USBD_FAIL;
 8008058:	2303      	movs	r3, #3
 800805a:	e08c      	b.n	8008176 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008062:	b2db      	uxtb	r3, r3
 8008064:	2b02      	cmp	r3, #2
 8008066:	d002      	beq.n	800806e <USBD_SetConfig+0x3e>
 8008068:	2b03      	cmp	r3, #3
 800806a:	d029      	beq.n	80080c0 <USBD_SetConfig+0x90>
 800806c:	e075      	b.n	800815a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800806e:	4b44      	ldr	r3, [pc, #272]	@ (8008180 <USBD_SetConfig+0x150>)
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d020      	beq.n	80080b8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008076:	4b42      	ldr	r3, [pc, #264]	@ (8008180 <USBD_SetConfig+0x150>)
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	461a      	mov	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008080:	4b3f      	ldr	r3, [pc, #252]	@ (8008180 <USBD_SetConfig+0x150>)
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	4619      	mov	r1, r3
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f7fe ffe3 	bl	8007052 <USBD_SetClassConfig>
 800808c:	4603      	mov	r3, r0
 800808e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008090:	7bfb      	ldrb	r3, [r7, #15]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d008      	beq.n	80080a8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008096:	6839      	ldr	r1, [r7, #0]
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f962 	bl	8008362 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2202      	movs	r2, #2
 80080a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080a6:	e065      	b.n	8008174 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 fa31 	bl	8008510 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2203      	movs	r2, #3
 80080b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80080b6:	e05d      	b.n	8008174 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 fa29 	bl	8008510 <USBD_CtlSendStatus>
      break;
 80080be:	e059      	b.n	8008174 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80080c0:	4b2f      	ldr	r3, [pc, #188]	@ (8008180 <USBD_SetConfig+0x150>)
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d112      	bne.n	80080ee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2202      	movs	r2, #2
 80080cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80080d0:	4b2b      	ldr	r3, [pc, #172]	@ (8008180 <USBD_SetConfig+0x150>)
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	461a      	mov	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080da:	4b29      	ldr	r3, [pc, #164]	@ (8008180 <USBD_SetConfig+0x150>)
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	4619      	mov	r1, r3
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f7fe ffd2 	bl	800708a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fa12 	bl	8008510 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080ec:	e042      	b.n	8008174 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80080ee:	4b24      	ldr	r3, [pc, #144]	@ (8008180 <USBD_SetConfig+0x150>)
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	461a      	mov	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d02a      	beq.n	8008152 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	b2db      	uxtb	r3, r3
 8008102:	4619      	mov	r1, r3
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7fe ffc0 	bl	800708a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800810a:	4b1d      	ldr	r3, [pc, #116]	@ (8008180 <USBD_SetConfig+0x150>)
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	461a      	mov	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008114:	4b1a      	ldr	r3, [pc, #104]	@ (8008180 <USBD_SetConfig+0x150>)
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	4619      	mov	r1, r3
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7fe ff99 	bl	8007052 <USBD_SetClassConfig>
 8008120:	4603      	mov	r3, r0
 8008122:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008124:	7bfb      	ldrb	r3, [r7, #15]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00f      	beq.n	800814a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 f918 	bl	8008362 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	b2db      	uxtb	r3, r3
 8008138:	4619      	mov	r1, r3
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f7fe ffa5 	bl	800708a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2202      	movs	r2, #2
 8008144:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008148:	e014      	b.n	8008174 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f9e0 	bl	8008510 <USBD_CtlSendStatus>
      break;
 8008150:	e010      	b.n	8008174 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f9dc 	bl	8008510 <USBD_CtlSendStatus>
      break;
 8008158:	e00c      	b.n	8008174 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800815a:	6839      	ldr	r1, [r7, #0]
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f900 	bl	8008362 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008162:	4b07      	ldr	r3, [pc, #28]	@ (8008180 <USBD_SetConfig+0x150>)
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	4619      	mov	r1, r3
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f7fe ff8e 	bl	800708a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800816e:	2303      	movs	r3, #3
 8008170:	73fb      	strb	r3, [r7, #15]
      break;
 8008172:	bf00      	nop
  }

  return ret;
 8008174:	7bfb      	ldrb	r3, [r7, #15]
}
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	20000400 	.word	0x20000400

08008184 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	88db      	ldrh	r3, [r3, #6]
 8008192:	2b01      	cmp	r3, #1
 8008194:	d004      	beq.n	80081a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008196:	6839      	ldr	r1, [r7, #0]
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 f8e2 	bl	8008362 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800819e:	e023      	b.n	80081e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	dc02      	bgt.n	80081b2 <USBD_GetConfig+0x2e>
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	dc03      	bgt.n	80081b8 <USBD_GetConfig+0x34>
 80081b0:	e015      	b.n	80081de <USBD_GetConfig+0x5a>
 80081b2:	2b03      	cmp	r3, #3
 80081b4:	d00b      	beq.n	80081ce <USBD_GetConfig+0x4a>
 80081b6:	e012      	b.n	80081de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	3308      	adds	r3, #8
 80081c2:	2201      	movs	r2, #1
 80081c4:	4619      	mov	r1, r3
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f948 	bl	800845c <USBD_CtlSendData>
        break;
 80081cc:	e00c      	b.n	80081e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	3304      	adds	r3, #4
 80081d2:	2201      	movs	r2, #1
 80081d4:	4619      	mov	r1, r3
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 f940 	bl	800845c <USBD_CtlSendData>
        break;
 80081dc:	e004      	b.n	80081e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80081de:	6839      	ldr	r1, [r7, #0]
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 f8be 	bl	8008362 <USBD_CtlError>
        break;
 80081e6:	bf00      	nop
}
 80081e8:	bf00      	nop
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008200:	b2db      	uxtb	r3, r3
 8008202:	3b01      	subs	r3, #1
 8008204:	2b02      	cmp	r3, #2
 8008206:	d81e      	bhi.n	8008246 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	88db      	ldrh	r3, [r3, #6]
 800820c:	2b02      	cmp	r3, #2
 800820e:	d004      	beq.n	800821a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f8a5 	bl	8008362 <USBD_CtlError>
        break;
 8008218:	e01a      	b.n	8008250 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008226:	2b00      	cmp	r3, #0
 8008228:	d005      	beq.n	8008236 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	f043 0202 	orr.w	r2, r3, #2
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	330c      	adds	r3, #12
 800823a:	2202      	movs	r2, #2
 800823c:	4619      	mov	r1, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f90c 	bl	800845c <USBD_CtlSendData>
      break;
 8008244:	e004      	b.n	8008250 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008246:	6839      	ldr	r1, [r7, #0]
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 f88a 	bl	8008362 <USBD_CtlError>
      break;
 800824e:	bf00      	nop
  }
}
 8008250:	bf00      	nop
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	885b      	ldrh	r3, [r3, #2]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d107      	bne.n	800827a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2201      	movs	r2, #1
 800826e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f94c 	bl	8008510 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008278:	e013      	b.n	80082a2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	885b      	ldrh	r3, [r3, #2]
 800827e:	2b02      	cmp	r3, #2
 8008280:	d10b      	bne.n	800829a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	889b      	ldrh	r3, [r3, #4]
 8008286:	0a1b      	lsrs	r3, r3, #8
 8008288:	b29b      	uxth	r3, r3
 800828a:	b2da      	uxtb	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 f93c 	bl	8008510 <USBD_CtlSendStatus>
}
 8008298:	e003      	b.n	80082a2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800829a:	6839      	ldr	r1, [r7, #0]
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 f860 	bl	8008362 <USBD_CtlError>
}
 80082a2:	bf00      	nop
 80082a4:	3708      	adds	r7, #8
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b082      	sub	sp, #8
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	3b01      	subs	r3, #1
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d80b      	bhi.n	80082da <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	885b      	ldrh	r3, [r3, #2]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d10c      	bne.n	80082e4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f91c 	bl	8008510 <USBD_CtlSendStatus>
      }
      break;
 80082d8:	e004      	b.n	80082e4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80082da:	6839      	ldr	r1, [r7, #0]
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 f840 	bl	8008362 <USBD_CtlError>
      break;
 80082e2:	e000      	b.n	80082e6 <USBD_ClrFeature+0x3c>
      break;
 80082e4:	bf00      	nop
  }
}
 80082e6:	bf00      	nop
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b084      	sub	sp, #16
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	781a      	ldrb	r2, [r3, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	3301      	adds	r3, #1
 8008308:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	781a      	ldrb	r2, [r3, #0]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	3301      	adds	r3, #1
 8008316:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f7ff fa40 	bl	800779e <SWAPBYTE>
 800831e:	4603      	mov	r3, r0
 8008320:	461a      	mov	r2, r3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	3301      	adds	r3, #1
 800832a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	3301      	adds	r3, #1
 8008330:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	f7ff fa33 	bl	800779e <SWAPBYTE>
 8008338:	4603      	mov	r3, r0
 800833a:	461a      	mov	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	3301      	adds	r3, #1
 8008344:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	3301      	adds	r3, #1
 800834a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f7ff fa26 	bl	800779e <SWAPBYTE>
 8008352:	4603      	mov	r3, r0
 8008354:	461a      	mov	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	80da      	strh	r2, [r3, #6]
}
 800835a:	bf00      	nop
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b082      	sub	sp, #8
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
 800836a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800836c:	2180      	movs	r1, #128	@ 0x80
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fce2 	bl	8008d38 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008374:	2100      	movs	r1, #0
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 fcde 	bl	8008d38 <USBD_LL_StallEP>
}
 800837c:	bf00      	nop
 800837e:	3708      	adds	r7, #8
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b086      	sub	sp, #24
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008390:	2300      	movs	r3, #0
 8008392:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d042      	beq.n	8008420 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800839e:	6938      	ldr	r0, [r7, #16]
 80083a0:	f000 f842 	bl	8008428 <USBD_GetLen>
 80083a4:	4603      	mov	r3, r0
 80083a6:	3301      	adds	r3, #1
 80083a8:	005b      	lsls	r3, r3, #1
 80083aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083ae:	d808      	bhi.n	80083c2 <USBD_GetString+0x3e>
 80083b0:	6938      	ldr	r0, [r7, #16]
 80083b2:	f000 f839 	bl	8008428 <USBD_GetLen>
 80083b6:	4603      	mov	r3, r0
 80083b8:	3301      	adds	r3, #1
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	005b      	lsls	r3, r3, #1
 80083be:	b29a      	uxth	r2, r3
 80083c0:	e001      	b.n	80083c6 <USBD_GetString+0x42>
 80083c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80083ca:	7dfb      	ldrb	r3, [r7, #23]
 80083cc:	68ba      	ldr	r2, [r7, #8]
 80083ce:	4413      	add	r3, r2
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	7812      	ldrb	r2, [r2, #0]
 80083d4:	701a      	strb	r2, [r3, #0]
  idx++;
 80083d6:	7dfb      	ldrb	r3, [r7, #23]
 80083d8:	3301      	adds	r3, #1
 80083da:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80083dc:	7dfb      	ldrb	r3, [r7, #23]
 80083de:	68ba      	ldr	r2, [r7, #8]
 80083e0:	4413      	add	r3, r2
 80083e2:	2203      	movs	r2, #3
 80083e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80083e6:	7dfb      	ldrb	r3, [r7, #23]
 80083e8:	3301      	adds	r3, #1
 80083ea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80083ec:	e013      	b.n	8008416 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80083ee:	7dfb      	ldrb	r3, [r7, #23]
 80083f0:	68ba      	ldr	r2, [r7, #8]
 80083f2:	4413      	add	r3, r2
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	7812      	ldrb	r2, [r2, #0]
 80083f8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	3301      	adds	r3, #1
 80083fe:	613b      	str	r3, [r7, #16]
    idx++;
 8008400:	7dfb      	ldrb	r3, [r7, #23]
 8008402:	3301      	adds	r3, #1
 8008404:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008406:	7dfb      	ldrb	r3, [r7, #23]
 8008408:	68ba      	ldr	r2, [r7, #8]
 800840a:	4413      	add	r3, r2
 800840c:	2200      	movs	r2, #0
 800840e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008410:	7dfb      	ldrb	r3, [r7, #23]
 8008412:	3301      	adds	r3, #1
 8008414:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1e7      	bne.n	80083ee <USBD_GetString+0x6a>
 800841e:	e000      	b.n	8008422 <USBD_GetString+0x9e>
    return;
 8008420:	bf00      	nop
  }
}
 8008422:	3718      	adds	r7, #24
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008430:	2300      	movs	r3, #0
 8008432:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008438:	e005      	b.n	8008446 <USBD_GetLen+0x1e>
  {
    len++;
 800843a:	7bfb      	ldrb	r3, [r7, #15]
 800843c:	3301      	adds	r3, #1
 800843e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	3301      	adds	r3, #1
 8008444:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1f5      	bne.n	800843a <USBD_GetLen+0x12>
  }

  return len;
 800844e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008450:	4618      	mov	r0, r3
 8008452:	3714      	adds	r7, #20
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	60b9      	str	r1, [r7, #8]
 8008466:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2202      	movs	r2, #2
 800846c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	68ba      	ldr	r2, [r7, #8]
 8008480:	2100      	movs	r1, #0
 8008482:	68f8      	ldr	r0, [r7, #12]
 8008484:	f000 fce1 	bl	8008e4a <USBD_LL_Transmit>

  return USBD_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b084      	sub	sp, #16
 8008496:	af00      	add	r7, sp, #0
 8008498:	60f8      	str	r0, [r7, #12]
 800849a:	60b9      	str	r1, [r7, #8]
 800849c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	2100      	movs	r1, #0
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f000 fcd0 	bl	8008e4a <USBD_LL_Transmit>

  return USBD_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2203      	movs	r2, #3
 80084c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	68ba      	ldr	r2, [r7, #8]
 80084dc:	2100      	movs	r1, #0
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	f000 fcd4 	bl	8008e8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b084      	sub	sp, #16
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	60f8      	str	r0, [r7, #12]
 80084f6:	60b9      	str	r1, [r7, #8]
 80084f8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	68ba      	ldr	r2, [r7, #8]
 80084fe:	2100      	movs	r1, #0
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f000 fcc3 	bl	8008e8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2204      	movs	r2, #4
 800851c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008520:	2300      	movs	r3, #0
 8008522:	2200      	movs	r2, #0
 8008524:	2100      	movs	r1, #0
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fc8f 	bl	8008e4a <USBD_LL_Transmit>

  return USBD_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	3708      	adds	r7, #8
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b082      	sub	sp, #8
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2205      	movs	r2, #5
 8008542:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008546:	2300      	movs	r3, #0
 8008548:	2200      	movs	r2, #0
 800854a:	2100      	movs	r1, #0
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fc9d 	bl	8008e8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3708      	adds	r7, #8
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008560:	2200      	movs	r2, #0
 8008562:	4912      	ldr	r1, [pc, #72]	@ (80085ac <MX_USB_DEVICE_Init+0x50>)
 8008564:	4812      	ldr	r0, [pc, #72]	@ (80085b0 <MX_USB_DEVICE_Init+0x54>)
 8008566:	f7fe fcf7 	bl	8006f58 <USBD_Init>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d001      	beq.n	8008574 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008570:	f7f8 ff70 	bl	8001454 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008574:	490f      	ldr	r1, [pc, #60]	@ (80085b4 <MX_USB_DEVICE_Init+0x58>)
 8008576:	480e      	ldr	r0, [pc, #56]	@ (80085b0 <MX_USB_DEVICE_Init+0x54>)
 8008578:	f7fe fd1e 	bl	8006fb8 <USBD_RegisterClass>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d001      	beq.n	8008586 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008582:	f7f8 ff67 	bl	8001454 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008586:	490c      	ldr	r1, [pc, #48]	@ (80085b8 <MX_USB_DEVICE_Init+0x5c>)
 8008588:	4809      	ldr	r0, [pc, #36]	@ (80085b0 <MX_USB_DEVICE_Init+0x54>)
 800858a:	f7fe fc15 	bl	8006db8 <USBD_CDC_RegisterInterface>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d001      	beq.n	8008598 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008594:	f7f8 ff5e 	bl	8001454 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008598:	4805      	ldr	r0, [pc, #20]	@ (80085b0 <MX_USB_DEVICE_Init+0x54>)
 800859a:	f7fe fd43 	bl	8007024 <USBD_Start>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d001      	beq.n	80085a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80085a4:	f7f8 ff56 	bl	8001454 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80085a8:	bf00      	nop
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	200000ac 	.word	0x200000ac
 80085b0:	20000404 	.word	0x20000404
 80085b4:	20000018 	.word	0x20000018
 80085b8:	20000098 	.word	0x20000098

080085bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80085c0:	2200      	movs	r2, #0
 80085c2:	4905      	ldr	r1, [pc, #20]	@ (80085d8 <CDC_Init_FS+0x1c>)
 80085c4:	4805      	ldr	r0, [pc, #20]	@ (80085dc <CDC_Init_FS+0x20>)
 80085c6:	f7fe fc11 	bl	8006dec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80085ca:	4905      	ldr	r1, [pc, #20]	@ (80085e0 <CDC_Init_FS+0x24>)
 80085cc:	4803      	ldr	r0, [pc, #12]	@ (80085dc <CDC_Init_FS+0x20>)
 80085ce:	f7fe fc2f 	bl	8006e30 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80085d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	20000ee0 	.word	0x20000ee0
 80085dc:	20000404 	.word	0x20000404
 80085e0:	200006e0 	.word	0x200006e0

080085e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80085e4:	b480      	push	{r7}
 80085e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80085e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	4603      	mov	r3, r0
 80085fc:	6039      	str	r1, [r7, #0]
 80085fe:	71fb      	strb	r3, [r7, #7]
 8008600:	4613      	mov	r3, r2
 8008602:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008604:	79fb      	ldrb	r3, [r7, #7]
 8008606:	2b23      	cmp	r3, #35	@ 0x23
 8008608:	d84a      	bhi.n	80086a0 <CDC_Control_FS+0xac>
 800860a:	a201      	add	r2, pc, #4	@ (adr r2, 8008610 <CDC_Control_FS+0x1c>)
 800860c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008610:	080086a1 	.word	0x080086a1
 8008614:	080086a1 	.word	0x080086a1
 8008618:	080086a1 	.word	0x080086a1
 800861c:	080086a1 	.word	0x080086a1
 8008620:	080086a1 	.word	0x080086a1
 8008624:	080086a1 	.word	0x080086a1
 8008628:	080086a1 	.word	0x080086a1
 800862c:	080086a1 	.word	0x080086a1
 8008630:	080086a1 	.word	0x080086a1
 8008634:	080086a1 	.word	0x080086a1
 8008638:	080086a1 	.word	0x080086a1
 800863c:	080086a1 	.word	0x080086a1
 8008640:	080086a1 	.word	0x080086a1
 8008644:	080086a1 	.word	0x080086a1
 8008648:	080086a1 	.word	0x080086a1
 800864c:	080086a1 	.word	0x080086a1
 8008650:	080086a1 	.word	0x080086a1
 8008654:	080086a1 	.word	0x080086a1
 8008658:	080086a1 	.word	0x080086a1
 800865c:	080086a1 	.word	0x080086a1
 8008660:	080086a1 	.word	0x080086a1
 8008664:	080086a1 	.word	0x080086a1
 8008668:	080086a1 	.word	0x080086a1
 800866c:	080086a1 	.word	0x080086a1
 8008670:	080086a1 	.word	0x080086a1
 8008674:	080086a1 	.word	0x080086a1
 8008678:	080086a1 	.word	0x080086a1
 800867c:	080086a1 	.word	0x080086a1
 8008680:	080086a1 	.word	0x080086a1
 8008684:	080086a1 	.word	0x080086a1
 8008688:	080086a1 	.word	0x080086a1
 800868c:	080086a1 	.word	0x080086a1
 8008690:	080086a1 	.word	0x080086a1
 8008694:	080086a1 	.word	0x080086a1
 8008698:	080086a1 	.word	0x080086a1
 800869c:	080086a1 	.word	0x080086a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80086a0:	bf00      	nop
  }

  return (USBD_OK);
 80086a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80086ba:	6879      	ldr	r1, [r7, #4]
 80086bc:	4805      	ldr	r0, [pc, #20]	@ (80086d4 <CDC_Receive_FS+0x24>)
 80086be:	f7fe fbb7 	bl	8006e30 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80086c2:	4804      	ldr	r0, [pc, #16]	@ (80086d4 <CDC_Receive_FS+0x24>)
 80086c4:	f7fe fc12 	bl	8006eec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80086c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3708      	adds	r7, #8
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	20000404 	.word	0x20000404

080086d8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	460b      	mov	r3, r1
 80086e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80086e4:	2300      	movs	r3, #0
 80086e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80086e8:	4b0d      	ldr	r3, [pc, #52]	@ (8008720 <CDC_Transmit_FS+0x48>)
 80086ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80086ee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d001      	beq.n	80086fe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e00b      	b.n	8008716 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80086fe:	887b      	ldrh	r3, [r7, #2]
 8008700:	461a      	mov	r2, r3
 8008702:	6879      	ldr	r1, [r7, #4]
 8008704:	4806      	ldr	r0, [pc, #24]	@ (8008720 <CDC_Transmit_FS+0x48>)
 8008706:	f7fe fb71 	bl	8006dec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800870a:	4805      	ldr	r0, [pc, #20]	@ (8008720 <CDC_Transmit_FS+0x48>)
 800870c:	f7fe fbae 	bl	8006e6c <USBD_CDC_TransmitPacket>
 8008710:	4603      	mov	r3, r0
 8008712:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008714:	7bfb      	ldrb	r3, [r7, #15]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	20000404 	.word	0x20000404

08008724 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008724:	b480      	push	{r7}
 8008726:	b087      	sub	sp, #28
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	4613      	mov	r3, r2
 8008730:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008732:	2300      	movs	r3, #0
 8008734:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008736:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800873a:	4618      	mov	r0, r3
 800873c:	371c      	adds	r7, #28
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
	...

08008748 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	4603      	mov	r3, r0
 8008750:	6039      	str	r1, [r7, #0]
 8008752:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	2212      	movs	r2, #18
 8008758:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800875a:	4b03      	ldr	r3, [pc, #12]	@ (8008768 <USBD_FS_DeviceDescriptor+0x20>)
}
 800875c:	4618      	mov	r0, r3
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr
 8008768:	200000c8 	.word	0x200000c8

0800876c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	4603      	mov	r3, r0
 8008774:	6039      	str	r1, [r7, #0]
 8008776:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	2204      	movs	r2, #4
 800877c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800877e:	4b03      	ldr	r3, [pc, #12]	@ (800878c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008780:	4618      	mov	r0, r3
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr
 800878c:	200000dc 	.word	0x200000dc

08008790 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	4603      	mov	r3, r0
 8008798:	6039      	str	r1, [r7, #0]
 800879a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800879c:	79fb      	ldrb	r3, [r7, #7]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d105      	bne.n	80087ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087a2:	683a      	ldr	r2, [r7, #0]
 80087a4:	4907      	ldr	r1, [pc, #28]	@ (80087c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80087a6:	4808      	ldr	r0, [pc, #32]	@ (80087c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80087a8:	f7ff fdec 	bl	8008384 <USBD_GetString>
 80087ac:	e004      	b.n	80087b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087ae:	683a      	ldr	r2, [r7, #0]
 80087b0:	4904      	ldr	r1, [pc, #16]	@ (80087c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80087b2:	4805      	ldr	r0, [pc, #20]	@ (80087c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80087b4:	f7ff fde6 	bl	8008384 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087b8:	4b02      	ldr	r3, [pc, #8]	@ (80087c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3708      	adds	r7, #8
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	200016e0 	.word	0x200016e0
 80087c8:	0800bc28 	.word	0x0800bc28

080087cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	4603      	mov	r3, r0
 80087d4:	6039      	str	r1, [r7, #0]
 80087d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80087d8:	683a      	ldr	r2, [r7, #0]
 80087da:	4904      	ldr	r1, [pc, #16]	@ (80087ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80087dc:	4804      	ldr	r0, [pc, #16]	@ (80087f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80087de:	f7ff fdd1 	bl	8008384 <USBD_GetString>
  return USBD_StrDesc;
 80087e2:	4b02      	ldr	r3, [pc, #8]	@ (80087ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	200016e0 	.word	0x200016e0
 80087f0:	0800bc40 	.word	0x0800bc40

080087f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	4603      	mov	r3, r0
 80087fc:	6039      	str	r1, [r7, #0]
 80087fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	221a      	movs	r2, #26
 8008804:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008806:	f000 f843 	bl	8008890 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800880a:	4b02      	ldr	r3, [pc, #8]	@ (8008814 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800880c:	4618      	mov	r0, r3
 800880e:	3708      	adds	r7, #8
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	200000e0 	.word	0x200000e0

08008818 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	4603      	mov	r3, r0
 8008820:	6039      	str	r1, [r7, #0]
 8008822:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008824:	79fb      	ldrb	r3, [r7, #7]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d105      	bne.n	8008836 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800882a:	683a      	ldr	r2, [r7, #0]
 800882c:	4907      	ldr	r1, [pc, #28]	@ (800884c <USBD_FS_ConfigStrDescriptor+0x34>)
 800882e:	4808      	ldr	r0, [pc, #32]	@ (8008850 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008830:	f7ff fda8 	bl	8008384 <USBD_GetString>
 8008834:	e004      	b.n	8008840 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008836:	683a      	ldr	r2, [r7, #0]
 8008838:	4904      	ldr	r1, [pc, #16]	@ (800884c <USBD_FS_ConfigStrDescriptor+0x34>)
 800883a:	4805      	ldr	r0, [pc, #20]	@ (8008850 <USBD_FS_ConfigStrDescriptor+0x38>)
 800883c:	f7ff fda2 	bl	8008384 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008840:	4b02      	ldr	r3, [pc, #8]	@ (800884c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008842:	4618      	mov	r0, r3
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	200016e0 	.word	0x200016e0
 8008850:	0800bc54 	.word	0x0800bc54

08008854 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	4603      	mov	r3, r0
 800885c:	6039      	str	r1, [r7, #0]
 800885e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008860:	79fb      	ldrb	r3, [r7, #7]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d105      	bne.n	8008872 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008866:	683a      	ldr	r2, [r7, #0]
 8008868:	4907      	ldr	r1, [pc, #28]	@ (8008888 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800886a:	4808      	ldr	r0, [pc, #32]	@ (800888c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800886c:	f7ff fd8a 	bl	8008384 <USBD_GetString>
 8008870:	e004      	b.n	800887c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008872:	683a      	ldr	r2, [r7, #0]
 8008874:	4904      	ldr	r1, [pc, #16]	@ (8008888 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008876:	4805      	ldr	r0, [pc, #20]	@ (800888c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008878:	f7ff fd84 	bl	8008384 <USBD_GetString>
  }
  return USBD_StrDesc;
 800887c:	4b02      	ldr	r3, [pc, #8]	@ (8008888 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800887e:	4618      	mov	r0, r3
 8008880:	3708      	adds	r7, #8
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	200016e0 	.word	0x200016e0
 800888c:	0800bc60 	.word	0x0800bc60

08008890 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008896:	4b0f      	ldr	r3, [pc, #60]	@ (80088d4 <Get_SerialNum+0x44>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800889c:	4b0e      	ldr	r3, [pc, #56]	@ (80088d8 <Get_SerialNum+0x48>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80088a2:	4b0e      	ldr	r3, [pc, #56]	@ (80088dc <Get_SerialNum+0x4c>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4413      	add	r3, r2
 80088ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d009      	beq.n	80088ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80088b6:	2208      	movs	r2, #8
 80088b8:	4909      	ldr	r1, [pc, #36]	@ (80088e0 <Get_SerialNum+0x50>)
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f000 f814 	bl	80088e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80088c0:	2204      	movs	r2, #4
 80088c2:	4908      	ldr	r1, [pc, #32]	@ (80088e4 <Get_SerialNum+0x54>)
 80088c4:	68b8      	ldr	r0, [r7, #8]
 80088c6:	f000 f80f 	bl	80088e8 <IntToUnicode>
  }
}
 80088ca:	bf00      	nop
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	1fff7a10 	.word	0x1fff7a10
 80088d8:	1fff7a14 	.word	0x1fff7a14
 80088dc:	1fff7a18 	.word	0x1fff7a18
 80088e0:	200000e2 	.word	0x200000e2
 80088e4:	200000f2 	.word	0x200000f2

080088e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b087      	sub	sp, #28
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	4613      	mov	r3, r2
 80088f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80088f6:	2300      	movs	r3, #0
 80088f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80088fa:	2300      	movs	r3, #0
 80088fc:	75fb      	strb	r3, [r7, #23]
 80088fe:	e027      	b.n	8008950 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	0f1b      	lsrs	r3, r3, #28
 8008904:	2b09      	cmp	r3, #9
 8008906:	d80b      	bhi.n	8008920 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	0f1b      	lsrs	r3, r3, #28
 800890c:	b2da      	uxtb	r2, r3
 800890e:	7dfb      	ldrb	r3, [r7, #23]
 8008910:	005b      	lsls	r3, r3, #1
 8008912:	4619      	mov	r1, r3
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	440b      	add	r3, r1
 8008918:	3230      	adds	r2, #48	@ 0x30
 800891a:	b2d2      	uxtb	r2, r2
 800891c:	701a      	strb	r2, [r3, #0]
 800891e:	e00a      	b.n	8008936 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	0f1b      	lsrs	r3, r3, #28
 8008924:	b2da      	uxtb	r2, r3
 8008926:	7dfb      	ldrb	r3, [r7, #23]
 8008928:	005b      	lsls	r3, r3, #1
 800892a:	4619      	mov	r1, r3
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	440b      	add	r3, r1
 8008930:	3237      	adds	r2, #55	@ 0x37
 8008932:	b2d2      	uxtb	r2, r2
 8008934:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	011b      	lsls	r3, r3, #4
 800893a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800893c:	7dfb      	ldrb	r3, [r7, #23]
 800893e:	005b      	lsls	r3, r3, #1
 8008940:	3301      	adds	r3, #1
 8008942:	68ba      	ldr	r2, [r7, #8]
 8008944:	4413      	add	r3, r2
 8008946:	2200      	movs	r2, #0
 8008948:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800894a:	7dfb      	ldrb	r3, [r7, #23]
 800894c:	3301      	adds	r3, #1
 800894e:	75fb      	strb	r3, [r7, #23]
 8008950:	7dfa      	ldrb	r2, [r7, #23]
 8008952:	79fb      	ldrb	r3, [r7, #7]
 8008954:	429a      	cmp	r2, r3
 8008956:	d3d3      	bcc.n	8008900 <IntToUnicode+0x18>
  }
}
 8008958:	bf00      	nop
 800895a:	bf00      	nop
 800895c:	371c      	adds	r7, #28
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr
	...

08008968 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b08a      	sub	sp, #40	@ 0x28
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008970:	f107 0314 	add.w	r3, r7, #20
 8008974:	2200      	movs	r2, #0
 8008976:	601a      	str	r2, [r3, #0]
 8008978:	605a      	str	r2, [r3, #4]
 800897a:	609a      	str	r2, [r3, #8]
 800897c:	60da      	str	r2, [r3, #12]
 800897e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008988:	d13a      	bne.n	8008a00 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800898a:	2300      	movs	r3, #0
 800898c:	613b      	str	r3, [r7, #16]
 800898e:	4b1e      	ldr	r3, [pc, #120]	@ (8008a08 <HAL_PCD_MspInit+0xa0>)
 8008990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008992:	4a1d      	ldr	r2, [pc, #116]	@ (8008a08 <HAL_PCD_MspInit+0xa0>)
 8008994:	f043 0301 	orr.w	r3, r3, #1
 8008998:	6313      	str	r3, [r2, #48]	@ 0x30
 800899a:	4b1b      	ldr	r3, [pc, #108]	@ (8008a08 <HAL_PCD_MspInit+0xa0>)
 800899c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800899e:	f003 0301 	and.w	r3, r3, #1
 80089a2:	613b      	str	r3, [r7, #16]
 80089a4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80089a6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80089aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089ac:	2302      	movs	r3, #2
 80089ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089b0:	2300      	movs	r3, #0
 80089b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089b4:	2303      	movs	r3, #3
 80089b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80089b8:	230a      	movs	r3, #10
 80089ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089bc:	f107 0314 	add.w	r3, r7, #20
 80089c0:	4619      	mov	r1, r3
 80089c2:	4812      	ldr	r0, [pc, #72]	@ (8008a0c <HAL_PCD_MspInit+0xa4>)
 80089c4:	f7f9 f9c2 	bl	8001d4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80089c8:	4b0f      	ldr	r3, [pc, #60]	@ (8008a08 <HAL_PCD_MspInit+0xa0>)
 80089ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089cc:	4a0e      	ldr	r2, [pc, #56]	@ (8008a08 <HAL_PCD_MspInit+0xa0>)
 80089ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089d2:	6353      	str	r3, [r2, #52]	@ 0x34
 80089d4:	2300      	movs	r3, #0
 80089d6:	60fb      	str	r3, [r7, #12]
 80089d8:	4b0b      	ldr	r3, [pc, #44]	@ (8008a08 <HAL_PCD_MspInit+0xa0>)
 80089da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089dc:	4a0a      	ldr	r2, [pc, #40]	@ (8008a08 <HAL_PCD_MspInit+0xa0>)
 80089de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80089e2:	6453      	str	r3, [r2, #68]	@ 0x44
 80089e4:	4b08      	ldr	r3, [pc, #32]	@ (8008a08 <HAL_PCD_MspInit+0xa0>)
 80089e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089ec:	60fb      	str	r3, [r7, #12]
 80089ee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80089f0:	2200      	movs	r2, #0
 80089f2:	2100      	movs	r1, #0
 80089f4:	2043      	movs	r0, #67	@ 0x43
 80089f6:	f7f9 f972 	bl	8001cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80089fa:	2043      	movs	r0, #67	@ 0x43
 80089fc:	f7f9 f98b 	bl	8001d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008a00:	bf00      	nop
 8008a02:	3728      	adds	r7, #40	@ 0x28
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	40023800 	.word	0x40023800
 8008a0c:	40020000 	.word	0x40020000

08008a10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008a24:	4619      	mov	r1, r3
 8008a26:	4610      	mov	r0, r2
 8008a28:	f7fe fb49 	bl	80070be <USBD_LL_SetupStage>
}
 8008a2c:	bf00      	nop
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008a46:	78fa      	ldrb	r2, [r7, #3]
 8008a48:	6879      	ldr	r1, [r7, #4]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	00db      	lsls	r3, r3, #3
 8008a4e:	4413      	add	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	440b      	add	r3, r1
 8008a54:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	78fb      	ldrb	r3, [r7, #3]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	f7fe fb83 	bl	8007168 <USBD_LL_DataOutStage>
}
 8008a62:	bf00      	nop
 8008a64:	3708      	adds	r7, #8
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b082      	sub	sp, #8
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
 8008a72:	460b      	mov	r3, r1
 8008a74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008a7c:	78fa      	ldrb	r2, [r7, #3]
 8008a7e:	6879      	ldr	r1, [r7, #4]
 8008a80:	4613      	mov	r3, r2
 8008a82:	00db      	lsls	r3, r3, #3
 8008a84:	4413      	add	r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	440b      	add	r3, r1
 8008a8a:	3320      	adds	r3, #32
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	78fb      	ldrb	r3, [r7, #3]
 8008a90:	4619      	mov	r1, r3
 8008a92:	f7fe fc1c 	bl	80072ce <USBD_LL_DataInStage>
}
 8008a96:	bf00      	nop
 8008a98:	3708      	adds	r7, #8
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b082      	sub	sp, #8
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7fe fd56 	bl	800755e <USBD_LL_SOF>
}
 8008ab2:	bf00      	nop
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b084      	sub	sp, #16
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	79db      	ldrb	r3, [r3, #7]
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d001      	beq.n	8008ad2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008ace:	f7f8 fcc1 	bl	8001454 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ad8:	7bfa      	ldrb	r2, [r7, #15]
 8008ada:	4611      	mov	r1, r2
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7fe fcfa 	bl	80074d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7fe fca2 	bl	8007432 <USBD_LL_Reset>
}
 8008aee:	bf00      	nop
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
	...

08008af8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7fe fcf5 	bl	80074f6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	6812      	ldr	r2, [r2, #0]
 8008b1a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008b1e:	f043 0301 	orr.w	r3, r3, #1
 8008b22:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	7adb      	ldrb	r3, [r3, #11]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d005      	beq.n	8008b38 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b2c:	4b04      	ldr	r3, [pc, #16]	@ (8008b40 <HAL_PCD_SuspendCallback+0x48>)
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	4a03      	ldr	r2, [pc, #12]	@ (8008b40 <HAL_PCD_SuspendCallback+0x48>)
 8008b32:	f043 0306 	orr.w	r3, r3, #6
 8008b36:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008b38:	bf00      	nop
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	e000ed00 	.word	0xe000ed00

08008b44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fe fceb 	bl	800752e <USBD_LL_Resume>
}
 8008b58:	bf00      	nop
 8008b5a:	3708      	adds	r7, #8
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	460b      	mov	r3, r1
 8008b6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b72:	78fa      	ldrb	r2, [r7, #3]
 8008b74:	4611      	mov	r1, r2
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7fe fd43 	bl	8007602 <USBD_LL_IsoOUTIncomplete>
}
 8008b7c:	bf00      	nop
 8008b7e:	3708      	adds	r7, #8
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b96:	78fa      	ldrb	r2, [r7, #3]
 8008b98:	4611      	mov	r1, r2
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7fe fcff 	bl	800759e <USBD_LL_IsoINIncomplete>
}
 8008ba0:	bf00      	nop
 8008ba2:	3708      	adds	r7, #8
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7fe fd55 	bl	8007666 <USBD_LL_DevConnected>
}
 8008bbc:	bf00      	nop
 8008bbe:	3708      	adds	r7, #8
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7fe fd52 	bl	800767c <USBD_LL_DevDisconnected>
}
 8008bd8:	bf00      	nop
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d13c      	bne.n	8008c6a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008bf0:	4a20      	ldr	r2, [pc, #128]	@ (8008c74 <USBD_LL_Init+0x94>)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4a1e      	ldr	r2, [pc, #120]	@ (8008c74 <USBD_LL_Init+0x94>)
 8008bfc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008c00:	4b1c      	ldr	r3, [pc, #112]	@ (8008c74 <USBD_LL_Init+0x94>)
 8008c02:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008c06:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008c08:	4b1a      	ldr	r3, [pc, #104]	@ (8008c74 <USBD_LL_Init+0x94>)
 8008c0a:	2204      	movs	r2, #4
 8008c0c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008c0e:	4b19      	ldr	r3, [pc, #100]	@ (8008c74 <USBD_LL_Init+0x94>)
 8008c10:	2202      	movs	r2, #2
 8008c12:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008c14:	4b17      	ldr	r3, [pc, #92]	@ (8008c74 <USBD_LL_Init+0x94>)
 8008c16:	2200      	movs	r2, #0
 8008c18:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008c1a:	4b16      	ldr	r3, [pc, #88]	@ (8008c74 <USBD_LL_Init+0x94>)
 8008c1c:	2202      	movs	r2, #2
 8008c1e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008c20:	4b14      	ldr	r3, [pc, #80]	@ (8008c74 <USBD_LL_Init+0x94>)
 8008c22:	2200      	movs	r2, #0
 8008c24:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008c26:	4b13      	ldr	r3, [pc, #76]	@ (8008c74 <USBD_LL_Init+0x94>)
 8008c28:	2200      	movs	r2, #0
 8008c2a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008c2c:	4b11      	ldr	r3, [pc, #68]	@ (8008c74 <USBD_LL_Init+0x94>)
 8008c2e:	2200      	movs	r2, #0
 8008c30:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008c32:	4b10      	ldr	r3, [pc, #64]	@ (8008c74 <USBD_LL_Init+0x94>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008c38:	4b0e      	ldr	r3, [pc, #56]	@ (8008c74 <USBD_LL_Init+0x94>)
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008c3e:	480d      	ldr	r0, [pc, #52]	@ (8008c74 <USBD_LL_Init+0x94>)
 8008c40:	f7f9 fa08 	bl	8002054 <HAL_PCD_Init>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008c4a:	f7f8 fc03 	bl	8001454 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008c4e:	2180      	movs	r1, #128	@ 0x80
 8008c50:	4808      	ldr	r0, [pc, #32]	@ (8008c74 <USBD_LL_Init+0x94>)
 8008c52:	f7fa fc34 	bl	80034be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008c56:	2240      	movs	r2, #64	@ 0x40
 8008c58:	2100      	movs	r1, #0
 8008c5a:	4806      	ldr	r0, [pc, #24]	@ (8008c74 <USBD_LL_Init+0x94>)
 8008c5c:	f7fa fbe8 	bl	8003430 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008c60:	2280      	movs	r2, #128	@ 0x80
 8008c62:	2101      	movs	r1, #1
 8008c64:	4803      	ldr	r0, [pc, #12]	@ (8008c74 <USBD_LL_Init+0x94>)
 8008c66:	f7fa fbe3 	bl	8003430 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3708      	adds	r7, #8
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	200018e0 	.word	0x200018e0

08008c78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c80:	2300      	movs	r3, #0
 8008c82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c84:	2300      	movs	r3, #0
 8008c86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7f9 faef 	bl	8002272 <HAL_PCD_Start>
 8008c94:	4603      	mov	r3, r0
 8008c96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c98:	7bfb      	ldrb	r3, [r7, #15]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f000 f942 	bl	8008f24 <USBD_Get_USB_Status>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ca4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b084      	sub	sp, #16
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	4608      	mov	r0, r1
 8008cb8:	4611      	mov	r1, r2
 8008cba:	461a      	mov	r2, r3
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	70fb      	strb	r3, [r7, #3]
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	70bb      	strb	r3, [r7, #2]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008cd6:	78bb      	ldrb	r3, [r7, #2]
 8008cd8:	883a      	ldrh	r2, [r7, #0]
 8008cda:	78f9      	ldrb	r1, [r7, #3]
 8008cdc:	f7f9 ffc3 	bl	8002c66 <HAL_PCD_EP_Open>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ce4:	7bfb      	ldrb	r3, [r7, #15]
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f000 f91c 	bl	8008f24 <USBD_Get_USB_Status>
 8008cec:	4603      	mov	r3, r0
 8008cee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cf0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3710      	adds	r7, #16
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b084      	sub	sp, #16
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	460b      	mov	r3, r1
 8008d04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d06:	2300      	movs	r3, #0
 8008d08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d14:	78fa      	ldrb	r2, [r7, #3]
 8008d16:	4611      	mov	r1, r2
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7fa f80e 	bl	8002d3a <HAL_PCD_EP_Close>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d22:	7bfb      	ldrb	r3, [r7, #15]
 8008d24:	4618      	mov	r0, r3
 8008d26:	f000 f8fd 	bl	8008f24 <USBD_Get_USB_Status>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3710      	adds	r7, #16
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	460b      	mov	r3, r1
 8008d42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d44:	2300      	movs	r3, #0
 8008d46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d52:	78fa      	ldrb	r2, [r7, #3]
 8008d54:	4611      	mov	r1, r2
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7fa f8c6 	bl	8002ee8 <HAL_PCD_EP_SetStall>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d60:	7bfb      	ldrb	r3, [r7, #15]
 8008d62:	4618      	mov	r0, r3
 8008d64:	f000 f8de 	bl	8008f24 <USBD_Get_USB_Status>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3710      	adds	r7, #16
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b084      	sub	sp, #16
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
 8008d7e:	460b      	mov	r3, r1
 8008d80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d82:	2300      	movs	r3, #0
 8008d84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d86:	2300      	movs	r3, #0
 8008d88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d90:	78fa      	ldrb	r2, [r7, #3]
 8008d92:	4611      	mov	r1, r2
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7fa f90a 	bl	8002fae <HAL_PCD_EP_ClrStall>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d9e:	7bfb      	ldrb	r3, [r7, #15]
 8008da0:	4618      	mov	r0, r3
 8008da2:	f000 f8bf 	bl	8008f24 <USBD_Get_USB_Status>
 8008da6:	4603      	mov	r3, r0
 8008da8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008daa:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3710      	adds	r7, #16
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b085      	sub	sp, #20
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008dc6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008dc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	da0b      	bge.n	8008de8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008dd0:	78fb      	ldrb	r3, [r7, #3]
 8008dd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008dd6:	68f9      	ldr	r1, [r7, #12]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	00db      	lsls	r3, r3, #3
 8008ddc:	4413      	add	r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	440b      	add	r3, r1
 8008de2:	3316      	adds	r3, #22
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	e00b      	b.n	8008e00 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008de8:	78fb      	ldrb	r3, [r7, #3]
 8008dea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008dee:	68f9      	ldr	r1, [r7, #12]
 8008df0:	4613      	mov	r3, r2
 8008df2:	00db      	lsls	r3, r3, #3
 8008df4:	4413      	add	r3, r2
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	440b      	add	r3, r1
 8008dfa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008dfe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3714      	adds	r7, #20
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	460b      	mov	r3, r1
 8008e16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e26:	78fa      	ldrb	r2, [r7, #3]
 8008e28:	4611      	mov	r1, r2
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7f9 fef7 	bl	8002c1e <HAL_PCD_SetAddress>
 8008e30:	4603      	mov	r3, r0
 8008e32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e34:	7bfb      	ldrb	r3, [r7, #15]
 8008e36:	4618      	mov	r0, r3
 8008e38:	f000 f874 	bl	8008f24 <USBD_Get_USB_Status>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e40:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b086      	sub	sp, #24
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	60f8      	str	r0, [r7, #12]
 8008e52:	607a      	str	r2, [r7, #4]
 8008e54:	603b      	str	r3, [r7, #0]
 8008e56:	460b      	mov	r3, r1
 8008e58:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008e68:	7af9      	ldrb	r1, [r7, #11]
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	f7fa f801 	bl	8002e74 <HAL_PCD_EP_Transmit>
 8008e72:	4603      	mov	r3, r0
 8008e74:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e76:	7dfb      	ldrb	r3, [r7, #23]
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f000 f853 	bl	8008f24 <USBD_Get_USB_Status>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e82:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3718      	adds	r7, #24
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b086      	sub	sp, #24
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	607a      	str	r2, [r7, #4]
 8008e96:	603b      	str	r3, [r7, #0]
 8008e98:	460b      	mov	r3, r1
 8008e9a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008eaa:	7af9      	ldrb	r1, [r7, #11]
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	f7f9 ff8d 	bl	8002dce <HAL_PCD_EP_Receive>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008eb8:	7dfb      	ldrb	r3, [r7, #23]
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f000 f832 	bl	8008f24 <USBD_Get_USB_Status>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ec4:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3718      	adds	r7, #24
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b082      	sub	sp, #8
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ee0:	78fa      	ldrb	r2, [r7, #3]
 8008ee2:	4611      	mov	r1, r2
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7f9 ffad 	bl	8002e44 <HAL_PCD_EP_GetRxCount>
 8008eea:	4603      	mov	r3, r0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3708      	adds	r7, #8
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008efc:	4b03      	ldr	r3, [pc, #12]	@ (8008f0c <USBD_static_malloc+0x18>)
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	370c      	adds	r7, #12
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	20001dc4 	.word	0x20001dc4

08008f10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]

}
 8008f18:	bf00      	nop
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008f32:	79fb      	ldrb	r3, [r7, #7]
 8008f34:	2b03      	cmp	r3, #3
 8008f36:	d817      	bhi.n	8008f68 <USBD_Get_USB_Status+0x44>
 8008f38:	a201      	add	r2, pc, #4	@ (adr r2, 8008f40 <USBD_Get_USB_Status+0x1c>)
 8008f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3e:	bf00      	nop
 8008f40:	08008f51 	.word	0x08008f51
 8008f44:	08008f57 	.word	0x08008f57
 8008f48:	08008f5d 	.word	0x08008f5d
 8008f4c:	08008f63 	.word	0x08008f63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008f50:	2300      	movs	r3, #0
 8008f52:	73fb      	strb	r3, [r7, #15]
    break;
 8008f54:	e00b      	b.n	8008f6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f56:	2303      	movs	r3, #3
 8008f58:	73fb      	strb	r3, [r7, #15]
    break;
 8008f5a:	e008      	b.n	8008f6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f60:	e005      	b.n	8008f6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f62:	2303      	movs	r3, #3
 8008f64:	73fb      	strb	r3, [r7, #15]
    break;
 8008f66:	e002      	b.n	8008f6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f6c:	bf00      	nop
  }
  return usb_status;
 8008f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3714      	adds	r7, #20
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <__cvt>:
 8008f7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f80:	ec57 6b10 	vmov	r6, r7, d0
 8008f84:	2f00      	cmp	r7, #0
 8008f86:	460c      	mov	r4, r1
 8008f88:	4619      	mov	r1, r3
 8008f8a:	463b      	mov	r3, r7
 8008f8c:	bfbb      	ittet	lt
 8008f8e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008f92:	461f      	movlt	r7, r3
 8008f94:	2300      	movge	r3, #0
 8008f96:	232d      	movlt	r3, #45	@ 0x2d
 8008f98:	700b      	strb	r3, [r1, #0]
 8008f9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f9c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008fa0:	4691      	mov	r9, r2
 8008fa2:	f023 0820 	bic.w	r8, r3, #32
 8008fa6:	bfbc      	itt	lt
 8008fa8:	4632      	movlt	r2, r6
 8008faa:	4616      	movlt	r6, r2
 8008fac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008fb0:	d005      	beq.n	8008fbe <__cvt+0x42>
 8008fb2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008fb6:	d100      	bne.n	8008fba <__cvt+0x3e>
 8008fb8:	3401      	adds	r4, #1
 8008fba:	2102      	movs	r1, #2
 8008fbc:	e000      	b.n	8008fc0 <__cvt+0x44>
 8008fbe:	2103      	movs	r1, #3
 8008fc0:	ab03      	add	r3, sp, #12
 8008fc2:	9301      	str	r3, [sp, #4]
 8008fc4:	ab02      	add	r3, sp, #8
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	ec47 6b10 	vmov	d0, r6, r7
 8008fcc:	4653      	mov	r3, sl
 8008fce:	4622      	mov	r2, r4
 8008fd0:	f000 fe5a 	bl	8009c88 <_dtoa_r>
 8008fd4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008fd8:	4605      	mov	r5, r0
 8008fda:	d119      	bne.n	8009010 <__cvt+0x94>
 8008fdc:	f019 0f01 	tst.w	r9, #1
 8008fe0:	d00e      	beq.n	8009000 <__cvt+0x84>
 8008fe2:	eb00 0904 	add.w	r9, r0, r4
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	2300      	movs	r3, #0
 8008fea:	4630      	mov	r0, r6
 8008fec:	4639      	mov	r1, r7
 8008fee:	f7f7 fd73 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ff2:	b108      	cbz	r0, 8008ff8 <__cvt+0x7c>
 8008ff4:	f8cd 900c 	str.w	r9, [sp, #12]
 8008ff8:	2230      	movs	r2, #48	@ 0x30
 8008ffa:	9b03      	ldr	r3, [sp, #12]
 8008ffc:	454b      	cmp	r3, r9
 8008ffe:	d31e      	bcc.n	800903e <__cvt+0xc2>
 8009000:	9b03      	ldr	r3, [sp, #12]
 8009002:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009004:	1b5b      	subs	r3, r3, r5
 8009006:	4628      	mov	r0, r5
 8009008:	6013      	str	r3, [r2, #0]
 800900a:	b004      	add	sp, #16
 800900c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009010:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009014:	eb00 0904 	add.w	r9, r0, r4
 8009018:	d1e5      	bne.n	8008fe6 <__cvt+0x6a>
 800901a:	7803      	ldrb	r3, [r0, #0]
 800901c:	2b30      	cmp	r3, #48	@ 0x30
 800901e:	d10a      	bne.n	8009036 <__cvt+0xba>
 8009020:	2200      	movs	r2, #0
 8009022:	2300      	movs	r3, #0
 8009024:	4630      	mov	r0, r6
 8009026:	4639      	mov	r1, r7
 8009028:	f7f7 fd56 	bl	8000ad8 <__aeabi_dcmpeq>
 800902c:	b918      	cbnz	r0, 8009036 <__cvt+0xba>
 800902e:	f1c4 0401 	rsb	r4, r4, #1
 8009032:	f8ca 4000 	str.w	r4, [sl]
 8009036:	f8da 3000 	ldr.w	r3, [sl]
 800903a:	4499      	add	r9, r3
 800903c:	e7d3      	b.n	8008fe6 <__cvt+0x6a>
 800903e:	1c59      	adds	r1, r3, #1
 8009040:	9103      	str	r1, [sp, #12]
 8009042:	701a      	strb	r2, [r3, #0]
 8009044:	e7d9      	b.n	8008ffa <__cvt+0x7e>

08009046 <__exponent>:
 8009046:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009048:	2900      	cmp	r1, #0
 800904a:	bfba      	itte	lt
 800904c:	4249      	neglt	r1, r1
 800904e:	232d      	movlt	r3, #45	@ 0x2d
 8009050:	232b      	movge	r3, #43	@ 0x2b
 8009052:	2909      	cmp	r1, #9
 8009054:	7002      	strb	r2, [r0, #0]
 8009056:	7043      	strb	r3, [r0, #1]
 8009058:	dd29      	ble.n	80090ae <__exponent+0x68>
 800905a:	f10d 0307 	add.w	r3, sp, #7
 800905e:	461d      	mov	r5, r3
 8009060:	270a      	movs	r7, #10
 8009062:	461a      	mov	r2, r3
 8009064:	fbb1 f6f7 	udiv	r6, r1, r7
 8009068:	fb07 1416 	mls	r4, r7, r6, r1
 800906c:	3430      	adds	r4, #48	@ 0x30
 800906e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009072:	460c      	mov	r4, r1
 8009074:	2c63      	cmp	r4, #99	@ 0x63
 8009076:	f103 33ff 	add.w	r3, r3, #4294967295
 800907a:	4631      	mov	r1, r6
 800907c:	dcf1      	bgt.n	8009062 <__exponent+0x1c>
 800907e:	3130      	adds	r1, #48	@ 0x30
 8009080:	1e94      	subs	r4, r2, #2
 8009082:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009086:	1c41      	adds	r1, r0, #1
 8009088:	4623      	mov	r3, r4
 800908a:	42ab      	cmp	r3, r5
 800908c:	d30a      	bcc.n	80090a4 <__exponent+0x5e>
 800908e:	f10d 0309 	add.w	r3, sp, #9
 8009092:	1a9b      	subs	r3, r3, r2
 8009094:	42ac      	cmp	r4, r5
 8009096:	bf88      	it	hi
 8009098:	2300      	movhi	r3, #0
 800909a:	3302      	adds	r3, #2
 800909c:	4403      	add	r3, r0
 800909e:	1a18      	subs	r0, r3, r0
 80090a0:	b003      	add	sp, #12
 80090a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090a4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80090a8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80090ac:	e7ed      	b.n	800908a <__exponent+0x44>
 80090ae:	2330      	movs	r3, #48	@ 0x30
 80090b0:	3130      	adds	r1, #48	@ 0x30
 80090b2:	7083      	strb	r3, [r0, #2]
 80090b4:	70c1      	strb	r1, [r0, #3]
 80090b6:	1d03      	adds	r3, r0, #4
 80090b8:	e7f1      	b.n	800909e <__exponent+0x58>
	...

080090bc <_printf_float>:
 80090bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c0:	b08d      	sub	sp, #52	@ 0x34
 80090c2:	460c      	mov	r4, r1
 80090c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80090c8:	4616      	mov	r6, r2
 80090ca:	461f      	mov	r7, r3
 80090cc:	4605      	mov	r5, r0
 80090ce:	f000 fcdb 	bl	8009a88 <_localeconv_r>
 80090d2:	6803      	ldr	r3, [r0, #0]
 80090d4:	9304      	str	r3, [sp, #16]
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7f7 f8d2 	bl	8000280 <strlen>
 80090dc:	2300      	movs	r3, #0
 80090de:	930a      	str	r3, [sp, #40]	@ 0x28
 80090e0:	f8d8 3000 	ldr.w	r3, [r8]
 80090e4:	9005      	str	r0, [sp, #20]
 80090e6:	3307      	adds	r3, #7
 80090e8:	f023 0307 	bic.w	r3, r3, #7
 80090ec:	f103 0208 	add.w	r2, r3, #8
 80090f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80090f4:	f8d4 b000 	ldr.w	fp, [r4]
 80090f8:	f8c8 2000 	str.w	r2, [r8]
 80090fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009100:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009104:	9307      	str	r3, [sp, #28]
 8009106:	f8cd 8018 	str.w	r8, [sp, #24]
 800910a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800910e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009112:	4b9c      	ldr	r3, [pc, #624]	@ (8009384 <_printf_float+0x2c8>)
 8009114:	f04f 32ff 	mov.w	r2, #4294967295
 8009118:	f7f7 fd10 	bl	8000b3c <__aeabi_dcmpun>
 800911c:	bb70      	cbnz	r0, 800917c <_printf_float+0xc0>
 800911e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009122:	4b98      	ldr	r3, [pc, #608]	@ (8009384 <_printf_float+0x2c8>)
 8009124:	f04f 32ff 	mov.w	r2, #4294967295
 8009128:	f7f7 fcea 	bl	8000b00 <__aeabi_dcmple>
 800912c:	bb30      	cbnz	r0, 800917c <_printf_float+0xc0>
 800912e:	2200      	movs	r2, #0
 8009130:	2300      	movs	r3, #0
 8009132:	4640      	mov	r0, r8
 8009134:	4649      	mov	r1, r9
 8009136:	f7f7 fcd9 	bl	8000aec <__aeabi_dcmplt>
 800913a:	b110      	cbz	r0, 8009142 <_printf_float+0x86>
 800913c:	232d      	movs	r3, #45	@ 0x2d
 800913e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009142:	4a91      	ldr	r2, [pc, #580]	@ (8009388 <_printf_float+0x2cc>)
 8009144:	4b91      	ldr	r3, [pc, #580]	@ (800938c <_printf_float+0x2d0>)
 8009146:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800914a:	bf94      	ite	ls
 800914c:	4690      	movls	r8, r2
 800914e:	4698      	movhi	r8, r3
 8009150:	2303      	movs	r3, #3
 8009152:	6123      	str	r3, [r4, #16]
 8009154:	f02b 0304 	bic.w	r3, fp, #4
 8009158:	6023      	str	r3, [r4, #0]
 800915a:	f04f 0900 	mov.w	r9, #0
 800915e:	9700      	str	r7, [sp, #0]
 8009160:	4633      	mov	r3, r6
 8009162:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009164:	4621      	mov	r1, r4
 8009166:	4628      	mov	r0, r5
 8009168:	f000 f9d2 	bl	8009510 <_printf_common>
 800916c:	3001      	adds	r0, #1
 800916e:	f040 808d 	bne.w	800928c <_printf_float+0x1d0>
 8009172:	f04f 30ff 	mov.w	r0, #4294967295
 8009176:	b00d      	add	sp, #52	@ 0x34
 8009178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800917c:	4642      	mov	r2, r8
 800917e:	464b      	mov	r3, r9
 8009180:	4640      	mov	r0, r8
 8009182:	4649      	mov	r1, r9
 8009184:	f7f7 fcda 	bl	8000b3c <__aeabi_dcmpun>
 8009188:	b140      	cbz	r0, 800919c <_printf_float+0xe0>
 800918a:	464b      	mov	r3, r9
 800918c:	2b00      	cmp	r3, #0
 800918e:	bfbc      	itt	lt
 8009190:	232d      	movlt	r3, #45	@ 0x2d
 8009192:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009196:	4a7e      	ldr	r2, [pc, #504]	@ (8009390 <_printf_float+0x2d4>)
 8009198:	4b7e      	ldr	r3, [pc, #504]	@ (8009394 <_printf_float+0x2d8>)
 800919a:	e7d4      	b.n	8009146 <_printf_float+0x8a>
 800919c:	6863      	ldr	r3, [r4, #4]
 800919e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80091a2:	9206      	str	r2, [sp, #24]
 80091a4:	1c5a      	adds	r2, r3, #1
 80091a6:	d13b      	bne.n	8009220 <_printf_float+0x164>
 80091a8:	2306      	movs	r3, #6
 80091aa:	6063      	str	r3, [r4, #4]
 80091ac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80091b0:	2300      	movs	r3, #0
 80091b2:	6022      	str	r2, [r4, #0]
 80091b4:	9303      	str	r3, [sp, #12]
 80091b6:	ab0a      	add	r3, sp, #40	@ 0x28
 80091b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80091bc:	ab09      	add	r3, sp, #36	@ 0x24
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	6861      	ldr	r1, [r4, #4]
 80091c2:	ec49 8b10 	vmov	d0, r8, r9
 80091c6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80091ca:	4628      	mov	r0, r5
 80091cc:	f7ff fed6 	bl	8008f7c <__cvt>
 80091d0:	9b06      	ldr	r3, [sp, #24]
 80091d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80091d4:	2b47      	cmp	r3, #71	@ 0x47
 80091d6:	4680      	mov	r8, r0
 80091d8:	d129      	bne.n	800922e <_printf_float+0x172>
 80091da:	1cc8      	adds	r0, r1, #3
 80091dc:	db02      	blt.n	80091e4 <_printf_float+0x128>
 80091de:	6863      	ldr	r3, [r4, #4]
 80091e0:	4299      	cmp	r1, r3
 80091e2:	dd41      	ble.n	8009268 <_printf_float+0x1ac>
 80091e4:	f1aa 0a02 	sub.w	sl, sl, #2
 80091e8:	fa5f fa8a 	uxtb.w	sl, sl
 80091ec:	3901      	subs	r1, #1
 80091ee:	4652      	mov	r2, sl
 80091f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80091f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80091f6:	f7ff ff26 	bl	8009046 <__exponent>
 80091fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80091fc:	1813      	adds	r3, r2, r0
 80091fe:	2a01      	cmp	r2, #1
 8009200:	4681      	mov	r9, r0
 8009202:	6123      	str	r3, [r4, #16]
 8009204:	dc02      	bgt.n	800920c <_printf_float+0x150>
 8009206:	6822      	ldr	r2, [r4, #0]
 8009208:	07d2      	lsls	r2, r2, #31
 800920a:	d501      	bpl.n	8009210 <_printf_float+0x154>
 800920c:	3301      	adds	r3, #1
 800920e:	6123      	str	r3, [r4, #16]
 8009210:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009214:	2b00      	cmp	r3, #0
 8009216:	d0a2      	beq.n	800915e <_printf_float+0xa2>
 8009218:	232d      	movs	r3, #45	@ 0x2d
 800921a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800921e:	e79e      	b.n	800915e <_printf_float+0xa2>
 8009220:	9a06      	ldr	r2, [sp, #24]
 8009222:	2a47      	cmp	r2, #71	@ 0x47
 8009224:	d1c2      	bne.n	80091ac <_printf_float+0xf0>
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1c0      	bne.n	80091ac <_printf_float+0xf0>
 800922a:	2301      	movs	r3, #1
 800922c:	e7bd      	b.n	80091aa <_printf_float+0xee>
 800922e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009232:	d9db      	bls.n	80091ec <_printf_float+0x130>
 8009234:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009238:	d118      	bne.n	800926c <_printf_float+0x1b0>
 800923a:	2900      	cmp	r1, #0
 800923c:	6863      	ldr	r3, [r4, #4]
 800923e:	dd0b      	ble.n	8009258 <_printf_float+0x19c>
 8009240:	6121      	str	r1, [r4, #16]
 8009242:	b913      	cbnz	r3, 800924a <_printf_float+0x18e>
 8009244:	6822      	ldr	r2, [r4, #0]
 8009246:	07d0      	lsls	r0, r2, #31
 8009248:	d502      	bpl.n	8009250 <_printf_float+0x194>
 800924a:	3301      	adds	r3, #1
 800924c:	440b      	add	r3, r1
 800924e:	6123      	str	r3, [r4, #16]
 8009250:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009252:	f04f 0900 	mov.w	r9, #0
 8009256:	e7db      	b.n	8009210 <_printf_float+0x154>
 8009258:	b913      	cbnz	r3, 8009260 <_printf_float+0x1a4>
 800925a:	6822      	ldr	r2, [r4, #0]
 800925c:	07d2      	lsls	r2, r2, #31
 800925e:	d501      	bpl.n	8009264 <_printf_float+0x1a8>
 8009260:	3302      	adds	r3, #2
 8009262:	e7f4      	b.n	800924e <_printf_float+0x192>
 8009264:	2301      	movs	r3, #1
 8009266:	e7f2      	b.n	800924e <_printf_float+0x192>
 8009268:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800926c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800926e:	4299      	cmp	r1, r3
 8009270:	db05      	blt.n	800927e <_printf_float+0x1c2>
 8009272:	6823      	ldr	r3, [r4, #0]
 8009274:	6121      	str	r1, [r4, #16]
 8009276:	07d8      	lsls	r0, r3, #31
 8009278:	d5ea      	bpl.n	8009250 <_printf_float+0x194>
 800927a:	1c4b      	adds	r3, r1, #1
 800927c:	e7e7      	b.n	800924e <_printf_float+0x192>
 800927e:	2900      	cmp	r1, #0
 8009280:	bfd4      	ite	le
 8009282:	f1c1 0202 	rsble	r2, r1, #2
 8009286:	2201      	movgt	r2, #1
 8009288:	4413      	add	r3, r2
 800928a:	e7e0      	b.n	800924e <_printf_float+0x192>
 800928c:	6823      	ldr	r3, [r4, #0]
 800928e:	055a      	lsls	r2, r3, #21
 8009290:	d407      	bmi.n	80092a2 <_printf_float+0x1e6>
 8009292:	6923      	ldr	r3, [r4, #16]
 8009294:	4642      	mov	r2, r8
 8009296:	4631      	mov	r1, r6
 8009298:	4628      	mov	r0, r5
 800929a:	47b8      	blx	r7
 800929c:	3001      	adds	r0, #1
 800929e:	d12b      	bne.n	80092f8 <_printf_float+0x23c>
 80092a0:	e767      	b.n	8009172 <_printf_float+0xb6>
 80092a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80092a6:	f240 80dd 	bls.w	8009464 <_printf_float+0x3a8>
 80092aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80092ae:	2200      	movs	r2, #0
 80092b0:	2300      	movs	r3, #0
 80092b2:	f7f7 fc11 	bl	8000ad8 <__aeabi_dcmpeq>
 80092b6:	2800      	cmp	r0, #0
 80092b8:	d033      	beq.n	8009322 <_printf_float+0x266>
 80092ba:	4a37      	ldr	r2, [pc, #220]	@ (8009398 <_printf_float+0x2dc>)
 80092bc:	2301      	movs	r3, #1
 80092be:	4631      	mov	r1, r6
 80092c0:	4628      	mov	r0, r5
 80092c2:	47b8      	blx	r7
 80092c4:	3001      	adds	r0, #1
 80092c6:	f43f af54 	beq.w	8009172 <_printf_float+0xb6>
 80092ca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80092ce:	4543      	cmp	r3, r8
 80092d0:	db02      	blt.n	80092d8 <_printf_float+0x21c>
 80092d2:	6823      	ldr	r3, [r4, #0]
 80092d4:	07d8      	lsls	r0, r3, #31
 80092d6:	d50f      	bpl.n	80092f8 <_printf_float+0x23c>
 80092d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092dc:	4631      	mov	r1, r6
 80092de:	4628      	mov	r0, r5
 80092e0:	47b8      	blx	r7
 80092e2:	3001      	adds	r0, #1
 80092e4:	f43f af45 	beq.w	8009172 <_printf_float+0xb6>
 80092e8:	f04f 0900 	mov.w	r9, #0
 80092ec:	f108 38ff 	add.w	r8, r8, #4294967295
 80092f0:	f104 0a1a 	add.w	sl, r4, #26
 80092f4:	45c8      	cmp	r8, r9
 80092f6:	dc09      	bgt.n	800930c <_printf_float+0x250>
 80092f8:	6823      	ldr	r3, [r4, #0]
 80092fa:	079b      	lsls	r3, r3, #30
 80092fc:	f100 8103 	bmi.w	8009506 <_printf_float+0x44a>
 8009300:	68e0      	ldr	r0, [r4, #12]
 8009302:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009304:	4298      	cmp	r0, r3
 8009306:	bfb8      	it	lt
 8009308:	4618      	movlt	r0, r3
 800930a:	e734      	b.n	8009176 <_printf_float+0xba>
 800930c:	2301      	movs	r3, #1
 800930e:	4652      	mov	r2, sl
 8009310:	4631      	mov	r1, r6
 8009312:	4628      	mov	r0, r5
 8009314:	47b8      	blx	r7
 8009316:	3001      	adds	r0, #1
 8009318:	f43f af2b 	beq.w	8009172 <_printf_float+0xb6>
 800931c:	f109 0901 	add.w	r9, r9, #1
 8009320:	e7e8      	b.n	80092f4 <_printf_float+0x238>
 8009322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009324:	2b00      	cmp	r3, #0
 8009326:	dc39      	bgt.n	800939c <_printf_float+0x2e0>
 8009328:	4a1b      	ldr	r2, [pc, #108]	@ (8009398 <_printf_float+0x2dc>)
 800932a:	2301      	movs	r3, #1
 800932c:	4631      	mov	r1, r6
 800932e:	4628      	mov	r0, r5
 8009330:	47b8      	blx	r7
 8009332:	3001      	adds	r0, #1
 8009334:	f43f af1d 	beq.w	8009172 <_printf_float+0xb6>
 8009338:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800933c:	ea59 0303 	orrs.w	r3, r9, r3
 8009340:	d102      	bne.n	8009348 <_printf_float+0x28c>
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	07d9      	lsls	r1, r3, #31
 8009346:	d5d7      	bpl.n	80092f8 <_printf_float+0x23c>
 8009348:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800934c:	4631      	mov	r1, r6
 800934e:	4628      	mov	r0, r5
 8009350:	47b8      	blx	r7
 8009352:	3001      	adds	r0, #1
 8009354:	f43f af0d 	beq.w	8009172 <_printf_float+0xb6>
 8009358:	f04f 0a00 	mov.w	sl, #0
 800935c:	f104 0b1a 	add.w	fp, r4, #26
 8009360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009362:	425b      	negs	r3, r3
 8009364:	4553      	cmp	r3, sl
 8009366:	dc01      	bgt.n	800936c <_printf_float+0x2b0>
 8009368:	464b      	mov	r3, r9
 800936a:	e793      	b.n	8009294 <_printf_float+0x1d8>
 800936c:	2301      	movs	r3, #1
 800936e:	465a      	mov	r2, fp
 8009370:	4631      	mov	r1, r6
 8009372:	4628      	mov	r0, r5
 8009374:	47b8      	blx	r7
 8009376:	3001      	adds	r0, #1
 8009378:	f43f aefb 	beq.w	8009172 <_printf_float+0xb6>
 800937c:	f10a 0a01 	add.w	sl, sl, #1
 8009380:	e7ee      	b.n	8009360 <_printf_float+0x2a4>
 8009382:	bf00      	nop
 8009384:	7fefffff 	.word	0x7fefffff
 8009388:	0800bc80 	.word	0x0800bc80
 800938c:	0800bc84 	.word	0x0800bc84
 8009390:	0800bc88 	.word	0x0800bc88
 8009394:	0800bc8c 	.word	0x0800bc8c
 8009398:	0800bc90 	.word	0x0800bc90
 800939c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800939e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80093a2:	4553      	cmp	r3, sl
 80093a4:	bfa8      	it	ge
 80093a6:	4653      	movge	r3, sl
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	4699      	mov	r9, r3
 80093ac:	dc36      	bgt.n	800941c <_printf_float+0x360>
 80093ae:	f04f 0b00 	mov.w	fp, #0
 80093b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093b6:	f104 021a 	add.w	r2, r4, #26
 80093ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80093bc:	9306      	str	r3, [sp, #24]
 80093be:	eba3 0309 	sub.w	r3, r3, r9
 80093c2:	455b      	cmp	r3, fp
 80093c4:	dc31      	bgt.n	800942a <_printf_float+0x36e>
 80093c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093c8:	459a      	cmp	sl, r3
 80093ca:	dc3a      	bgt.n	8009442 <_printf_float+0x386>
 80093cc:	6823      	ldr	r3, [r4, #0]
 80093ce:	07da      	lsls	r2, r3, #31
 80093d0:	d437      	bmi.n	8009442 <_printf_float+0x386>
 80093d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093d4:	ebaa 0903 	sub.w	r9, sl, r3
 80093d8:	9b06      	ldr	r3, [sp, #24]
 80093da:	ebaa 0303 	sub.w	r3, sl, r3
 80093de:	4599      	cmp	r9, r3
 80093e0:	bfa8      	it	ge
 80093e2:	4699      	movge	r9, r3
 80093e4:	f1b9 0f00 	cmp.w	r9, #0
 80093e8:	dc33      	bgt.n	8009452 <_printf_float+0x396>
 80093ea:	f04f 0800 	mov.w	r8, #0
 80093ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093f2:	f104 0b1a 	add.w	fp, r4, #26
 80093f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093f8:	ebaa 0303 	sub.w	r3, sl, r3
 80093fc:	eba3 0309 	sub.w	r3, r3, r9
 8009400:	4543      	cmp	r3, r8
 8009402:	f77f af79 	ble.w	80092f8 <_printf_float+0x23c>
 8009406:	2301      	movs	r3, #1
 8009408:	465a      	mov	r2, fp
 800940a:	4631      	mov	r1, r6
 800940c:	4628      	mov	r0, r5
 800940e:	47b8      	blx	r7
 8009410:	3001      	adds	r0, #1
 8009412:	f43f aeae 	beq.w	8009172 <_printf_float+0xb6>
 8009416:	f108 0801 	add.w	r8, r8, #1
 800941a:	e7ec      	b.n	80093f6 <_printf_float+0x33a>
 800941c:	4642      	mov	r2, r8
 800941e:	4631      	mov	r1, r6
 8009420:	4628      	mov	r0, r5
 8009422:	47b8      	blx	r7
 8009424:	3001      	adds	r0, #1
 8009426:	d1c2      	bne.n	80093ae <_printf_float+0x2f2>
 8009428:	e6a3      	b.n	8009172 <_printf_float+0xb6>
 800942a:	2301      	movs	r3, #1
 800942c:	4631      	mov	r1, r6
 800942e:	4628      	mov	r0, r5
 8009430:	9206      	str	r2, [sp, #24]
 8009432:	47b8      	blx	r7
 8009434:	3001      	adds	r0, #1
 8009436:	f43f ae9c 	beq.w	8009172 <_printf_float+0xb6>
 800943a:	9a06      	ldr	r2, [sp, #24]
 800943c:	f10b 0b01 	add.w	fp, fp, #1
 8009440:	e7bb      	b.n	80093ba <_printf_float+0x2fe>
 8009442:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009446:	4631      	mov	r1, r6
 8009448:	4628      	mov	r0, r5
 800944a:	47b8      	blx	r7
 800944c:	3001      	adds	r0, #1
 800944e:	d1c0      	bne.n	80093d2 <_printf_float+0x316>
 8009450:	e68f      	b.n	8009172 <_printf_float+0xb6>
 8009452:	9a06      	ldr	r2, [sp, #24]
 8009454:	464b      	mov	r3, r9
 8009456:	4442      	add	r2, r8
 8009458:	4631      	mov	r1, r6
 800945a:	4628      	mov	r0, r5
 800945c:	47b8      	blx	r7
 800945e:	3001      	adds	r0, #1
 8009460:	d1c3      	bne.n	80093ea <_printf_float+0x32e>
 8009462:	e686      	b.n	8009172 <_printf_float+0xb6>
 8009464:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009468:	f1ba 0f01 	cmp.w	sl, #1
 800946c:	dc01      	bgt.n	8009472 <_printf_float+0x3b6>
 800946e:	07db      	lsls	r3, r3, #31
 8009470:	d536      	bpl.n	80094e0 <_printf_float+0x424>
 8009472:	2301      	movs	r3, #1
 8009474:	4642      	mov	r2, r8
 8009476:	4631      	mov	r1, r6
 8009478:	4628      	mov	r0, r5
 800947a:	47b8      	blx	r7
 800947c:	3001      	adds	r0, #1
 800947e:	f43f ae78 	beq.w	8009172 <_printf_float+0xb6>
 8009482:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009486:	4631      	mov	r1, r6
 8009488:	4628      	mov	r0, r5
 800948a:	47b8      	blx	r7
 800948c:	3001      	adds	r0, #1
 800948e:	f43f ae70 	beq.w	8009172 <_printf_float+0xb6>
 8009492:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009496:	2200      	movs	r2, #0
 8009498:	2300      	movs	r3, #0
 800949a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800949e:	f7f7 fb1b 	bl	8000ad8 <__aeabi_dcmpeq>
 80094a2:	b9c0      	cbnz	r0, 80094d6 <_printf_float+0x41a>
 80094a4:	4653      	mov	r3, sl
 80094a6:	f108 0201 	add.w	r2, r8, #1
 80094aa:	4631      	mov	r1, r6
 80094ac:	4628      	mov	r0, r5
 80094ae:	47b8      	blx	r7
 80094b0:	3001      	adds	r0, #1
 80094b2:	d10c      	bne.n	80094ce <_printf_float+0x412>
 80094b4:	e65d      	b.n	8009172 <_printf_float+0xb6>
 80094b6:	2301      	movs	r3, #1
 80094b8:	465a      	mov	r2, fp
 80094ba:	4631      	mov	r1, r6
 80094bc:	4628      	mov	r0, r5
 80094be:	47b8      	blx	r7
 80094c0:	3001      	adds	r0, #1
 80094c2:	f43f ae56 	beq.w	8009172 <_printf_float+0xb6>
 80094c6:	f108 0801 	add.w	r8, r8, #1
 80094ca:	45d0      	cmp	r8, sl
 80094cc:	dbf3      	blt.n	80094b6 <_printf_float+0x3fa>
 80094ce:	464b      	mov	r3, r9
 80094d0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80094d4:	e6df      	b.n	8009296 <_printf_float+0x1da>
 80094d6:	f04f 0800 	mov.w	r8, #0
 80094da:	f104 0b1a 	add.w	fp, r4, #26
 80094de:	e7f4      	b.n	80094ca <_printf_float+0x40e>
 80094e0:	2301      	movs	r3, #1
 80094e2:	4642      	mov	r2, r8
 80094e4:	e7e1      	b.n	80094aa <_printf_float+0x3ee>
 80094e6:	2301      	movs	r3, #1
 80094e8:	464a      	mov	r2, r9
 80094ea:	4631      	mov	r1, r6
 80094ec:	4628      	mov	r0, r5
 80094ee:	47b8      	blx	r7
 80094f0:	3001      	adds	r0, #1
 80094f2:	f43f ae3e 	beq.w	8009172 <_printf_float+0xb6>
 80094f6:	f108 0801 	add.w	r8, r8, #1
 80094fa:	68e3      	ldr	r3, [r4, #12]
 80094fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80094fe:	1a5b      	subs	r3, r3, r1
 8009500:	4543      	cmp	r3, r8
 8009502:	dcf0      	bgt.n	80094e6 <_printf_float+0x42a>
 8009504:	e6fc      	b.n	8009300 <_printf_float+0x244>
 8009506:	f04f 0800 	mov.w	r8, #0
 800950a:	f104 0919 	add.w	r9, r4, #25
 800950e:	e7f4      	b.n	80094fa <_printf_float+0x43e>

08009510 <_printf_common>:
 8009510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009514:	4616      	mov	r6, r2
 8009516:	4698      	mov	r8, r3
 8009518:	688a      	ldr	r2, [r1, #8]
 800951a:	690b      	ldr	r3, [r1, #16]
 800951c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009520:	4293      	cmp	r3, r2
 8009522:	bfb8      	it	lt
 8009524:	4613      	movlt	r3, r2
 8009526:	6033      	str	r3, [r6, #0]
 8009528:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800952c:	4607      	mov	r7, r0
 800952e:	460c      	mov	r4, r1
 8009530:	b10a      	cbz	r2, 8009536 <_printf_common+0x26>
 8009532:	3301      	adds	r3, #1
 8009534:	6033      	str	r3, [r6, #0]
 8009536:	6823      	ldr	r3, [r4, #0]
 8009538:	0699      	lsls	r1, r3, #26
 800953a:	bf42      	ittt	mi
 800953c:	6833      	ldrmi	r3, [r6, #0]
 800953e:	3302      	addmi	r3, #2
 8009540:	6033      	strmi	r3, [r6, #0]
 8009542:	6825      	ldr	r5, [r4, #0]
 8009544:	f015 0506 	ands.w	r5, r5, #6
 8009548:	d106      	bne.n	8009558 <_printf_common+0x48>
 800954a:	f104 0a19 	add.w	sl, r4, #25
 800954e:	68e3      	ldr	r3, [r4, #12]
 8009550:	6832      	ldr	r2, [r6, #0]
 8009552:	1a9b      	subs	r3, r3, r2
 8009554:	42ab      	cmp	r3, r5
 8009556:	dc26      	bgt.n	80095a6 <_printf_common+0x96>
 8009558:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800955c:	6822      	ldr	r2, [r4, #0]
 800955e:	3b00      	subs	r3, #0
 8009560:	bf18      	it	ne
 8009562:	2301      	movne	r3, #1
 8009564:	0692      	lsls	r2, r2, #26
 8009566:	d42b      	bmi.n	80095c0 <_printf_common+0xb0>
 8009568:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800956c:	4641      	mov	r1, r8
 800956e:	4638      	mov	r0, r7
 8009570:	47c8      	blx	r9
 8009572:	3001      	adds	r0, #1
 8009574:	d01e      	beq.n	80095b4 <_printf_common+0xa4>
 8009576:	6823      	ldr	r3, [r4, #0]
 8009578:	6922      	ldr	r2, [r4, #16]
 800957a:	f003 0306 	and.w	r3, r3, #6
 800957e:	2b04      	cmp	r3, #4
 8009580:	bf02      	ittt	eq
 8009582:	68e5      	ldreq	r5, [r4, #12]
 8009584:	6833      	ldreq	r3, [r6, #0]
 8009586:	1aed      	subeq	r5, r5, r3
 8009588:	68a3      	ldr	r3, [r4, #8]
 800958a:	bf0c      	ite	eq
 800958c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009590:	2500      	movne	r5, #0
 8009592:	4293      	cmp	r3, r2
 8009594:	bfc4      	itt	gt
 8009596:	1a9b      	subgt	r3, r3, r2
 8009598:	18ed      	addgt	r5, r5, r3
 800959a:	2600      	movs	r6, #0
 800959c:	341a      	adds	r4, #26
 800959e:	42b5      	cmp	r5, r6
 80095a0:	d11a      	bne.n	80095d8 <_printf_common+0xc8>
 80095a2:	2000      	movs	r0, #0
 80095a4:	e008      	b.n	80095b8 <_printf_common+0xa8>
 80095a6:	2301      	movs	r3, #1
 80095a8:	4652      	mov	r2, sl
 80095aa:	4641      	mov	r1, r8
 80095ac:	4638      	mov	r0, r7
 80095ae:	47c8      	blx	r9
 80095b0:	3001      	adds	r0, #1
 80095b2:	d103      	bne.n	80095bc <_printf_common+0xac>
 80095b4:	f04f 30ff 	mov.w	r0, #4294967295
 80095b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095bc:	3501      	adds	r5, #1
 80095be:	e7c6      	b.n	800954e <_printf_common+0x3e>
 80095c0:	18e1      	adds	r1, r4, r3
 80095c2:	1c5a      	adds	r2, r3, #1
 80095c4:	2030      	movs	r0, #48	@ 0x30
 80095c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80095ca:	4422      	add	r2, r4
 80095cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80095d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80095d4:	3302      	adds	r3, #2
 80095d6:	e7c7      	b.n	8009568 <_printf_common+0x58>
 80095d8:	2301      	movs	r3, #1
 80095da:	4622      	mov	r2, r4
 80095dc:	4641      	mov	r1, r8
 80095de:	4638      	mov	r0, r7
 80095e0:	47c8      	blx	r9
 80095e2:	3001      	adds	r0, #1
 80095e4:	d0e6      	beq.n	80095b4 <_printf_common+0xa4>
 80095e6:	3601      	adds	r6, #1
 80095e8:	e7d9      	b.n	800959e <_printf_common+0x8e>
	...

080095ec <_printf_i>:
 80095ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095f0:	7e0f      	ldrb	r7, [r1, #24]
 80095f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80095f4:	2f78      	cmp	r7, #120	@ 0x78
 80095f6:	4691      	mov	r9, r2
 80095f8:	4680      	mov	r8, r0
 80095fa:	460c      	mov	r4, r1
 80095fc:	469a      	mov	sl, r3
 80095fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009602:	d807      	bhi.n	8009614 <_printf_i+0x28>
 8009604:	2f62      	cmp	r7, #98	@ 0x62
 8009606:	d80a      	bhi.n	800961e <_printf_i+0x32>
 8009608:	2f00      	cmp	r7, #0
 800960a:	f000 80d2 	beq.w	80097b2 <_printf_i+0x1c6>
 800960e:	2f58      	cmp	r7, #88	@ 0x58
 8009610:	f000 80b9 	beq.w	8009786 <_printf_i+0x19a>
 8009614:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009618:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800961c:	e03a      	b.n	8009694 <_printf_i+0xa8>
 800961e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009622:	2b15      	cmp	r3, #21
 8009624:	d8f6      	bhi.n	8009614 <_printf_i+0x28>
 8009626:	a101      	add	r1, pc, #4	@ (adr r1, 800962c <_printf_i+0x40>)
 8009628:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800962c:	08009685 	.word	0x08009685
 8009630:	08009699 	.word	0x08009699
 8009634:	08009615 	.word	0x08009615
 8009638:	08009615 	.word	0x08009615
 800963c:	08009615 	.word	0x08009615
 8009640:	08009615 	.word	0x08009615
 8009644:	08009699 	.word	0x08009699
 8009648:	08009615 	.word	0x08009615
 800964c:	08009615 	.word	0x08009615
 8009650:	08009615 	.word	0x08009615
 8009654:	08009615 	.word	0x08009615
 8009658:	08009799 	.word	0x08009799
 800965c:	080096c3 	.word	0x080096c3
 8009660:	08009753 	.word	0x08009753
 8009664:	08009615 	.word	0x08009615
 8009668:	08009615 	.word	0x08009615
 800966c:	080097bb 	.word	0x080097bb
 8009670:	08009615 	.word	0x08009615
 8009674:	080096c3 	.word	0x080096c3
 8009678:	08009615 	.word	0x08009615
 800967c:	08009615 	.word	0x08009615
 8009680:	0800975b 	.word	0x0800975b
 8009684:	6833      	ldr	r3, [r6, #0]
 8009686:	1d1a      	adds	r2, r3, #4
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	6032      	str	r2, [r6, #0]
 800968c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009690:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009694:	2301      	movs	r3, #1
 8009696:	e09d      	b.n	80097d4 <_printf_i+0x1e8>
 8009698:	6833      	ldr	r3, [r6, #0]
 800969a:	6820      	ldr	r0, [r4, #0]
 800969c:	1d19      	adds	r1, r3, #4
 800969e:	6031      	str	r1, [r6, #0]
 80096a0:	0606      	lsls	r6, r0, #24
 80096a2:	d501      	bpl.n	80096a8 <_printf_i+0xbc>
 80096a4:	681d      	ldr	r5, [r3, #0]
 80096a6:	e003      	b.n	80096b0 <_printf_i+0xc4>
 80096a8:	0645      	lsls	r5, r0, #25
 80096aa:	d5fb      	bpl.n	80096a4 <_printf_i+0xb8>
 80096ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80096b0:	2d00      	cmp	r5, #0
 80096b2:	da03      	bge.n	80096bc <_printf_i+0xd0>
 80096b4:	232d      	movs	r3, #45	@ 0x2d
 80096b6:	426d      	negs	r5, r5
 80096b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096bc:	4859      	ldr	r0, [pc, #356]	@ (8009824 <_printf_i+0x238>)
 80096be:	230a      	movs	r3, #10
 80096c0:	e011      	b.n	80096e6 <_printf_i+0xfa>
 80096c2:	6821      	ldr	r1, [r4, #0]
 80096c4:	6833      	ldr	r3, [r6, #0]
 80096c6:	0608      	lsls	r0, r1, #24
 80096c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80096cc:	d402      	bmi.n	80096d4 <_printf_i+0xe8>
 80096ce:	0649      	lsls	r1, r1, #25
 80096d0:	bf48      	it	mi
 80096d2:	b2ad      	uxthmi	r5, r5
 80096d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80096d6:	4853      	ldr	r0, [pc, #332]	@ (8009824 <_printf_i+0x238>)
 80096d8:	6033      	str	r3, [r6, #0]
 80096da:	bf14      	ite	ne
 80096dc:	230a      	movne	r3, #10
 80096de:	2308      	moveq	r3, #8
 80096e0:	2100      	movs	r1, #0
 80096e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80096e6:	6866      	ldr	r6, [r4, #4]
 80096e8:	60a6      	str	r6, [r4, #8]
 80096ea:	2e00      	cmp	r6, #0
 80096ec:	bfa2      	ittt	ge
 80096ee:	6821      	ldrge	r1, [r4, #0]
 80096f0:	f021 0104 	bicge.w	r1, r1, #4
 80096f4:	6021      	strge	r1, [r4, #0]
 80096f6:	b90d      	cbnz	r5, 80096fc <_printf_i+0x110>
 80096f8:	2e00      	cmp	r6, #0
 80096fa:	d04b      	beq.n	8009794 <_printf_i+0x1a8>
 80096fc:	4616      	mov	r6, r2
 80096fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8009702:	fb03 5711 	mls	r7, r3, r1, r5
 8009706:	5dc7      	ldrb	r7, [r0, r7]
 8009708:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800970c:	462f      	mov	r7, r5
 800970e:	42bb      	cmp	r3, r7
 8009710:	460d      	mov	r5, r1
 8009712:	d9f4      	bls.n	80096fe <_printf_i+0x112>
 8009714:	2b08      	cmp	r3, #8
 8009716:	d10b      	bne.n	8009730 <_printf_i+0x144>
 8009718:	6823      	ldr	r3, [r4, #0]
 800971a:	07df      	lsls	r7, r3, #31
 800971c:	d508      	bpl.n	8009730 <_printf_i+0x144>
 800971e:	6923      	ldr	r3, [r4, #16]
 8009720:	6861      	ldr	r1, [r4, #4]
 8009722:	4299      	cmp	r1, r3
 8009724:	bfde      	ittt	le
 8009726:	2330      	movle	r3, #48	@ 0x30
 8009728:	f806 3c01 	strble.w	r3, [r6, #-1]
 800972c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009730:	1b92      	subs	r2, r2, r6
 8009732:	6122      	str	r2, [r4, #16]
 8009734:	f8cd a000 	str.w	sl, [sp]
 8009738:	464b      	mov	r3, r9
 800973a:	aa03      	add	r2, sp, #12
 800973c:	4621      	mov	r1, r4
 800973e:	4640      	mov	r0, r8
 8009740:	f7ff fee6 	bl	8009510 <_printf_common>
 8009744:	3001      	adds	r0, #1
 8009746:	d14a      	bne.n	80097de <_printf_i+0x1f2>
 8009748:	f04f 30ff 	mov.w	r0, #4294967295
 800974c:	b004      	add	sp, #16
 800974e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009752:	6823      	ldr	r3, [r4, #0]
 8009754:	f043 0320 	orr.w	r3, r3, #32
 8009758:	6023      	str	r3, [r4, #0]
 800975a:	4833      	ldr	r0, [pc, #204]	@ (8009828 <_printf_i+0x23c>)
 800975c:	2778      	movs	r7, #120	@ 0x78
 800975e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009762:	6823      	ldr	r3, [r4, #0]
 8009764:	6831      	ldr	r1, [r6, #0]
 8009766:	061f      	lsls	r7, r3, #24
 8009768:	f851 5b04 	ldr.w	r5, [r1], #4
 800976c:	d402      	bmi.n	8009774 <_printf_i+0x188>
 800976e:	065f      	lsls	r7, r3, #25
 8009770:	bf48      	it	mi
 8009772:	b2ad      	uxthmi	r5, r5
 8009774:	6031      	str	r1, [r6, #0]
 8009776:	07d9      	lsls	r1, r3, #31
 8009778:	bf44      	itt	mi
 800977a:	f043 0320 	orrmi.w	r3, r3, #32
 800977e:	6023      	strmi	r3, [r4, #0]
 8009780:	b11d      	cbz	r5, 800978a <_printf_i+0x19e>
 8009782:	2310      	movs	r3, #16
 8009784:	e7ac      	b.n	80096e0 <_printf_i+0xf4>
 8009786:	4827      	ldr	r0, [pc, #156]	@ (8009824 <_printf_i+0x238>)
 8009788:	e7e9      	b.n	800975e <_printf_i+0x172>
 800978a:	6823      	ldr	r3, [r4, #0]
 800978c:	f023 0320 	bic.w	r3, r3, #32
 8009790:	6023      	str	r3, [r4, #0]
 8009792:	e7f6      	b.n	8009782 <_printf_i+0x196>
 8009794:	4616      	mov	r6, r2
 8009796:	e7bd      	b.n	8009714 <_printf_i+0x128>
 8009798:	6833      	ldr	r3, [r6, #0]
 800979a:	6825      	ldr	r5, [r4, #0]
 800979c:	6961      	ldr	r1, [r4, #20]
 800979e:	1d18      	adds	r0, r3, #4
 80097a0:	6030      	str	r0, [r6, #0]
 80097a2:	062e      	lsls	r6, r5, #24
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	d501      	bpl.n	80097ac <_printf_i+0x1c0>
 80097a8:	6019      	str	r1, [r3, #0]
 80097aa:	e002      	b.n	80097b2 <_printf_i+0x1c6>
 80097ac:	0668      	lsls	r0, r5, #25
 80097ae:	d5fb      	bpl.n	80097a8 <_printf_i+0x1bc>
 80097b0:	8019      	strh	r1, [r3, #0]
 80097b2:	2300      	movs	r3, #0
 80097b4:	6123      	str	r3, [r4, #16]
 80097b6:	4616      	mov	r6, r2
 80097b8:	e7bc      	b.n	8009734 <_printf_i+0x148>
 80097ba:	6833      	ldr	r3, [r6, #0]
 80097bc:	1d1a      	adds	r2, r3, #4
 80097be:	6032      	str	r2, [r6, #0]
 80097c0:	681e      	ldr	r6, [r3, #0]
 80097c2:	6862      	ldr	r2, [r4, #4]
 80097c4:	2100      	movs	r1, #0
 80097c6:	4630      	mov	r0, r6
 80097c8:	f7f6 fd0a 	bl	80001e0 <memchr>
 80097cc:	b108      	cbz	r0, 80097d2 <_printf_i+0x1e6>
 80097ce:	1b80      	subs	r0, r0, r6
 80097d0:	6060      	str	r0, [r4, #4]
 80097d2:	6863      	ldr	r3, [r4, #4]
 80097d4:	6123      	str	r3, [r4, #16]
 80097d6:	2300      	movs	r3, #0
 80097d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097dc:	e7aa      	b.n	8009734 <_printf_i+0x148>
 80097de:	6923      	ldr	r3, [r4, #16]
 80097e0:	4632      	mov	r2, r6
 80097e2:	4649      	mov	r1, r9
 80097e4:	4640      	mov	r0, r8
 80097e6:	47d0      	blx	sl
 80097e8:	3001      	adds	r0, #1
 80097ea:	d0ad      	beq.n	8009748 <_printf_i+0x15c>
 80097ec:	6823      	ldr	r3, [r4, #0]
 80097ee:	079b      	lsls	r3, r3, #30
 80097f0:	d413      	bmi.n	800981a <_printf_i+0x22e>
 80097f2:	68e0      	ldr	r0, [r4, #12]
 80097f4:	9b03      	ldr	r3, [sp, #12]
 80097f6:	4298      	cmp	r0, r3
 80097f8:	bfb8      	it	lt
 80097fa:	4618      	movlt	r0, r3
 80097fc:	e7a6      	b.n	800974c <_printf_i+0x160>
 80097fe:	2301      	movs	r3, #1
 8009800:	4632      	mov	r2, r6
 8009802:	4649      	mov	r1, r9
 8009804:	4640      	mov	r0, r8
 8009806:	47d0      	blx	sl
 8009808:	3001      	adds	r0, #1
 800980a:	d09d      	beq.n	8009748 <_printf_i+0x15c>
 800980c:	3501      	adds	r5, #1
 800980e:	68e3      	ldr	r3, [r4, #12]
 8009810:	9903      	ldr	r1, [sp, #12]
 8009812:	1a5b      	subs	r3, r3, r1
 8009814:	42ab      	cmp	r3, r5
 8009816:	dcf2      	bgt.n	80097fe <_printf_i+0x212>
 8009818:	e7eb      	b.n	80097f2 <_printf_i+0x206>
 800981a:	2500      	movs	r5, #0
 800981c:	f104 0619 	add.w	r6, r4, #25
 8009820:	e7f5      	b.n	800980e <_printf_i+0x222>
 8009822:	bf00      	nop
 8009824:	0800bc92 	.word	0x0800bc92
 8009828:	0800bca3 	.word	0x0800bca3

0800982c <std>:
 800982c:	2300      	movs	r3, #0
 800982e:	b510      	push	{r4, lr}
 8009830:	4604      	mov	r4, r0
 8009832:	e9c0 3300 	strd	r3, r3, [r0]
 8009836:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800983a:	6083      	str	r3, [r0, #8]
 800983c:	8181      	strh	r1, [r0, #12]
 800983e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009840:	81c2      	strh	r2, [r0, #14]
 8009842:	6183      	str	r3, [r0, #24]
 8009844:	4619      	mov	r1, r3
 8009846:	2208      	movs	r2, #8
 8009848:	305c      	adds	r0, #92	@ 0x5c
 800984a:	f000 f914 	bl	8009a76 <memset>
 800984e:	4b0d      	ldr	r3, [pc, #52]	@ (8009884 <std+0x58>)
 8009850:	6263      	str	r3, [r4, #36]	@ 0x24
 8009852:	4b0d      	ldr	r3, [pc, #52]	@ (8009888 <std+0x5c>)
 8009854:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009856:	4b0d      	ldr	r3, [pc, #52]	@ (800988c <std+0x60>)
 8009858:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800985a:	4b0d      	ldr	r3, [pc, #52]	@ (8009890 <std+0x64>)
 800985c:	6323      	str	r3, [r4, #48]	@ 0x30
 800985e:	4b0d      	ldr	r3, [pc, #52]	@ (8009894 <std+0x68>)
 8009860:	6224      	str	r4, [r4, #32]
 8009862:	429c      	cmp	r4, r3
 8009864:	d006      	beq.n	8009874 <std+0x48>
 8009866:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800986a:	4294      	cmp	r4, r2
 800986c:	d002      	beq.n	8009874 <std+0x48>
 800986e:	33d0      	adds	r3, #208	@ 0xd0
 8009870:	429c      	cmp	r4, r3
 8009872:	d105      	bne.n	8009880 <std+0x54>
 8009874:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800987c:	f000 b978 	b.w	8009b70 <__retarget_lock_init_recursive>
 8009880:	bd10      	pop	{r4, pc}
 8009882:	bf00      	nop
 8009884:	080099f1 	.word	0x080099f1
 8009888:	08009a13 	.word	0x08009a13
 800988c:	08009a4b 	.word	0x08009a4b
 8009890:	08009a6f 	.word	0x08009a6f
 8009894:	20001fe4 	.word	0x20001fe4

08009898 <stdio_exit_handler>:
 8009898:	4a02      	ldr	r2, [pc, #8]	@ (80098a4 <stdio_exit_handler+0xc>)
 800989a:	4903      	ldr	r1, [pc, #12]	@ (80098a8 <stdio_exit_handler+0x10>)
 800989c:	4803      	ldr	r0, [pc, #12]	@ (80098ac <stdio_exit_handler+0x14>)
 800989e:	f000 b869 	b.w	8009974 <_fwalk_sglue>
 80098a2:	bf00      	nop
 80098a4:	200000fc 	.word	0x200000fc
 80098a8:	0800b4cd 	.word	0x0800b4cd
 80098ac:	2000010c 	.word	0x2000010c

080098b0 <cleanup_stdio>:
 80098b0:	6841      	ldr	r1, [r0, #4]
 80098b2:	4b0c      	ldr	r3, [pc, #48]	@ (80098e4 <cleanup_stdio+0x34>)
 80098b4:	4299      	cmp	r1, r3
 80098b6:	b510      	push	{r4, lr}
 80098b8:	4604      	mov	r4, r0
 80098ba:	d001      	beq.n	80098c0 <cleanup_stdio+0x10>
 80098bc:	f001 fe06 	bl	800b4cc <_fflush_r>
 80098c0:	68a1      	ldr	r1, [r4, #8]
 80098c2:	4b09      	ldr	r3, [pc, #36]	@ (80098e8 <cleanup_stdio+0x38>)
 80098c4:	4299      	cmp	r1, r3
 80098c6:	d002      	beq.n	80098ce <cleanup_stdio+0x1e>
 80098c8:	4620      	mov	r0, r4
 80098ca:	f001 fdff 	bl	800b4cc <_fflush_r>
 80098ce:	68e1      	ldr	r1, [r4, #12]
 80098d0:	4b06      	ldr	r3, [pc, #24]	@ (80098ec <cleanup_stdio+0x3c>)
 80098d2:	4299      	cmp	r1, r3
 80098d4:	d004      	beq.n	80098e0 <cleanup_stdio+0x30>
 80098d6:	4620      	mov	r0, r4
 80098d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098dc:	f001 bdf6 	b.w	800b4cc <_fflush_r>
 80098e0:	bd10      	pop	{r4, pc}
 80098e2:	bf00      	nop
 80098e4:	20001fe4 	.word	0x20001fe4
 80098e8:	2000204c 	.word	0x2000204c
 80098ec:	200020b4 	.word	0x200020b4

080098f0 <global_stdio_init.part.0>:
 80098f0:	b510      	push	{r4, lr}
 80098f2:	4b0b      	ldr	r3, [pc, #44]	@ (8009920 <global_stdio_init.part.0+0x30>)
 80098f4:	4c0b      	ldr	r4, [pc, #44]	@ (8009924 <global_stdio_init.part.0+0x34>)
 80098f6:	4a0c      	ldr	r2, [pc, #48]	@ (8009928 <global_stdio_init.part.0+0x38>)
 80098f8:	601a      	str	r2, [r3, #0]
 80098fa:	4620      	mov	r0, r4
 80098fc:	2200      	movs	r2, #0
 80098fe:	2104      	movs	r1, #4
 8009900:	f7ff ff94 	bl	800982c <std>
 8009904:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009908:	2201      	movs	r2, #1
 800990a:	2109      	movs	r1, #9
 800990c:	f7ff ff8e 	bl	800982c <std>
 8009910:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009914:	2202      	movs	r2, #2
 8009916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800991a:	2112      	movs	r1, #18
 800991c:	f7ff bf86 	b.w	800982c <std>
 8009920:	2000211c 	.word	0x2000211c
 8009924:	20001fe4 	.word	0x20001fe4
 8009928:	08009899 	.word	0x08009899

0800992c <__sfp_lock_acquire>:
 800992c:	4801      	ldr	r0, [pc, #4]	@ (8009934 <__sfp_lock_acquire+0x8>)
 800992e:	f000 b920 	b.w	8009b72 <__retarget_lock_acquire_recursive>
 8009932:	bf00      	nop
 8009934:	20002125 	.word	0x20002125

08009938 <__sfp_lock_release>:
 8009938:	4801      	ldr	r0, [pc, #4]	@ (8009940 <__sfp_lock_release+0x8>)
 800993a:	f000 b91b 	b.w	8009b74 <__retarget_lock_release_recursive>
 800993e:	bf00      	nop
 8009940:	20002125 	.word	0x20002125

08009944 <__sinit>:
 8009944:	b510      	push	{r4, lr}
 8009946:	4604      	mov	r4, r0
 8009948:	f7ff fff0 	bl	800992c <__sfp_lock_acquire>
 800994c:	6a23      	ldr	r3, [r4, #32]
 800994e:	b11b      	cbz	r3, 8009958 <__sinit+0x14>
 8009950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009954:	f7ff bff0 	b.w	8009938 <__sfp_lock_release>
 8009958:	4b04      	ldr	r3, [pc, #16]	@ (800996c <__sinit+0x28>)
 800995a:	6223      	str	r3, [r4, #32]
 800995c:	4b04      	ldr	r3, [pc, #16]	@ (8009970 <__sinit+0x2c>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d1f5      	bne.n	8009950 <__sinit+0xc>
 8009964:	f7ff ffc4 	bl	80098f0 <global_stdio_init.part.0>
 8009968:	e7f2      	b.n	8009950 <__sinit+0xc>
 800996a:	bf00      	nop
 800996c:	080098b1 	.word	0x080098b1
 8009970:	2000211c 	.word	0x2000211c

08009974 <_fwalk_sglue>:
 8009974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009978:	4607      	mov	r7, r0
 800997a:	4688      	mov	r8, r1
 800997c:	4614      	mov	r4, r2
 800997e:	2600      	movs	r6, #0
 8009980:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009984:	f1b9 0901 	subs.w	r9, r9, #1
 8009988:	d505      	bpl.n	8009996 <_fwalk_sglue+0x22>
 800998a:	6824      	ldr	r4, [r4, #0]
 800998c:	2c00      	cmp	r4, #0
 800998e:	d1f7      	bne.n	8009980 <_fwalk_sglue+0xc>
 8009990:	4630      	mov	r0, r6
 8009992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009996:	89ab      	ldrh	r3, [r5, #12]
 8009998:	2b01      	cmp	r3, #1
 800999a:	d907      	bls.n	80099ac <_fwalk_sglue+0x38>
 800999c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099a0:	3301      	adds	r3, #1
 80099a2:	d003      	beq.n	80099ac <_fwalk_sglue+0x38>
 80099a4:	4629      	mov	r1, r5
 80099a6:	4638      	mov	r0, r7
 80099a8:	47c0      	blx	r8
 80099aa:	4306      	orrs	r6, r0
 80099ac:	3568      	adds	r5, #104	@ 0x68
 80099ae:	e7e9      	b.n	8009984 <_fwalk_sglue+0x10>

080099b0 <siprintf>:
 80099b0:	b40e      	push	{r1, r2, r3}
 80099b2:	b500      	push	{lr}
 80099b4:	b09c      	sub	sp, #112	@ 0x70
 80099b6:	ab1d      	add	r3, sp, #116	@ 0x74
 80099b8:	9002      	str	r0, [sp, #8]
 80099ba:	9006      	str	r0, [sp, #24]
 80099bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80099c0:	4809      	ldr	r0, [pc, #36]	@ (80099e8 <siprintf+0x38>)
 80099c2:	9107      	str	r1, [sp, #28]
 80099c4:	9104      	str	r1, [sp, #16]
 80099c6:	4909      	ldr	r1, [pc, #36]	@ (80099ec <siprintf+0x3c>)
 80099c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80099cc:	9105      	str	r1, [sp, #20]
 80099ce:	6800      	ldr	r0, [r0, #0]
 80099d0:	9301      	str	r3, [sp, #4]
 80099d2:	a902      	add	r1, sp, #8
 80099d4:	f001 fbfa 	bl	800b1cc <_svfiprintf_r>
 80099d8:	9b02      	ldr	r3, [sp, #8]
 80099da:	2200      	movs	r2, #0
 80099dc:	701a      	strb	r2, [r3, #0]
 80099de:	b01c      	add	sp, #112	@ 0x70
 80099e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80099e4:	b003      	add	sp, #12
 80099e6:	4770      	bx	lr
 80099e8:	20000108 	.word	0x20000108
 80099ec:	ffff0208 	.word	0xffff0208

080099f0 <__sread>:
 80099f0:	b510      	push	{r4, lr}
 80099f2:	460c      	mov	r4, r1
 80099f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099f8:	f000 f86c 	bl	8009ad4 <_read_r>
 80099fc:	2800      	cmp	r0, #0
 80099fe:	bfab      	itete	ge
 8009a00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009a02:	89a3      	ldrhlt	r3, [r4, #12]
 8009a04:	181b      	addge	r3, r3, r0
 8009a06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009a0a:	bfac      	ite	ge
 8009a0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009a0e:	81a3      	strhlt	r3, [r4, #12]
 8009a10:	bd10      	pop	{r4, pc}

08009a12 <__swrite>:
 8009a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a16:	461f      	mov	r7, r3
 8009a18:	898b      	ldrh	r3, [r1, #12]
 8009a1a:	05db      	lsls	r3, r3, #23
 8009a1c:	4605      	mov	r5, r0
 8009a1e:	460c      	mov	r4, r1
 8009a20:	4616      	mov	r6, r2
 8009a22:	d505      	bpl.n	8009a30 <__swrite+0x1e>
 8009a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a28:	2302      	movs	r3, #2
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f000 f840 	bl	8009ab0 <_lseek_r>
 8009a30:	89a3      	ldrh	r3, [r4, #12]
 8009a32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009a3a:	81a3      	strh	r3, [r4, #12]
 8009a3c:	4632      	mov	r2, r6
 8009a3e:	463b      	mov	r3, r7
 8009a40:	4628      	mov	r0, r5
 8009a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a46:	f000 b857 	b.w	8009af8 <_write_r>

08009a4a <__sseek>:
 8009a4a:	b510      	push	{r4, lr}
 8009a4c:	460c      	mov	r4, r1
 8009a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a52:	f000 f82d 	bl	8009ab0 <_lseek_r>
 8009a56:	1c43      	adds	r3, r0, #1
 8009a58:	89a3      	ldrh	r3, [r4, #12]
 8009a5a:	bf15      	itete	ne
 8009a5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009a5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009a62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009a66:	81a3      	strheq	r3, [r4, #12]
 8009a68:	bf18      	it	ne
 8009a6a:	81a3      	strhne	r3, [r4, #12]
 8009a6c:	bd10      	pop	{r4, pc}

08009a6e <__sclose>:
 8009a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a72:	f000 b80d 	b.w	8009a90 <_close_r>

08009a76 <memset>:
 8009a76:	4402      	add	r2, r0
 8009a78:	4603      	mov	r3, r0
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d100      	bne.n	8009a80 <memset+0xa>
 8009a7e:	4770      	bx	lr
 8009a80:	f803 1b01 	strb.w	r1, [r3], #1
 8009a84:	e7f9      	b.n	8009a7a <memset+0x4>
	...

08009a88 <_localeconv_r>:
 8009a88:	4800      	ldr	r0, [pc, #0]	@ (8009a8c <_localeconv_r+0x4>)
 8009a8a:	4770      	bx	lr
 8009a8c:	20000248 	.word	0x20000248

08009a90 <_close_r>:
 8009a90:	b538      	push	{r3, r4, r5, lr}
 8009a92:	4d06      	ldr	r5, [pc, #24]	@ (8009aac <_close_r+0x1c>)
 8009a94:	2300      	movs	r3, #0
 8009a96:	4604      	mov	r4, r0
 8009a98:	4608      	mov	r0, r1
 8009a9a:	602b      	str	r3, [r5, #0]
 8009a9c:	f7f7 ff08 	bl	80018b0 <_close>
 8009aa0:	1c43      	adds	r3, r0, #1
 8009aa2:	d102      	bne.n	8009aaa <_close_r+0x1a>
 8009aa4:	682b      	ldr	r3, [r5, #0]
 8009aa6:	b103      	cbz	r3, 8009aaa <_close_r+0x1a>
 8009aa8:	6023      	str	r3, [r4, #0]
 8009aaa:	bd38      	pop	{r3, r4, r5, pc}
 8009aac:	20002120 	.word	0x20002120

08009ab0 <_lseek_r>:
 8009ab0:	b538      	push	{r3, r4, r5, lr}
 8009ab2:	4d07      	ldr	r5, [pc, #28]	@ (8009ad0 <_lseek_r+0x20>)
 8009ab4:	4604      	mov	r4, r0
 8009ab6:	4608      	mov	r0, r1
 8009ab8:	4611      	mov	r1, r2
 8009aba:	2200      	movs	r2, #0
 8009abc:	602a      	str	r2, [r5, #0]
 8009abe:	461a      	mov	r2, r3
 8009ac0:	f7f7 ff1d 	bl	80018fe <_lseek>
 8009ac4:	1c43      	adds	r3, r0, #1
 8009ac6:	d102      	bne.n	8009ace <_lseek_r+0x1e>
 8009ac8:	682b      	ldr	r3, [r5, #0]
 8009aca:	b103      	cbz	r3, 8009ace <_lseek_r+0x1e>
 8009acc:	6023      	str	r3, [r4, #0]
 8009ace:	bd38      	pop	{r3, r4, r5, pc}
 8009ad0:	20002120 	.word	0x20002120

08009ad4 <_read_r>:
 8009ad4:	b538      	push	{r3, r4, r5, lr}
 8009ad6:	4d07      	ldr	r5, [pc, #28]	@ (8009af4 <_read_r+0x20>)
 8009ad8:	4604      	mov	r4, r0
 8009ada:	4608      	mov	r0, r1
 8009adc:	4611      	mov	r1, r2
 8009ade:	2200      	movs	r2, #0
 8009ae0:	602a      	str	r2, [r5, #0]
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	f7f7 feab 	bl	800183e <_read>
 8009ae8:	1c43      	adds	r3, r0, #1
 8009aea:	d102      	bne.n	8009af2 <_read_r+0x1e>
 8009aec:	682b      	ldr	r3, [r5, #0]
 8009aee:	b103      	cbz	r3, 8009af2 <_read_r+0x1e>
 8009af0:	6023      	str	r3, [r4, #0]
 8009af2:	bd38      	pop	{r3, r4, r5, pc}
 8009af4:	20002120 	.word	0x20002120

08009af8 <_write_r>:
 8009af8:	b538      	push	{r3, r4, r5, lr}
 8009afa:	4d07      	ldr	r5, [pc, #28]	@ (8009b18 <_write_r+0x20>)
 8009afc:	4604      	mov	r4, r0
 8009afe:	4608      	mov	r0, r1
 8009b00:	4611      	mov	r1, r2
 8009b02:	2200      	movs	r2, #0
 8009b04:	602a      	str	r2, [r5, #0]
 8009b06:	461a      	mov	r2, r3
 8009b08:	f7f7 feb6 	bl	8001878 <_write>
 8009b0c:	1c43      	adds	r3, r0, #1
 8009b0e:	d102      	bne.n	8009b16 <_write_r+0x1e>
 8009b10:	682b      	ldr	r3, [r5, #0]
 8009b12:	b103      	cbz	r3, 8009b16 <_write_r+0x1e>
 8009b14:	6023      	str	r3, [r4, #0]
 8009b16:	bd38      	pop	{r3, r4, r5, pc}
 8009b18:	20002120 	.word	0x20002120

08009b1c <__errno>:
 8009b1c:	4b01      	ldr	r3, [pc, #4]	@ (8009b24 <__errno+0x8>)
 8009b1e:	6818      	ldr	r0, [r3, #0]
 8009b20:	4770      	bx	lr
 8009b22:	bf00      	nop
 8009b24:	20000108 	.word	0x20000108

08009b28 <__libc_init_array>:
 8009b28:	b570      	push	{r4, r5, r6, lr}
 8009b2a:	4d0d      	ldr	r5, [pc, #52]	@ (8009b60 <__libc_init_array+0x38>)
 8009b2c:	4c0d      	ldr	r4, [pc, #52]	@ (8009b64 <__libc_init_array+0x3c>)
 8009b2e:	1b64      	subs	r4, r4, r5
 8009b30:	10a4      	asrs	r4, r4, #2
 8009b32:	2600      	movs	r6, #0
 8009b34:	42a6      	cmp	r6, r4
 8009b36:	d109      	bne.n	8009b4c <__libc_init_array+0x24>
 8009b38:	4d0b      	ldr	r5, [pc, #44]	@ (8009b68 <__libc_init_array+0x40>)
 8009b3a:	4c0c      	ldr	r4, [pc, #48]	@ (8009b6c <__libc_init_array+0x44>)
 8009b3c:	f002 f864 	bl	800bc08 <_init>
 8009b40:	1b64      	subs	r4, r4, r5
 8009b42:	10a4      	asrs	r4, r4, #2
 8009b44:	2600      	movs	r6, #0
 8009b46:	42a6      	cmp	r6, r4
 8009b48:	d105      	bne.n	8009b56 <__libc_init_array+0x2e>
 8009b4a:	bd70      	pop	{r4, r5, r6, pc}
 8009b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b50:	4798      	blx	r3
 8009b52:	3601      	adds	r6, #1
 8009b54:	e7ee      	b.n	8009b34 <__libc_init_array+0xc>
 8009b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b5a:	4798      	blx	r3
 8009b5c:	3601      	adds	r6, #1
 8009b5e:	e7f2      	b.n	8009b46 <__libc_init_array+0x1e>
 8009b60:	0800bff8 	.word	0x0800bff8
 8009b64:	0800bff8 	.word	0x0800bff8
 8009b68:	0800bff8 	.word	0x0800bff8
 8009b6c:	0800bffc 	.word	0x0800bffc

08009b70 <__retarget_lock_init_recursive>:
 8009b70:	4770      	bx	lr

08009b72 <__retarget_lock_acquire_recursive>:
 8009b72:	4770      	bx	lr

08009b74 <__retarget_lock_release_recursive>:
 8009b74:	4770      	bx	lr

08009b76 <quorem>:
 8009b76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b7a:	6903      	ldr	r3, [r0, #16]
 8009b7c:	690c      	ldr	r4, [r1, #16]
 8009b7e:	42a3      	cmp	r3, r4
 8009b80:	4607      	mov	r7, r0
 8009b82:	db7e      	blt.n	8009c82 <quorem+0x10c>
 8009b84:	3c01      	subs	r4, #1
 8009b86:	f101 0814 	add.w	r8, r1, #20
 8009b8a:	00a3      	lsls	r3, r4, #2
 8009b8c:	f100 0514 	add.w	r5, r0, #20
 8009b90:	9300      	str	r3, [sp, #0]
 8009b92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b96:	9301      	str	r3, [sp, #4]
 8009b98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ba8:	fbb2 f6f3 	udiv	r6, r2, r3
 8009bac:	d32e      	bcc.n	8009c0c <quorem+0x96>
 8009bae:	f04f 0a00 	mov.w	sl, #0
 8009bb2:	46c4      	mov	ip, r8
 8009bb4:	46ae      	mov	lr, r5
 8009bb6:	46d3      	mov	fp, sl
 8009bb8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009bbc:	b298      	uxth	r0, r3
 8009bbe:	fb06 a000 	mla	r0, r6, r0, sl
 8009bc2:	0c02      	lsrs	r2, r0, #16
 8009bc4:	0c1b      	lsrs	r3, r3, #16
 8009bc6:	fb06 2303 	mla	r3, r6, r3, r2
 8009bca:	f8de 2000 	ldr.w	r2, [lr]
 8009bce:	b280      	uxth	r0, r0
 8009bd0:	b292      	uxth	r2, r2
 8009bd2:	1a12      	subs	r2, r2, r0
 8009bd4:	445a      	add	r2, fp
 8009bd6:	f8de 0000 	ldr.w	r0, [lr]
 8009bda:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009be4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009be8:	b292      	uxth	r2, r2
 8009bea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009bee:	45e1      	cmp	r9, ip
 8009bf0:	f84e 2b04 	str.w	r2, [lr], #4
 8009bf4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009bf8:	d2de      	bcs.n	8009bb8 <quorem+0x42>
 8009bfa:	9b00      	ldr	r3, [sp, #0]
 8009bfc:	58eb      	ldr	r3, [r5, r3]
 8009bfe:	b92b      	cbnz	r3, 8009c0c <quorem+0x96>
 8009c00:	9b01      	ldr	r3, [sp, #4]
 8009c02:	3b04      	subs	r3, #4
 8009c04:	429d      	cmp	r5, r3
 8009c06:	461a      	mov	r2, r3
 8009c08:	d32f      	bcc.n	8009c6a <quorem+0xf4>
 8009c0a:	613c      	str	r4, [r7, #16]
 8009c0c:	4638      	mov	r0, r7
 8009c0e:	f001 f979 	bl	800af04 <__mcmp>
 8009c12:	2800      	cmp	r0, #0
 8009c14:	db25      	blt.n	8009c62 <quorem+0xec>
 8009c16:	4629      	mov	r1, r5
 8009c18:	2000      	movs	r0, #0
 8009c1a:	f858 2b04 	ldr.w	r2, [r8], #4
 8009c1e:	f8d1 c000 	ldr.w	ip, [r1]
 8009c22:	fa1f fe82 	uxth.w	lr, r2
 8009c26:	fa1f f38c 	uxth.w	r3, ip
 8009c2a:	eba3 030e 	sub.w	r3, r3, lr
 8009c2e:	4403      	add	r3, r0
 8009c30:	0c12      	lsrs	r2, r2, #16
 8009c32:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009c36:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c40:	45c1      	cmp	r9, r8
 8009c42:	f841 3b04 	str.w	r3, [r1], #4
 8009c46:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009c4a:	d2e6      	bcs.n	8009c1a <quorem+0xa4>
 8009c4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c54:	b922      	cbnz	r2, 8009c60 <quorem+0xea>
 8009c56:	3b04      	subs	r3, #4
 8009c58:	429d      	cmp	r5, r3
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	d30b      	bcc.n	8009c76 <quorem+0x100>
 8009c5e:	613c      	str	r4, [r7, #16]
 8009c60:	3601      	adds	r6, #1
 8009c62:	4630      	mov	r0, r6
 8009c64:	b003      	add	sp, #12
 8009c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c6a:	6812      	ldr	r2, [r2, #0]
 8009c6c:	3b04      	subs	r3, #4
 8009c6e:	2a00      	cmp	r2, #0
 8009c70:	d1cb      	bne.n	8009c0a <quorem+0x94>
 8009c72:	3c01      	subs	r4, #1
 8009c74:	e7c6      	b.n	8009c04 <quorem+0x8e>
 8009c76:	6812      	ldr	r2, [r2, #0]
 8009c78:	3b04      	subs	r3, #4
 8009c7a:	2a00      	cmp	r2, #0
 8009c7c:	d1ef      	bne.n	8009c5e <quorem+0xe8>
 8009c7e:	3c01      	subs	r4, #1
 8009c80:	e7ea      	b.n	8009c58 <quorem+0xe2>
 8009c82:	2000      	movs	r0, #0
 8009c84:	e7ee      	b.n	8009c64 <quorem+0xee>
	...

08009c88 <_dtoa_r>:
 8009c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c8c:	69c7      	ldr	r7, [r0, #28]
 8009c8e:	b099      	sub	sp, #100	@ 0x64
 8009c90:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009c94:	ec55 4b10 	vmov	r4, r5, d0
 8009c98:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009c9a:	9109      	str	r1, [sp, #36]	@ 0x24
 8009c9c:	4683      	mov	fp, r0
 8009c9e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009ca0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009ca2:	b97f      	cbnz	r7, 8009cc4 <_dtoa_r+0x3c>
 8009ca4:	2010      	movs	r0, #16
 8009ca6:	f000 fdfd 	bl	800a8a4 <malloc>
 8009caa:	4602      	mov	r2, r0
 8009cac:	f8cb 001c 	str.w	r0, [fp, #28]
 8009cb0:	b920      	cbnz	r0, 8009cbc <_dtoa_r+0x34>
 8009cb2:	4ba7      	ldr	r3, [pc, #668]	@ (8009f50 <_dtoa_r+0x2c8>)
 8009cb4:	21ef      	movs	r1, #239	@ 0xef
 8009cb6:	48a7      	ldr	r0, [pc, #668]	@ (8009f54 <_dtoa_r+0x2cc>)
 8009cb8:	f001 fc68 	bl	800b58c <__assert_func>
 8009cbc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009cc0:	6007      	str	r7, [r0, #0]
 8009cc2:	60c7      	str	r7, [r0, #12]
 8009cc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009cc8:	6819      	ldr	r1, [r3, #0]
 8009cca:	b159      	cbz	r1, 8009ce4 <_dtoa_r+0x5c>
 8009ccc:	685a      	ldr	r2, [r3, #4]
 8009cce:	604a      	str	r2, [r1, #4]
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	4093      	lsls	r3, r2
 8009cd4:	608b      	str	r3, [r1, #8]
 8009cd6:	4658      	mov	r0, fp
 8009cd8:	f000 feda 	bl	800aa90 <_Bfree>
 8009cdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	601a      	str	r2, [r3, #0]
 8009ce4:	1e2b      	subs	r3, r5, #0
 8009ce6:	bfb9      	ittee	lt
 8009ce8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009cec:	9303      	strlt	r3, [sp, #12]
 8009cee:	2300      	movge	r3, #0
 8009cf0:	6033      	strge	r3, [r6, #0]
 8009cf2:	9f03      	ldr	r7, [sp, #12]
 8009cf4:	4b98      	ldr	r3, [pc, #608]	@ (8009f58 <_dtoa_r+0x2d0>)
 8009cf6:	bfbc      	itt	lt
 8009cf8:	2201      	movlt	r2, #1
 8009cfa:	6032      	strlt	r2, [r6, #0]
 8009cfc:	43bb      	bics	r3, r7
 8009cfe:	d112      	bne.n	8009d26 <_dtoa_r+0x9e>
 8009d00:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009d02:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009d06:	6013      	str	r3, [r2, #0]
 8009d08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d0c:	4323      	orrs	r3, r4
 8009d0e:	f000 854d 	beq.w	800a7ac <_dtoa_r+0xb24>
 8009d12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009d14:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009f6c <_dtoa_r+0x2e4>
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f000 854f 	beq.w	800a7bc <_dtoa_r+0xb34>
 8009d1e:	f10a 0303 	add.w	r3, sl, #3
 8009d22:	f000 bd49 	b.w	800a7b8 <_dtoa_r+0xb30>
 8009d26:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	ec51 0b17 	vmov	r0, r1, d7
 8009d30:	2300      	movs	r3, #0
 8009d32:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009d36:	f7f6 fecf 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d3a:	4680      	mov	r8, r0
 8009d3c:	b158      	cbz	r0, 8009d56 <_dtoa_r+0xce>
 8009d3e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009d40:	2301      	movs	r3, #1
 8009d42:	6013      	str	r3, [r2, #0]
 8009d44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009d46:	b113      	cbz	r3, 8009d4e <_dtoa_r+0xc6>
 8009d48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009d4a:	4b84      	ldr	r3, [pc, #528]	@ (8009f5c <_dtoa_r+0x2d4>)
 8009d4c:	6013      	str	r3, [r2, #0]
 8009d4e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009f70 <_dtoa_r+0x2e8>
 8009d52:	f000 bd33 	b.w	800a7bc <_dtoa_r+0xb34>
 8009d56:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009d5a:	aa16      	add	r2, sp, #88	@ 0x58
 8009d5c:	a917      	add	r1, sp, #92	@ 0x5c
 8009d5e:	4658      	mov	r0, fp
 8009d60:	f001 f980 	bl	800b064 <__d2b>
 8009d64:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009d68:	4681      	mov	r9, r0
 8009d6a:	2e00      	cmp	r6, #0
 8009d6c:	d077      	beq.n	8009e5e <_dtoa_r+0x1d6>
 8009d6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d70:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009d80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009d84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009d88:	4619      	mov	r1, r3
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	4b74      	ldr	r3, [pc, #464]	@ (8009f60 <_dtoa_r+0x2d8>)
 8009d8e:	f7f6 fa83 	bl	8000298 <__aeabi_dsub>
 8009d92:	a369      	add	r3, pc, #420	@ (adr r3, 8009f38 <_dtoa_r+0x2b0>)
 8009d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d98:	f7f6 fc36 	bl	8000608 <__aeabi_dmul>
 8009d9c:	a368      	add	r3, pc, #416	@ (adr r3, 8009f40 <_dtoa_r+0x2b8>)
 8009d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da2:	f7f6 fa7b 	bl	800029c <__adddf3>
 8009da6:	4604      	mov	r4, r0
 8009da8:	4630      	mov	r0, r6
 8009daa:	460d      	mov	r5, r1
 8009dac:	f7f6 fbc2 	bl	8000534 <__aeabi_i2d>
 8009db0:	a365      	add	r3, pc, #404	@ (adr r3, 8009f48 <_dtoa_r+0x2c0>)
 8009db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db6:	f7f6 fc27 	bl	8000608 <__aeabi_dmul>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	4629      	mov	r1, r5
 8009dc2:	f7f6 fa6b 	bl	800029c <__adddf3>
 8009dc6:	4604      	mov	r4, r0
 8009dc8:	460d      	mov	r5, r1
 8009dca:	f7f6 fecd 	bl	8000b68 <__aeabi_d2iz>
 8009dce:	2200      	movs	r2, #0
 8009dd0:	4607      	mov	r7, r0
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	4629      	mov	r1, r5
 8009dd8:	f7f6 fe88 	bl	8000aec <__aeabi_dcmplt>
 8009ddc:	b140      	cbz	r0, 8009df0 <_dtoa_r+0x168>
 8009dde:	4638      	mov	r0, r7
 8009de0:	f7f6 fba8 	bl	8000534 <__aeabi_i2d>
 8009de4:	4622      	mov	r2, r4
 8009de6:	462b      	mov	r3, r5
 8009de8:	f7f6 fe76 	bl	8000ad8 <__aeabi_dcmpeq>
 8009dec:	b900      	cbnz	r0, 8009df0 <_dtoa_r+0x168>
 8009dee:	3f01      	subs	r7, #1
 8009df0:	2f16      	cmp	r7, #22
 8009df2:	d851      	bhi.n	8009e98 <_dtoa_r+0x210>
 8009df4:	4b5b      	ldr	r3, [pc, #364]	@ (8009f64 <_dtoa_r+0x2dc>)
 8009df6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e02:	f7f6 fe73 	bl	8000aec <__aeabi_dcmplt>
 8009e06:	2800      	cmp	r0, #0
 8009e08:	d048      	beq.n	8009e9c <_dtoa_r+0x214>
 8009e0a:	3f01      	subs	r7, #1
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009e10:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009e12:	1b9b      	subs	r3, r3, r6
 8009e14:	1e5a      	subs	r2, r3, #1
 8009e16:	bf44      	itt	mi
 8009e18:	f1c3 0801 	rsbmi	r8, r3, #1
 8009e1c:	2300      	movmi	r3, #0
 8009e1e:	9208      	str	r2, [sp, #32]
 8009e20:	bf54      	ite	pl
 8009e22:	f04f 0800 	movpl.w	r8, #0
 8009e26:	9308      	strmi	r3, [sp, #32]
 8009e28:	2f00      	cmp	r7, #0
 8009e2a:	db39      	blt.n	8009ea0 <_dtoa_r+0x218>
 8009e2c:	9b08      	ldr	r3, [sp, #32]
 8009e2e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009e30:	443b      	add	r3, r7
 8009e32:	9308      	str	r3, [sp, #32]
 8009e34:	2300      	movs	r3, #0
 8009e36:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e3a:	2b09      	cmp	r3, #9
 8009e3c:	d864      	bhi.n	8009f08 <_dtoa_r+0x280>
 8009e3e:	2b05      	cmp	r3, #5
 8009e40:	bfc4      	itt	gt
 8009e42:	3b04      	subgt	r3, #4
 8009e44:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009e46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e48:	f1a3 0302 	sub.w	r3, r3, #2
 8009e4c:	bfcc      	ite	gt
 8009e4e:	2400      	movgt	r4, #0
 8009e50:	2401      	movle	r4, #1
 8009e52:	2b03      	cmp	r3, #3
 8009e54:	d863      	bhi.n	8009f1e <_dtoa_r+0x296>
 8009e56:	e8df f003 	tbb	[pc, r3]
 8009e5a:	372a      	.short	0x372a
 8009e5c:	5535      	.short	0x5535
 8009e5e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009e62:	441e      	add	r6, r3
 8009e64:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009e68:	2b20      	cmp	r3, #32
 8009e6a:	bfc1      	itttt	gt
 8009e6c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009e70:	409f      	lslgt	r7, r3
 8009e72:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009e76:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009e7a:	bfd6      	itet	le
 8009e7c:	f1c3 0320 	rsble	r3, r3, #32
 8009e80:	ea47 0003 	orrgt.w	r0, r7, r3
 8009e84:	fa04 f003 	lslle.w	r0, r4, r3
 8009e88:	f7f6 fb44 	bl	8000514 <__aeabi_ui2d>
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009e92:	3e01      	subs	r6, #1
 8009e94:	9214      	str	r2, [sp, #80]	@ 0x50
 8009e96:	e777      	b.n	8009d88 <_dtoa_r+0x100>
 8009e98:	2301      	movs	r3, #1
 8009e9a:	e7b8      	b.n	8009e0e <_dtoa_r+0x186>
 8009e9c:	9012      	str	r0, [sp, #72]	@ 0x48
 8009e9e:	e7b7      	b.n	8009e10 <_dtoa_r+0x188>
 8009ea0:	427b      	negs	r3, r7
 8009ea2:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	eba8 0807 	sub.w	r8, r8, r7
 8009eaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009eac:	e7c4      	b.n	8009e38 <_dtoa_r+0x1b0>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009eb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	dc35      	bgt.n	8009f24 <_dtoa_r+0x29c>
 8009eb8:	2301      	movs	r3, #1
 8009eba:	9300      	str	r3, [sp, #0]
 8009ebc:	9307      	str	r3, [sp, #28]
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009ec2:	e00b      	b.n	8009edc <_dtoa_r+0x254>
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	e7f3      	b.n	8009eb0 <_dtoa_r+0x228>
 8009ec8:	2300      	movs	r3, #0
 8009eca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ecc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ece:	18fb      	adds	r3, r7, r3
 8009ed0:	9300      	str	r3, [sp, #0]
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	9307      	str	r3, [sp, #28]
 8009ed8:	bfb8      	it	lt
 8009eda:	2301      	movlt	r3, #1
 8009edc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009ee0:	2100      	movs	r1, #0
 8009ee2:	2204      	movs	r2, #4
 8009ee4:	f102 0514 	add.w	r5, r2, #20
 8009ee8:	429d      	cmp	r5, r3
 8009eea:	d91f      	bls.n	8009f2c <_dtoa_r+0x2a4>
 8009eec:	6041      	str	r1, [r0, #4]
 8009eee:	4658      	mov	r0, fp
 8009ef0:	f000 fd8e 	bl	800aa10 <_Balloc>
 8009ef4:	4682      	mov	sl, r0
 8009ef6:	2800      	cmp	r0, #0
 8009ef8:	d13c      	bne.n	8009f74 <_dtoa_r+0x2ec>
 8009efa:	4b1b      	ldr	r3, [pc, #108]	@ (8009f68 <_dtoa_r+0x2e0>)
 8009efc:	4602      	mov	r2, r0
 8009efe:	f240 11af 	movw	r1, #431	@ 0x1af
 8009f02:	e6d8      	b.n	8009cb6 <_dtoa_r+0x2e>
 8009f04:	2301      	movs	r3, #1
 8009f06:	e7e0      	b.n	8009eca <_dtoa_r+0x242>
 8009f08:	2401      	movs	r4, #1
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f0e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009f10:	f04f 33ff 	mov.w	r3, #4294967295
 8009f14:	9300      	str	r3, [sp, #0]
 8009f16:	9307      	str	r3, [sp, #28]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	2312      	movs	r3, #18
 8009f1c:	e7d0      	b.n	8009ec0 <_dtoa_r+0x238>
 8009f1e:	2301      	movs	r3, #1
 8009f20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f22:	e7f5      	b.n	8009f10 <_dtoa_r+0x288>
 8009f24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f26:	9300      	str	r3, [sp, #0]
 8009f28:	9307      	str	r3, [sp, #28]
 8009f2a:	e7d7      	b.n	8009edc <_dtoa_r+0x254>
 8009f2c:	3101      	adds	r1, #1
 8009f2e:	0052      	lsls	r2, r2, #1
 8009f30:	e7d8      	b.n	8009ee4 <_dtoa_r+0x25c>
 8009f32:	bf00      	nop
 8009f34:	f3af 8000 	nop.w
 8009f38:	636f4361 	.word	0x636f4361
 8009f3c:	3fd287a7 	.word	0x3fd287a7
 8009f40:	8b60c8b3 	.word	0x8b60c8b3
 8009f44:	3fc68a28 	.word	0x3fc68a28
 8009f48:	509f79fb 	.word	0x509f79fb
 8009f4c:	3fd34413 	.word	0x3fd34413
 8009f50:	0800bcc1 	.word	0x0800bcc1
 8009f54:	0800bcd8 	.word	0x0800bcd8
 8009f58:	7ff00000 	.word	0x7ff00000
 8009f5c:	0800bc91 	.word	0x0800bc91
 8009f60:	3ff80000 	.word	0x3ff80000
 8009f64:	0800bdd0 	.word	0x0800bdd0
 8009f68:	0800bd30 	.word	0x0800bd30
 8009f6c:	0800bcbd 	.word	0x0800bcbd
 8009f70:	0800bc90 	.word	0x0800bc90
 8009f74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009f78:	6018      	str	r0, [r3, #0]
 8009f7a:	9b07      	ldr	r3, [sp, #28]
 8009f7c:	2b0e      	cmp	r3, #14
 8009f7e:	f200 80a4 	bhi.w	800a0ca <_dtoa_r+0x442>
 8009f82:	2c00      	cmp	r4, #0
 8009f84:	f000 80a1 	beq.w	800a0ca <_dtoa_r+0x442>
 8009f88:	2f00      	cmp	r7, #0
 8009f8a:	dd33      	ble.n	8009ff4 <_dtoa_r+0x36c>
 8009f8c:	4bad      	ldr	r3, [pc, #692]	@ (800a244 <_dtoa_r+0x5bc>)
 8009f8e:	f007 020f 	and.w	r2, r7, #15
 8009f92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f96:	ed93 7b00 	vldr	d7, [r3]
 8009f9a:	05f8      	lsls	r0, r7, #23
 8009f9c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009fa0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009fa4:	d516      	bpl.n	8009fd4 <_dtoa_r+0x34c>
 8009fa6:	4ba8      	ldr	r3, [pc, #672]	@ (800a248 <_dtoa_r+0x5c0>)
 8009fa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009fac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009fb0:	f7f6 fc54 	bl	800085c <__aeabi_ddiv>
 8009fb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fb8:	f004 040f 	and.w	r4, r4, #15
 8009fbc:	2603      	movs	r6, #3
 8009fbe:	4da2      	ldr	r5, [pc, #648]	@ (800a248 <_dtoa_r+0x5c0>)
 8009fc0:	b954      	cbnz	r4, 8009fd8 <_dtoa_r+0x350>
 8009fc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fca:	f7f6 fc47 	bl	800085c <__aeabi_ddiv>
 8009fce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fd2:	e028      	b.n	800a026 <_dtoa_r+0x39e>
 8009fd4:	2602      	movs	r6, #2
 8009fd6:	e7f2      	b.n	8009fbe <_dtoa_r+0x336>
 8009fd8:	07e1      	lsls	r1, r4, #31
 8009fda:	d508      	bpl.n	8009fee <_dtoa_r+0x366>
 8009fdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fe0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009fe4:	f7f6 fb10 	bl	8000608 <__aeabi_dmul>
 8009fe8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fec:	3601      	adds	r6, #1
 8009fee:	1064      	asrs	r4, r4, #1
 8009ff0:	3508      	adds	r5, #8
 8009ff2:	e7e5      	b.n	8009fc0 <_dtoa_r+0x338>
 8009ff4:	f000 80d2 	beq.w	800a19c <_dtoa_r+0x514>
 8009ff8:	427c      	negs	r4, r7
 8009ffa:	4b92      	ldr	r3, [pc, #584]	@ (800a244 <_dtoa_r+0x5bc>)
 8009ffc:	4d92      	ldr	r5, [pc, #584]	@ (800a248 <_dtoa_r+0x5c0>)
 8009ffe:	f004 020f 	and.w	r2, r4, #15
 800a002:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a00e:	f7f6 fafb 	bl	8000608 <__aeabi_dmul>
 800a012:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a016:	1124      	asrs	r4, r4, #4
 800a018:	2300      	movs	r3, #0
 800a01a:	2602      	movs	r6, #2
 800a01c:	2c00      	cmp	r4, #0
 800a01e:	f040 80b2 	bne.w	800a186 <_dtoa_r+0x4fe>
 800a022:	2b00      	cmp	r3, #0
 800a024:	d1d3      	bne.n	8009fce <_dtoa_r+0x346>
 800a026:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a028:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f000 80b7 	beq.w	800a1a0 <_dtoa_r+0x518>
 800a032:	4b86      	ldr	r3, [pc, #536]	@ (800a24c <_dtoa_r+0x5c4>)
 800a034:	2200      	movs	r2, #0
 800a036:	4620      	mov	r0, r4
 800a038:	4629      	mov	r1, r5
 800a03a:	f7f6 fd57 	bl	8000aec <__aeabi_dcmplt>
 800a03e:	2800      	cmp	r0, #0
 800a040:	f000 80ae 	beq.w	800a1a0 <_dtoa_r+0x518>
 800a044:	9b07      	ldr	r3, [sp, #28]
 800a046:	2b00      	cmp	r3, #0
 800a048:	f000 80aa 	beq.w	800a1a0 <_dtoa_r+0x518>
 800a04c:	9b00      	ldr	r3, [sp, #0]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	dd37      	ble.n	800a0c2 <_dtoa_r+0x43a>
 800a052:	1e7b      	subs	r3, r7, #1
 800a054:	9304      	str	r3, [sp, #16]
 800a056:	4620      	mov	r0, r4
 800a058:	4b7d      	ldr	r3, [pc, #500]	@ (800a250 <_dtoa_r+0x5c8>)
 800a05a:	2200      	movs	r2, #0
 800a05c:	4629      	mov	r1, r5
 800a05e:	f7f6 fad3 	bl	8000608 <__aeabi_dmul>
 800a062:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a066:	9c00      	ldr	r4, [sp, #0]
 800a068:	3601      	adds	r6, #1
 800a06a:	4630      	mov	r0, r6
 800a06c:	f7f6 fa62 	bl	8000534 <__aeabi_i2d>
 800a070:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a074:	f7f6 fac8 	bl	8000608 <__aeabi_dmul>
 800a078:	4b76      	ldr	r3, [pc, #472]	@ (800a254 <_dtoa_r+0x5cc>)
 800a07a:	2200      	movs	r2, #0
 800a07c:	f7f6 f90e 	bl	800029c <__adddf3>
 800a080:	4605      	mov	r5, r0
 800a082:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a086:	2c00      	cmp	r4, #0
 800a088:	f040 808d 	bne.w	800a1a6 <_dtoa_r+0x51e>
 800a08c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a090:	4b71      	ldr	r3, [pc, #452]	@ (800a258 <_dtoa_r+0x5d0>)
 800a092:	2200      	movs	r2, #0
 800a094:	f7f6 f900 	bl	8000298 <__aeabi_dsub>
 800a098:	4602      	mov	r2, r0
 800a09a:	460b      	mov	r3, r1
 800a09c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a0a0:	462a      	mov	r2, r5
 800a0a2:	4633      	mov	r3, r6
 800a0a4:	f7f6 fd40 	bl	8000b28 <__aeabi_dcmpgt>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	f040 828b 	bne.w	800a5c4 <_dtoa_r+0x93c>
 800a0ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0b2:	462a      	mov	r2, r5
 800a0b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a0b8:	f7f6 fd18 	bl	8000aec <__aeabi_dcmplt>
 800a0bc:	2800      	cmp	r0, #0
 800a0be:	f040 8128 	bne.w	800a312 <_dtoa_r+0x68a>
 800a0c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a0c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a0ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f2c0 815a 	blt.w	800a386 <_dtoa_r+0x6fe>
 800a0d2:	2f0e      	cmp	r7, #14
 800a0d4:	f300 8157 	bgt.w	800a386 <_dtoa_r+0x6fe>
 800a0d8:	4b5a      	ldr	r3, [pc, #360]	@ (800a244 <_dtoa_r+0x5bc>)
 800a0da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a0de:	ed93 7b00 	vldr	d7, [r3]
 800a0e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	ed8d 7b00 	vstr	d7, [sp]
 800a0ea:	da03      	bge.n	800a0f4 <_dtoa_r+0x46c>
 800a0ec:	9b07      	ldr	r3, [sp, #28]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	f340 8101 	ble.w	800a2f6 <_dtoa_r+0x66e>
 800a0f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a0f8:	4656      	mov	r6, sl
 800a0fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0fe:	4620      	mov	r0, r4
 800a100:	4629      	mov	r1, r5
 800a102:	f7f6 fbab 	bl	800085c <__aeabi_ddiv>
 800a106:	f7f6 fd2f 	bl	8000b68 <__aeabi_d2iz>
 800a10a:	4680      	mov	r8, r0
 800a10c:	f7f6 fa12 	bl	8000534 <__aeabi_i2d>
 800a110:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a114:	f7f6 fa78 	bl	8000608 <__aeabi_dmul>
 800a118:	4602      	mov	r2, r0
 800a11a:	460b      	mov	r3, r1
 800a11c:	4620      	mov	r0, r4
 800a11e:	4629      	mov	r1, r5
 800a120:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a124:	f7f6 f8b8 	bl	8000298 <__aeabi_dsub>
 800a128:	f806 4b01 	strb.w	r4, [r6], #1
 800a12c:	9d07      	ldr	r5, [sp, #28]
 800a12e:	eba6 040a 	sub.w	r4, r6, sl
 800a132:	42a5      	cmp	r5, r4
 800a134:	4602      	mov	r2, r0
 800a136:	460b      	mov	r3, r1
 800a138:	f040 8117 	bne.w	800a36a <_dtoa_r+0x6e2>
 800a13c:	f7f6 f8ae 	bl	800029c <__adddf3>
 800a140:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a144:	4604      	mov	r4, r0
 800a146:	460d      	mov	r5, r1
 800a148:	f7f6 fcee 	bl	8000b28 <__aeabi_dcmpgt>
 800a14c:	2800      	cmp	r0, #0
 800a14e:	f040 80f9 	bne.w	800a344 <_dtoa_r+0x6bc>
 800a152:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a156:	4620      	mov	r0, r4
 800a158:	4629      	mov	r1, r5
 800a15a:	f7f6 fcbd 	bl	8000ad8 <__aeabi_dcmpeq>
 800a15e:	b118      	cbz	r0, 800a168 <_dtoa_r+0x4e0>
 800a160:	f018 0f01 	tst.w	r8, #1
 800a164:	f040 80ee 	bne.w	800a344 <_dtoa_r+0x6bc>
 800a168:	4649      	mov	r1, r9
 800a16a:	4658      	mov	r0, fp
 800a16c:	f000 fc90 	bl	800aa90 <_Bfree>
 800a170:	2300      	movs	r3, #0
 800a172:	7033      	strb	r3, [r6, #0]
 800a174:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a176:	3701      	adds	r7, #1
 800a178:	601f      	str	r7, [r3, #0]
 800a17a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f000 831d 	beq.w	800a7bc <_dtoa_r+0xb34>
 800a182:	601e      	str	r6, [r3, #0]
 800a184:	e31a      	b.n	800a7bc <_dtoa_r+0xb34>
 800a186:	07e2      	lsls	r2, r4, #31
 800a188:	d505      	bpl.n	800a196 <_dtoa_r+0x50e>
 800a18a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a18e:	f7f6 fa3b 	bl	8000608 <__aeabi_dmul>
 800a192:	3601      	adds	r6, #1
 800a194:	2301      	movs	r3, #1
 800a196:	1064      	asrs	r4, r4, #1
 800a198:	3508      	adds	r5, #8
 800a19a:	e73f      	b.n	800a01c <_dtoa_r+0x394>
 800a19c:	2602      	movs	r6, #2
 800a19e:	e742      	b.n	800a026 <_dtoa_r+0x39e>
 800a1a0:	9c07      	ldr	r4, [sp, #28]
 800a1a2:	9704      	str	r7, [sp, #16]
 800a1a4:	e761      	b.n	800a06a <_dtoa_r+0x3e2>
 800a1a6:	4b27      	ldr	r3, [pc, #156]	@ (800a244 <_dtoa_r+0x5bc>)
 800a1a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a1aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a1ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a1b2:	4454      	add	r4, sl
 800a1b4:	2900      	cmp	r1, #0
 800a1b6:	d053      	beq.n	800a260 <_dtoa_r+0x5d8>
 800a1b8:	4928      	ldr	r1, [pc, #160]	@ (800a25c <_dtoa_r+0x5d4>)
 800a1ba:	2000      	movs	r0, #0
 800a1bc:	f7f6 fb4e 	bl	800085c <__aeabi_ddiv>
 800a1c0:	4633      	mov	r3, r6
 800a1c2:	462a      	mov	r2, r5
 800a1c4:	f7f6 f868 	bl	8000298 <__aeabi_dsub>
 800a1c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a1cc:	4656      	mov	r6, sl
 800a1ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1d2:	f7f6 fcc9 	bl	8000b68 <__aeabi_d2iz>
 800a1d6:	4605      	mov	r5, r0
 800a1d8:	f7f6 f9ac 	bl	8000534 <__aeabi_i2d>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	460b      	mov	r3, r1
 800a1e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1e4:	f7f6 f858 	bl	8000298 <__aeabi_dsub>
 800a1e8:	3530      	adds	r5, #48	@ 0x30
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a1f2:	f806 5b01 	strb.w	r5, [r6], #1
 800a1f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a1fa:	f7f6 fc77 	bl	8000aec <__aeabi_dcmplt>
 800a1fe:	2800      	cmp	r0, #0
 800a200:	d171      	bne.n	800a2e6 <_dtoa_r+0x65e>
 800a202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a206:	4911      	ldr	r1, [pc, #68]	@ (800a24c <_dtoa_r+0x5c4>)
 800a208:	2000      	movs	r0, #0
 800a20a:	f7f6 f845 	bl	8000298 <__aeabi_dsub>
 800a20e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a212:	f7f6 fc6b 	bl	8000aec <__aeabi_dcmplt>
 800a216:	2800      	cmp	r0, #0
 800a218:	f040 8095 	bne.w	800a346 <_dtoa_r+0x6be>
 800a21c:	42a6      	cmp	r6, r4
 800a21e:	f43f af50 	beq.w	800a0c2 <_dtoa_r+0x43a>
 800a222:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a226:	4b0a      	ldr	r3, [pc, #40]	@ (800a250 <_dtoa_r+0x5c8>)
 800a228:	2200      	movs	r2, #0
 800a22a:	f7f6 f9ed 	bl	8000608 <__aeabi_dmul>
 800a22e:	4b08      	ldr	r3, [pc, #32]	@ (800a250 <_dtoa_r+0x5c8>)
 800a230:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a234:	2200      	movs	r2, #0
 800a236:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a23a:	f7f6 f9e5 	bl	8000608 <__aeabi_dmul>
 800a23e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a242:	e7c4      	b.n	800a1ce <_dtoa_r+0x546>
 800a244:	0800bdd0 	.word	0x0800bdd0
 800a248:	0800bda8 	.word	0x0800bda8
 800a24c:	3ff00000 	.word	0x3ff00000
 800a250:	40240000 	.word	0x40240000
 800a254:	401c0000 	.word	0x401c0000
 800a258:	40140000 	.word	0x40140000
 800a25c:	3fe00000 	.word	0x3fe00000
 800a260:	4631      	mov	r1, r6
 800a262:	4628      	mov	r0, r5
 800a264:	f7f6 f9d0 	bl	8000608 <__aeabi_dmul>
 800a268:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a26c:	9415      	str	r4, [sp, #84]	@ 0x54
 800a26e:	4656      	mov	r6, sl
 800a270:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a274:	f7f6 fc78 	bl	8000b68 <__aeabi_d2iz>
 800a278:	4605      	mov	r5, r0
 800a27a:	f7f6 f95b 	bl	8000534 <__aeabi_i2d>
 800a27e:	4602      	mov	r2, r0
 800a280:	460b      	mov	r3, r1
 800a282:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a286:	f7f6 f807 	bl	8000298 <__aeabi_dsub>
 800a28a:	3530      	adds	r5, #48	@ 0x30
 800a28c:	f806 5b01 	strb.w	r5, [r6], #1
 800a290:	4602      	mov	r2, r0
 800a292:	460b      	mov	r3, r1
 800a294:	42a6      	cmp	r6, r4
 800a296:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a29a:	f04f 0200 	mov.w	r2, #0
 800a29e:	d124      	bne.n	800a2ea <_dtoa_r+0x662>
 800a2a0:	4bac      	ldr	r3, [pc, #688]	@ (800a554 <_dtoa_r+0x8cc>)
 800a2a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a2a6:	f7f5 fff9 	bl	800029c <__adddf3>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2b2:	f7f6 fc39 	bl	8000b28 <__aeabi_dcmpgt>
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	d145      	bne.n	800a346 <_dtoa_r+0x6be>
 800a2ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a2be:	49a5      	ldr	r1, [pc, #660]	@ (800a554 <_dtoa_r+0x8cc>)
 800a2c0:	2000      	movs	r0, #0
 800a2c2:	f7f5 ffe9 	bl	8000298 <__aeabi_dsub>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2ce:	f7f6 fc0d 	bl	8000aec <__aeabi_dcmplt>
 800a2d2:	2800      	cmp	r0, #0
 800a2d4:	f43f aef5 	beq.w	800a0c2 <_dtoa_r+0x43a>
 800a2d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a2da:	1e73      	subs	r3, r6, #1
 800a2dc:	9315      	str	r3, [sp, #84]	@ 0x54
 800a2de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a2e2:	2b30      	cmp	r3, #48	@ 0x30
 800a2e4:	d0f8      	beq.n	800a2d8 <_dtoa_r+0x650>
 800a2e6:	9f04      	ldr	r7, [sp, #16]
 800a2e8:	e73e      	b.n	800a168 <_dtoa_r+0x4e0>
 800a2ea:	4b9b      	ldr	r3, [pc, #620]	@ (800a558 <_dtoa_r+0x8d0>)
 800a2ec:	f7f6 f98c 	bl	8000608 <__aeabi_dmul>
 800a2f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2f4:	e7bc      	b.n	800a270 <_dtoa_r+0x5e8>
 800a2f6:	d10c      	bne.n	800a312 <_dtoa_r+0x68a>
 800a2f8:	4b98      	ldr	r3, [pc, #608]	@ (800a55c <_dtoa_r+0x8d4>)
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a300:	f7f6 f982 	bl	8000608 <__aeabi_dmul>
 800a304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a308:	f7f6 fc04 	bl	8000b14 <__aeabi_dcmpge>
 800a30c:	2800      	cmp	r0, #0
 800a30e:	f000 8157 	beq.w	800a5c0 <_dtoa_r+0x938>
 800a312:	2400      	movs	r4, #0
 800a314:	4625      	mov	r5, r4
 800a316:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a318:	43db      	mvns	r3, r3
 800a31a:	9304      	str	r3, [sp, #16]
 800a31c:	4656      	mov	r6, sl
 800a31e:	2700      	movs	r7, #0
 800a320:	4621      	mov	r1, r4
 800a322:	4658      	mov	r0, fp
 800a324:	f000 fbb4 	bl	800aa90 <_Bfree>
 800a328:	2d00      	cmp	r5, #0
 800a32a:	d0dc      	beq.n	800a2e6 <_dtoa_r+0x65e>
 800a32c:	b12f      	cbz	r7, 800a33a <_dtoa_r+0x6b2>
 800a32e:	42af      	cmp	r7, r5
 800a330:	d003      	beq.n	800a33a <_dtoa_r+0x6b2>
 800a332:	4639      	mov	r1, r7
 800a334:	4658      	mov	r0, fp
 800a336:	f000 fbab 	bl	800aa90 <_Bfree>
 800a33a:	4629      	mov	r1, r5
 800a33c:	4658      	mov	r0, fp
 800a33e:	f000 fba7 	bl	800aa90 <_Bfree>
 800a342:	e7d0      	b.n	800a2e6 <_dtoa_r+0x65e>
 800a344:	9704      	str	r7, [sp, #16]
 800a346:	4633      	mov	r3, r6
 800a348:	461e      	mov	r6, r3
 800a34a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a34e:	2a39      	cmp	r2, #57	@ 0x39
 800a350:	d107      	bne.n	800a362 <_dtoa_r+0x6da>
 800a352:	459a      	cmp	sl, r3
 800a354:	d1f8      	bne.n	800a348 <_dtoa_r+0x6c0>
 800a356:	9a04      	ldr	r2, [sp, #16]
 800a358:	3201      	adds	r2, #1
 800a35a:	9204      	str	r2, [sp, #16]
 800a35c:	2230      	movs	r2, #48	@ 0x30
 800a35e:	f88a 2000 	strb.w	r2, [sl]
 800a362:	781a      	ldrb	r2, [r3, #0]
 800a364:	3201      	adds	r2, #1
 800a366:	701a      	strb	r2, [r3, #0]
 800a368:	e7bd      	b.n	800a2e6 <_dtoa_r+0x65e>
 800a36a:	4b7b      	ldr	r3, [pc, #492]	@ (800a558 <_dtoa_r+0x8d0>)
 800a36c:	2200      	movs	r2, #0
 800a36e:	f7f6 f94b 	bl	8000608 <__aeabi_dmul>
 800a372:	2200      	movs	r2, #0
 800a374:	2300      	movs	r3, #0
 800a376:	4604      	mov	r4, r0
 800a378:	460d      	mov	r5, r1
 800a37a:	f7f6 fbad 	bl	8000ad8 <__aeabi_dcmpeq>
 800a37e:	2800      	cmp	r0, #0
 800a380:	f43f aebb 	beq.w	800a0fa <_dtoa_r+0x472>
 800a384:	e6f0      	b.n	800a168 <_dtoa_r+0x4e0>
 800a386:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a388:	2a00      	cmp	r2, #0
 800a38a:	f000 80db 	beq.w	800a544 <_dtoa_r+0x8bc>
 800a38e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a390:	2a01      	cmp	r2, #1
 800a392:	f300 80bf 	bgt.w	800a514 <_dtoa_r+0x88c>
 800a396:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a398:	2a00      	cmp	r2, #0
 800a39a:	f000 80b7 	beq.w	800a50c <_dtoa_r+0x884>
 800a39e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a3a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a3a4:	4646      	mov	r6, r8
 800a3a6:	9a08      	ldr	r2, [sp, #32]
 800a3a8:	2101      	movs	r1, #1
 800a3aa:	441a      	add	r2, r3
 800a3ac:	4658      	mov	r0, fp
 800a3ae:	4498      	add	r8, r3
 800a3b0:	9208      	str	r2, [sp, #32]
 800a3b2:	f000 fc21 	bl	800abf8 <__i2b>
 800a3b6:	4605      	mov	r5, r0
 800a3b8:	b15e      	cbz	r6, 800a3d2 <_dtoa_r+0x74a>
 800a3ba:	9b08      	ldr	r3, [sp, #32]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	dd08      	ble.n	800a3d2 <_dtoa_r+0x74a>
 800a3c0:	42b3      	cmp	r3, r6
 800a3c2:	9a08      	ldr	r2, [sp, #32]
 800a3c4:	bfa8      	it	ge
 800a3c6:	4633      	movge	r3, r6
 800a3c8:	eba8 0803 	sub.w	r8, r8, r3
 800a3cc:	1af6      	subs	r6, r6, r3
 800a3ce:	1ad3      	subs	r3, r2, r3
 800a3d0:	9308      	str	r3, [sp, #32]
 800a3d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3d4:	b1f3      	cbz	r3, 800a414 <_dtoa_r+0x78c>
 800a3d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	f000 80b7 	beq.w	800a54c <_dtoa_r+0x8c4>
 800a3de:	b18c      	cbz	r4, 800a404 <_dtoa_r+0x77c>
 800a3e0:	4629      	mov	r1, r5
 800a3e2:	4622      	mov	r2, r4
 800a3e4:	4658      	mov	r0, fp
 800a3e6:	f000 fcc7 	bl	800ad78 <__pow5mult>
 800a3ea:	464a      	mov	r2, r9
 800a3ec:	4601      	mov	r1, r0
 800a3ee:	4605      	mov	r5, r0
 800a3f0:	4658      	mov	r0, fp
 800a3f2:	f000 fc17 	bl	800ac24 <__multiply>
 800a3f6:	4649      	mov	r1, r9
 800a3f8:	9004      	str	r0, [sp, #16]
 800a3fa:	4658      	mov	r0, fp
 800a3fc:	f000 fb48 	bl	800aa90 <_Bfree>
 800a400:	9b04      	ldr	r3, [sp, #16]
 800a402:	4699      	mov	r9, r3
 800a404:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a406:	1b1a      	subs	r2, r3, r4
 800a408:	d004      	beq.n	800a414 <_dtoa_r+0x78c>
 800a40a:	4649      	mov	r1, r9
 800a40c:	4658      	mov	r0, fp
 800a40e:	f000 fcb3 	bl	800ad78 <__pow5mult>
 800a412:	4681      	mov	r9, r0
 800a414:	2101      	movs	r1, #1
 800a416:	4658      	mov	r0, fp
 800a418:	f000 fbee 	bl	800abf8 <__i2b>
 800a41c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a41e:	4604      	mov	r4, r0
 800a420:	2b00      	cmp	r3, #0
 800a422:	f000 81cf 	beq.w	800a7c4 <_dtoa_r+0xb3c>
 800a426:	461a      	mov	r2, r3
 800a428:	4601      	mov	r1, r0
 800a42a:	4658      	mov	r0, fp
 800a42c:	f000 fca4 	bl	800ad78 <__pow5mult>
 800a430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a432:	2b01      	cmp	r3, #1
 800a434:	4604      	mov	r4, r0
 800a436:	f300 8095 	bgt.w	800a564 <_dtoa_r+0x8dc>
 800a43a:	9b02      	ldr	r3, [sp, #8]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	f040 8087 	bne.w	800a550 <_dtoa_r+0x8c8>
 800a442:	9b03      	ldr	r3, [sp, #12]
 800a444:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a448:	2b00      	cmp	r3, #0
 800a44a:	f040 8089 	bne.w	800a560 <_dtoa_r+0x8d8>
 800a44e:	9b03      	ldr	r3, [sp, #12]
 800a450:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a454:	0d1b      	lsrs	r3, r3, #20
 800a456:	051b      	lsls	r3, r3, #20
 800a458:	b12b      	cbz	r3, 800a466 <_dtoa_r+0x7de>
 800a45a:	9b08      	ldr	r3, [sp, #32]
 800a45c:	3301      	adds	r3, #1
 800a45e:	9308      	str	r3, [sp, #32]
 800a460:	f108 0801 	add.w	r8, r8, #1
 800a464:	2301      	movs	r3, #1
 800a466:	930a      	str	r3, [sp, #40]	@ 0x28
 800a468:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	f000 81b0 	beq.w	800a7d0 <_dtoa_r+0xb48>
 800a470:	6923      	ldr	r3, [r4, #16]
 800a472:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a476:	6918      	ldr	r0, [r3, #16]
 800a478:	f000 fb72 	bl	800ab60 <__hi0bits>
 800a47c:	f1c0 0020 	rsb	r0, r0, #32
 800a480:	9b08      	ldr	r3, [sp, #32]
 800a482:	4418      	add	r0, r3
 800a484:	f010 001f 	ands.w	r0, r0, #31
 800a488:	d077      	beq.n	800a57a <_dtoa_r+0x8f2>
 800a48a:	f1c0 0320 	rsb	r3, r0, #32
 800a48e:	2b04      	cmp	r3, #4
 800a490:	dd6b      	ble.n	800a56a <_dtoa_r+0x8e2>
 800a492:	9b08      	ldr	r3, [sp, #32]
 800a494:	f1c0 001c 	rsb	r0, r0, #28
 800a498:	4403      	add	r3, r0
 800a49a:	4480      	add	r8, r0
 800a49c:	4406      	add	r6, r0
 800a49e:	9308      	str	r3, [sp, #32]
 800a4a0:	f1b8 0f00 	cmp.w	r8, #0
 800a4a4:	dd05      	ble.n	800a4b2 <_dtoa_r+0x82a>
 800a4a6:	4649      	mov	r1, r9
 800a4a8:	4642      	mov	r2, r8
 800a4aa:	4658      	mov	r0, fp
 800a4ac:	f000 fcbe 	bl	800ae2c <__lshift>
 800a4b0:	4681      	mov	r9, r0
 800a4b2:	9b08      	ldr	r3, [sp, #32]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	dd05      	ble.n	800a4c4 <_dtoa_r+0x83c>
 800a4b8:	4621      	mov	r1, r4
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	4658      	mov	r0, fp
 800a4be:	f000 fcb5 	bl	800ae2c <__lshift>
 800a4c2:	4604      	mov	r4, r0
 800a4c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d059      	beq.n	800a57e <_dtoa_r+0x8f6>
 800a4ca:	4621      	mov	r1, r4
 800a4cc:	4648      	mov	r0, r9
 800a4ce:	f000 fd19 	bl	800af04 <__mcmp>
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	da53      	bge.n	800a57e <_dtoa_r+0x8f6>
 800a4d6:	1e7b      	subs	r3, r7, #1
 800a4d8:	9304      	str	r3, [sp, #16]
 800a4da:	4649      	mov	r1, r9
 800a4dc:	2300      	movs	r3, #0
 800a4de:	220a      	movs	r2, #10
 800a4e0:	4658      	mov	r0, fp
 800a4e2:	f000 faf7 	bl	800aad4 <__multadd>
 800a4e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4e8:	4681      	mov	r9, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f000 8172 	beq.w	800a7d4 <_dtoa_r+0xb4c>
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	4629      	mov	r1, r5
 800a4f4:	220a      	movs	r2, #10
 800a4f6:	4658      	mov	r0, fp
 800a4f8:	f000 faec 	bl	800aad4 <__multadd>
 800a4fc:	9b00      	ldr	r3, [sp, #0]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	4605      	mov	r5, r0
 800a502:	dc67      	bgt.n	800a5d4 <_dtoa_r+0x94c>
 800a504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a506:	2b02      	cmp	r3, #2
 800a508:	dc41      	bgt.n	800a58e <_dtoa_r+0x906>
 800a50a:	e063      	b.n	800a5d4 <_dtoa_r+0x94c>
 800a50c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a50e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a512:	e746      	b.n	800a3a2 <_dtoa_r+0x71a>
 800a514:	9b07      	ldr	r3, [sp, #28]
 800a516:	1e5c      	subs	r4, r3, #1
 800a518:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a51a:	42a3      	cmp	r3, r4
 800a51c:	bfbf      	itttt	lt
 800a51e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a520:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a522:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a524:	1ae3      	sublt	r3, r4, r3
 800a526:	bfb4      	ite	lt
 800a528:	18d2      	addlt	r2, r2, r3
 800a52a:	1b1c      	subge	r4, r3, r4
 800a52c:	9b07      	ldr	r3, [sp, #28]
 800a52e:	bfbc      	itt	lt
 800a530:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a532:	2400      	movlt	r4, #0
 800a534:	2b00      	cmp	r3, #0
 800a536:	bfb5      	itete	lt
 800a538:	eba8 0603 	sublt.w	r6, r8, r3
 800a53c:	9b07      	ldrge	r3, [sp, #28]
 800a53e:	2300      	movlt	r3, #0
 800a540:	4646      	movge	r6, r8
 800a542:	e730      	b.n	800a3a6 <_dtoa_r+0x71e>
 800a544:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a546:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a548:	4646      	mov	r6, r8
 800a54a:	e735      	b.n	800a3b8 <_dtoa_r+0x730>
 800a54c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a54e:	e75c      	b.n	800a40a <_dtoa_r+0x782>
 800a550:	2300      	movs	r3, #0
 800a552:	e788      	b.n	800a466 <_dtoa_r+0x7de>
 800a554:	3fe00000 	.word	0x3fe00000
 800a558:	40240000 	.word	0x40240000
 800a55c:	40140000 	.word	0x40140000
 800a560:	9b02      	ldr	r3, [sp, #8]
 800a562:	e780      	b.n	800a466 <_dtoa_r+0x7de>
 800a564:	2300      	movs	r3, #0
 800a566:	930a      	str	r3, [sp, #40]	@ 0x28
 800a568:	e782      	b.n	800a470 <_dtoa_r+0x7e8>
 800a56a:	d099      	beq.n	800a4a0 <_dtoa_r+0x818>
 800a56c:	9a08      	ldr	r2, [sp, #32]
 800a56e:	331c      	adds	r3, #28
 800a570:	441a      	add	r2, r3
 800a572:	4498      	add	r8, r3
 800a574:	441e      	add	r6, r3
 800a576:	9208      	str	r2, [sp, #32]
 800a578:	e792      	b.n	800a4a0 <_dtoa_r+0x818>
 800a57a:	4603      	mov	r3, r0
 800a57c:	e7f6      	b.n	800a56c <_dtoa_r+0x8e4>
 800a57e:	9b07      	ldr	r3, [sp, #28]
 800a580:	9704      	str	r7, [sp, #16]
 800a582:	2b00      	cmp	r3, #0
 800a584:	dc20      	bgt.n	800a5c8 <_dtoa_r+0x940>
 800a586:	9300      	str	r3, [sp, #0]
 800a588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a58a:	2b02      	cmp	r3, #2
 800a58c:	dd1e      	ble.n	800a5cc <_dtoa_r+0x944>
 800a58e:	9b00      	ldr	r3, [sp, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	f47f aec0 	bne.w	800a316 <_dtoa_r+0x68e>
 800a596:	4621      	mov	r1, r4
 800a598:	2205      	movs	r2, #5
 800a59a:	4658      	mov	r0, fp
 800a59c:	f000 fa9a 	bl	800aad4 <__multadd>
 800a5a0:	4601      	mov	r1, r0
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	4648      	mov	r0, r9
 800a5a6:	f000 fcad 	bl	800af04 <__mcmp>
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	f77f aeb3 	ble.w	800a316 <_dtoa_r+0x68e>
 800a5b0:	4656      	mov	r6, sl
 800a5b2:	2331      	movs	r3, #49	@ 0x31
 800a5b4:	f806 3b01 	strb.w	r3, [r6], #1
 800a5b8:	9b04      	ldr	r3, [sp, #16]
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	9304      	str	r3, [sp, #16]
 800a5be:	e6ae      	b.n	800a31e <_dtoa_r+0x696>
 800a5c0:	9c07      	ldr	r4, [sp, #28]
 800a5c2:	9704      	str	r7, [sp, #16]
 800a5c4:	4625      	mov	r5, r4
 800a5c6:	e7f3      	b.n	800a5b0 <_dtoa_r+0x928>
 800a5c8:	9b07      	ldr	r3, [sp, #28]
 800a5ca:	9300      	str	r3, [sp, #0]
 800a5cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	f000 8104 	beq.w	800a7dc <_dtoa_r+0xb54>
 800a5d4:	2e00      	cmp	r6, #0
 800a5d6:	dd05      	ble.n	800a5e4 <_dtoa_r+0x95c>
 800a5d8:	4629      	mov	r1, r5
 800a5da:	4632      	mov	r2, r6
 800a5dc:	4658      	mov	r0, fp
 800a5de:	f000 fc25 	bl	800ae2c <__lshift>
 800a5e2:	4605      	mov	r5, r0
 800a5e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d05a      	beq.n	800a6a0 <_dtoa_r+0xa18>
 800a5ea:	6869      	ldr	r1, [r5, #4]
 800a5ec:	4658      	mov	r0, fp
 800a5ee:	f000 fa0f 	bl	800aa10 <_Balloc>
 800a5f2:	4606      	mov	r6, r0
 800a5f4:	b928      	cbnz	r0, 800a602 <_dtoa_r+0x97a>
 800a5f6:	4b84      	ldr	r3, [pc, #528]	@ (800a808 <_dtoa_r+0xb80>)
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a5fe:	f7ff bb5a 	b.w	8009cb6 <_dtoa_r+0x2e>
 800a602:	692a      	ldr	r2, [r5, #16]
 800a604:	3202      	adds	r2, #2
 800a606:	0092      	lsls	r2, r2, #2
 800a608:	f105 010c 	add.w	r1, r5, #12
 800a60c:	300c      	adds	r0, #12
 800a60e:	f000 ffaf 	bl	800b570 <memcpy>
 800a612:	2201      	movs	r2, #1
 800a614:	4631      	mov	r1, r6
 800a616:	4658      	mov	r0, fp
 800a618:	f000 fc08 	bl	800ae2c <__lshift>
 800a61c:	f10a 0301 	add.w	r3, sl, #1
 800a620:	9307      	str	r3, [sp, #28]
 800a622:	9b00      	ldr	r3, [sp, #0]
 800a624:	4453      	add	r3, sl
 800a626:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a628:	9b02      	ldr	r3, [sp, #8]
 800a62a:	f003 0301 	and.w	r3, r3, #1
 800a62e:	462f      	mov	r7, r5
 800a630:	930a      	str	r3, [sp, #40]	@ 0x28
 800a632:	4605      	mov	r5, r0
 800a634:	9b07      	ldr	r3, [sp, #28]
 800a636:	4621      	mov	r1, r4
 800a638:	3b01      	subs	r3, #1
 800a63a:	4648      	mov	r0, r9
 800a63c:	9300      	str	r3, [sp, #0]
 800a63e:	f7ff fa9a 	bl	8009b76 <quorem>
 800a642:	4639      	mov	r1, r7
 800a644:	9002      	str	r0, [sp, #8]
 800a646:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a64a:	4648      	mov	r0, r9
 800a64c:	f000 fc5a 	bl	800af04 <__mcmp>
 800a650:	462a      	mov	r2, r5
 800a652:	9008      	str	r0, [sp, #32]
 800a654:	4621      	mov	r1, r4
 800a656:	4658      	mov	r0, fp
 800a658:	f000 fc70 	bl	800af3c <__mdiff>
 800a65c:	68c2      	ldr	r2, [r0, #12]
 800a65e:	4606      	mov	r6, r0
 800a660:	bb02      	cbnz	r2, 800a6a4 <_dtoa_r+0xa1c>
 800a662:	4601      	mov	r1, r0
 800a664:	4648      	mov	r0, r9
 800a666:	f000 fc4d 	bl	800af04 <__mcmp>
 800a66a:	4602      	mov	r2, r0
 800a66c:	4631      	mov	r1, r6
 800a66e:	4658      	mov	r0, fp
 800a670:	920e      	str	r2, [sp, #56]	@ 0x38
 800a672:	f000 fa0d 	bl	800aa90 <_Bfree>
 800a676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a678:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a67a:	9e07      	ldr	r6, [sp, #28]
 800a67c:	ea43 0102 	orr.w	r1, r3, r2
 800a680:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a682:	4319      	orrs	r1, r3
 800a684:	d110      	bne.n	800a6a8 <_dtoa_r+0xa20>
 800a686:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a68a:	d029      	beq.n	800a6e0 <_dtoa_r+0xa58>
 800a68c:	9b08      	ldr	r3, [sp, #32]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	dd02      	ble.n	800a698 <_dtoa_r+0xa10>
 800a692:	9b02      	ldr	r3, [sp, #8]
 800a694:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a698:	9b00      	ldr	r3, [sp, #0]
 800a69a:	f883 8000 	strb.w	r8, [r3]
 800a69e:	e63f      	b.n	800a320 <_dtoa_r+0x698>
 800a6a0:	4628      	mov	r0, r5
 800a6a2:	e7bb      	b.n	800a61c <_dtoa_r+0x994>
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	e7e1      	b.n	800a66c <_dtoa_r+0x9e4>
 800a6a8:	9b08      	ldr	r3, [sp, #32]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	db04      	blt.n	800a6b8 <_dtoa_r+0xa30>
 800a6ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a6b0:	430b      	orrs	r3, r1
 800a6b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a6b4:	430b      	orrs	r3, r1
 800a6b6:	d120      	bne.n	800a6fa <_dtoa_r+0xa72>
 800a6b8:	2a00      	cmp	r2, #0
 800a6ba:	dded      	ble.n	800a698 <_dtoa_r+0xa10>
 800a6bc:	4649      	mov	r1, r9
 800a6be:	2201      	movs	r2, #1
 800a6c0:	4658      	mov	r0, fp
 800a6c2:	f000 fbb3 	bl	800ae2c <__lshift>
 800a6c6:	4621      	mov	r1, r4
 800a6c8:	4681      	mov	r9, r0
 800a6ca:	f000 fc1b 	bl	800af04 <__mcmp>
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	dc03      	bgt.n	800a6da <_dtoa_r+0xa52>
 800a6d2:	d1e1      	bne.n	800a698 <_dtoa_r+0xa10>
 800a6d4:	f018 0f01 	tst.w	r8, #1
 800a6d8:	d0de      	beq.n	800a698 <_dtoa_r+0xa10>
 800a6da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a6de:	d1d8      	bne.n	800a692 <_dtoa_r+0xa0a>
 800a6e0:	9a00      	ldr	r2, [sp, #0]
 800a6e2:	2339      	movs	r3, #57	@ 0x39
 800a6e4:	7013      	strb	r3, [r2, #0]
 800a6e6:	4633      	mov	r3, r6
 800a6e8:	461e      	mov	r6, r3
 800a6ea:	3b01      	subs	r3, #1
 800a6ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a6f0:	2a39      	cmp	r2, #57	@ 0x39
 800a6f2:	d052      	beq.n	800a79a <_dtoa_r+0xb12>
 800a6f4:	3201      	adds	r2, #1
 800a6f6:	701a      	strb	r2, [r3, #0]
 800a6f8:	e612      	b.n	800a320 <_dtoa_r+0x698>
 800a6fa:	2a00      	cmp	r2, #0
 800a6fc:	dd07      	ble.n	800a70e <_dtoa_r+0xa86>
 800a6fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a702:	d0ed      	beq.n	800a6e0 <_dtoa_r+0xa58>
 800a704:	9a00      	ldr	r2, [sp, #0]
 800a706:	f108 0301 	add.w	r3, r8, #1
 800a70a:	7013      	strb	r3, [r2, #0]
 800a70c:	e608      	b.n	800a320 <_dtoa_r+0x698>
 800a70e:	9b07      	ldr	r3, [sp, #28]
 800a710:	9a07      	ldr	r2, [sp, #28]
 800a712:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a716:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a718:	4293      	cmp	r3, r2
 800a71a:	d028      	beq.n	800a76e <_dtoa_r+0xae6>
 800a71c:	4649      	mov	r1, r9
 800a71e:	2300      	movs	r3, #0
 800a720:	220a      	movs	r2, #10
 800a722:	4658      	mov	r0, fp
 800a724:	f000 f9d6 	bl	800aad4 <__multadd>
 800a728:	42af      	cmp	r7, r5
 800a72a:	4681      	mov	r9, r0
 800a72c:	f04f 0300 	mov.w	r3, #0
 800a730:	f04f 020a 	mov.w	r2, #10
 800a734:	4639      	mov	r1, r7
 800a736:	4658      	mov	r0, fp
 800a738:	d107      	bne.n	800a74a <_dtoa_r+0xac2>
 800a73a:	f000 f9cb 	bl	800aad4 <__multadd>
 800a73e:	4607      	mov	r7, r0
 800a740:	4605      	mov	r5, r0
 800a742:	9b07      	ldr	r3, [sp, #28]
 800a744:	3301      	adds	r3, #1
 800a746:	9307      	str	r3, [sp, #28]
 800a748:	e774      	b.n	800a634 <_dtoa_r+0x9ac>
 800a74a:	f000 f9c3 	bl	800aad4 <__multadd>
 800a74e:	4629      	mov	r1, r5
 800a750:	4607      	mov	r7, r0
 800a752:	2300      	movs	r3, #0
 800a754:	220a      	movs	r2, #10
 800a756:	4658      	mov	r0, fp
 800a758:	f000 f9bc 	bl	800aad4 <__multadd>
 800a75c:	4605      	mov	r5, r0
 800a75e:	e7f0      	b.n	800a742 <_dtoa_r+0xaba>
 800a760:	9b00      	ldr	r3, [sp, #0]
 800a762:	2b00      	cmp	r3, #0
 800a764:	bfcc      	ite	gt
 800a766:	461e      	movgt	r6, r3
 800a768:	2601      	movle	r6, #1
 800a76a:	4456      	add	r6, sl
 800a76c:	2700      	movs	r7, #0
 800a76e:	4649      	mov	r1, r9
 800a770:	2201      	movs	r2, #1
 800a772:	4658      	mov	r0, fp
 800a774:	f000 fb5a 	bl	800ae2c <__lshift>
 800a778:	4621      	mov	r1, r4
 800a77a:	4681      	mov	r9, r0
 800a77c:	f000 fbc2 	bl	800af04 <__mcmp>
 800a780:	2800      	cmp	r0, #0
 800a782:	dcb0      	bgt.n	800a6e6 <_dtoa_r+0xa5e>
 800a784:	d102      	bne.n	800a78c <_dtoa_r+0xb04>
 800a786:	f018 0f01 	tst.w	r8, #1
 800a78a:	d1ac      	bne.n	800a6e6 <_dtoa_r+0xa5e>
 800a78c:	4633      	mov	r3, r6
 800a78e:	461e      	mov	r6, r3
 800a790:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a794:	2a30      	cmp	r2, #48	@ 0x30
 800a796:	d0fa      	beq.n	800a78e <_dtoa_r+0xb06>
 800a798:	e5c2      	b.n	800a320 <_dtoa_r+0x698>
 800a79a:	459a      	cmp	sl, r3
 800a79c:	d1a4      	bne.n	800a6e8 <_dtoa_r+0xa60>
 800a79e:	9b04      	ldr	r3, [sp, #16]
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	9304      	str	r3, [sp, #16]
 800a7a4:	2331      	movs	r3, #49	@ 0x31
 800a7a6:	f88a 3000 	strb.w	r3, [sl]
 800a7aa:	e5b9      	b.n	800a320 <_dtoa_r+0x698>
 800a7ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a7ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a80c <_dtoa_r+0xb84>
 800a7b2:	b11b      	cbz	r3, 800a7bc <_dtoa_r+0xb34>
 800a7b4:	f10a 0308 	add.w	r3, sl, #8
 800a7b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a7ba:	6013      	str	r3, [r2, #0]
 800a7bc:	4650      	mov	r0, sl
 800a7be:	b019      	add	sp, #100	@ 0x64
 800a7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	f77f ae37 	ble.w	800a43a <_dtoa_r+0x7b2>
 800a7cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7d0:	2001      	movs	r0, #1
 800a7d2:	e655      	b.n	800a480 <_dtoa_r+0x7f8>
 800a7d4:	9b00      	ldr	r3, [sp, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	f77f aed6 	ble.w	800a588 <_dtoa_r+0x900>
 800a7dc:	4656      	mov	r6, sl
 800a7de:	4621      	mov	r1, r4
 800a7e0:	4648      	mov	r0, r9
 800a7e2:	f7ff f9c8 	bl	8009b76 <quorem>
 800a7e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a7ea:	f806 8b01 	strb.w	r8, [r6], #1
 800a7ee:	9b00      	ldr	r3, [sp, #0]
 800a7f0:	eba6 020a 	sub.w	r2, r6, sl
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	ddb3      	ble.n	800a760 <_dtoa_r+0xad8>
 800a7f8:	4649      	mov	r1, r9
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	220a      	movs	r2, #10
 800a7fe:	4658      	mov	r0, fp
 800a800:	f000 f968 	bl	800aad4 <__multadd>
 800a804:	4681      	mov	r9, r0
 800a806:	e7ea      	b.n	800a7de <_dtoa_r+0xb56>
 800a808:	0800bd30 	.word	0x0800bd30
 800a80c:	0800bcb4 	.word	0x0800bcb4

0800a810 <_free_r>:
 800a810:	b538      	push	{r3, r4, r5, lr}
 800a812:	4605      	mov	r5, r0
 800a814:	2900      	cmp	r1, #0
 800a816:	d041      	beq.n	800a89c <_free_r+0x8c>
 800a818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a81c:	1f0c      	subs	r4, r1, #4
 800a81e:	2b00      	cmp	r3, #0
 800a820:	bfb8      	it	lt
 800a822:	18e4      	addlt	r4, r4, r3
 800a824:	f000 f8e8 	bl	800a9f8 <__malloc_lock>
 800a828:	4a1d      	ldr	r2, [pc, #116]	@ (800a8a0 <_free_r+0x90>)
 800a82a:	6813      	ldr	r3, [r2, #0]
 800a82c:	b933      	cbnz	r3, 800a83c <_free_r+0x2c>
 800a82e:	6063      	str	r3, [r4, #4]
 800a830:	6014      	str	r4, [r2, #0]
 800a832:	4628      	mov	r0, r5
 800a834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a838:	f000 b8e4 	b.w	800aa04 <__malloc_unlock>
 800a83c:	42a3      	cmp	r3, r4
 800a83e:	d908      	bls.n	800a852 <_free_r+0x42>
 800a840:	6820      	ldr	r0, [r4, #0]
 800a842:	1821      	adds	r1, r4, r0
 800a844:	428b      	cmp	r3, r1
 800a846:	bf01      	itttt	eq
 800a848:	6819      	ldreq	r1, [r3, #0]
 800a84a:	685b      	ldreq	r3, [r3, #4]
 800a84c:	1809      	addeq	r1, r1, r0
 800a84e:	6021      	streq	r1, [r4, #0]
 800a850:	e7ed      	b.n	800a82e <_free_r+0x1e>
 800a852:	461a      	mov	r2, r3
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	b10b      	cbz	r3, 800a85c <_free_r+0x4c>
 800a858:	42a3      	cmp	r3, r4
 800a85a:	d9fa      	bls.n	800a852 <_free_r+0x42>
 800a85c:	6811      	ldr	r1, [r2, #0]
 800a85e:	1850      	adds	r0, r2, r1
 800a860:	42a0      	cmp	r0, r4
 800a862:	d10b      	bne.n	800a87c <_free_r+0x6c>
 800a864:	6820      	ldr	r0, [r4, #0]
 800a866:	4401      	add	r1, r0
 800a868:	1850      	adds	r0, r2, r1
 800a86a:	4283      	cmp	r3, r0
 800a86c:	6011      	str	r1, [r2, #0]
 800a86e:	d1e0      	bne.n	800a832 <_free_r+0x22>
 800a870:	6818      	ldr	r0, [r3, #0]
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	6053      	str	r3, [r2, #4]
 800a876:	4408      	add	r0, r1
 800a878:	6010      	str	r0, [r2, #0]
 800a87a:	e7da      	b.n	800a832 <_free_r+0x22>
 800a87c:	d902      	bls.n	800a884 <_free_r+0x74>
 800a87e:	230c      	movs	r3, #12
 800a880:	602b      	str	r3, [r5, #0]
 800a882:	e7d6      	b.n	800a832 <_free_r+0x22>
 800a884:	6820      	ldr	r0, [r4, #0]
 800a886:	1821      	adds	r1, r4, r0
 800a888:	428b      	cmp	r3, r1
 800a88a:	bf04      	itt	eq
 800a88c:	6819      	ldreq	r1, [r3, #0]
 800a88e:	685b      	ldreq	r3, [r3, #4]
 800a890:	6063      	str	r3, [r4, #4]
 800a892:	bf04      	itt	eq
 800a894:	1809      	addeq	r1, r1, r0
 800a896:	6021      	streq	r1, [r4, #0]
 800a898:	6054      	str	r4, [r2, #4]
 800a89a:	e7ca      	b.n	800a832 <_free_r+0x22>
 800a89c:	bd38      	pop	{r3, r4, r5, pc}
 800a89e:	bf00      	nop
 800a8a0:	2000212c 	.word	0x2000212c

0800a8a4 <malloc>:
 800a8a4:	4b02      	ldr	r3, [pc, #8]	@ (800a8b0 <malloc+0xc>)
 800a8a6:	4601      	mov	r1, r0
 800a8a8:	6818      	ldr	r0, [r3, #0]
 800a8aa:	f000 b825 	b.w	800a8f8 <_malloc_r>
 800a8ae:	bf00      	nop
 800a8b0:	20000108 	.word	0x20000108

0800a8b4 <sbrk_aligned>:
 800a8b4:	b570      	push	{r4, r5, r6, lr}
 800a8b6:	4e0f      	ldr	r6, [pc, #60]	@ (800a8f4 <sbrk_aligned+0x40>)
 800a8b8:	460c      	mov	r4, r1
 800a8ba:	6831      	ldr	r1, [r6, #0]
 800a8bc:	4605      	mov	r5, r0
 800a8be:	b911      	cbnz	r1, 800a8c6 <sbrk_aligned+0x12>
 800a8c0:	f000 fe46 	bl	800b550 <_sbrk_r>
 800a8c4:	6030      	str	r0, [r6, #0]
 800a8c6:	4621      	mov	r1, r4
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	f000 fe41 	bl	800b550 <_sbrk_r>
 800a8ce:	1c43      	adds	r3, r0, #1
 800a8d0:	d103      	bne.n	800a8da <sbrk_aligned+0x26>
 800a8d2:	f04f 34ff 	mov.w	r4, #4294967295
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	bd70      	pop	{r4, r5, r6, pc}
 800a8da:	1cc4      	adds	r4, r0, #3
 800a8dc:	f024 0403 	bic.w	r4, r4, #3
 800a8e0:	42a0      	cmp	r0, r4
 800a8e2:	d0f8      	beq.n	800a8d6 <sbrk_aligned+0x22>
 800a8e4:	1a21      	subs	r1, r4, r0
 800a8e6:	4628      	mov	r0, r5
 800a8e8:	f000 fe32 	bl	800b550 <_sbrk_r>
 800a8ec:	3001      	adds	r0, #1
 800a8ee:	d1f2      	bne.n	800a8d6 <sbrk_aligned+0x22>
 800a8f0:	e7ef      	b.n	800a8d2 <sbrk_aligned+0x1e>
 800a8f2:	bf00      	nop
 800a8f4:	20002128 	.word	0x20002128

0800a8f8 <_malloc_r>:
 800a8f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8fc:	1ccd      	adds	r5, r1, #3
 800a8fe:	f025 0503 	bic.w	r5, r5, #3
 800a902:	3508      	adds	r5, #8
 800a904:	2d0c      	cmp	r5, #12
 800a906:	bf38      	it	cc
 800a908:	250c      	movcc	r5, #12
 800a90a:	2d00      	cmp	r5, #0
 800a90c:	4606      	mov	r6, r0
 800a90e:	db01      	blt.n	800a914 <_malloc_r+0x1c>
 800a910:	42a9      	cmp	r1, r5
 800a912:	d904      	bls.n	800a91e <_malloc_r+0x26>
 800a914:	230c      	movs	r3, #12
 800a916:	6033      	str	r3, [r6, #0]
 800a918:	2000      	movs	r0, #0
 800a91a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a91e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a9f4 <_malloc_r+0xfc>
 800a922:	f000 f869 	bl	800a9f8 <__malloc_lock>
 800a926:	f8d8 3000 	ldr.w	r3, [r8]
 800a92a:	461c      	mov	r4, r3
 800a92c:	bb44      	cbnz	r4, 800a980 <_malloc_r+0x88>
 800a92e:	4629      	mov	r1, r5
 800a930:	4630      	mov	r0, r6
 800a932:	f7ff ffbf 	bl	800a8b4 <sbrk_aligned>
 800a936:	1c43      	adds	r3, r0, #1
 800a938:	4604      	mov	r4, r0
 800a93a:	d158      	bne.n	800a9ee <_malloc_r+0xf6>
 800a93c:	f8d8 4000 	ldr.w	r4, [r8]
 800a940:	4627      	mov	r7, r4
 800a942:	2f00      	cmp	r7, #0
 800a944:	d143      	bne.n	800a9ce <_malloc_r+0xd6>
 800a946:	2c00      	cmp	r4, #0
 800a948:	d04b      	beq.n	800a9e2 <_malloc_r+0xea>
 800a94a:	6823      	ldr	r3, [r4, #0]
 800a94c:	4639      	mov	r1, r7
 800a94e:	4630      	mov	r0, r6
 800a950:	eb04 0903 	add.w	r9, r4, r3
 800a954:	f000 fdfc 	bl	800b550 <_sbrk_r>
 800a958:	4581      	cmp	r9, r0
 800a95a:	d142      	bne.n	800a9e2 <_malloc_r+0xea>
 800a95c:	6821      	ldr	r1, [r4, #0]
 800a95e:	1a6d      	subs	r5, r5, r1
 800a960:	4629      	mov	r1, r5
 800a962:	4630      	mov	r0, r6
 800a964:	f7ff ffa6 	bl	800a8b4 <sbrk_aligned>
 800a968:	3001      	adds	r0, #1
 800a96a:	d03a      	beq.n	800a9e2 <_malloc_r+0xea>
 800a96c:	6823      	ldr	r3, [r4, #0]
 800a96e:	442b      	add	r3, r5
 800a970:	6023      	str	r3, [r4, #0]
 800a972:	f8d8 3000 	ldr.w	r3, [r8]
 800a976:	685a      	ldr	r2, [r3, #4]
 800a978:	bb62      	cbnz	r2, 800a9d4 <_malloc_r+0xdc>
 800a97a:	f8c8 7000 	str.w	r7, [r8]
 800a97e:	e00f      	b.n	800a9a0 <_malloc_r+0xa8>
 800a980:	6822      	ldr	r2, [r4, #0]
 800a982:	1b52      	subs	r2, r2, r5
 800a984:	d420      	bmi.n	800a9c8 <_malloc_r+0xd0>
 800a986:	2a0b      	cmp	r2, #11
 800a988:	d917      	bls.n	800a9ba <_malloc_r+0xc2>
 800a98a:	1961      	adds	r1, r4, r5
 800a98c:	42a3      	cmp	r3, r4
 800a98e:	6025      	str	r5, [r4, #0]
 800a990:	bf18      	it	ne
 800a992:	6059      	strne	r1, [r3, #4]
 800a994:	6863      	ldr	r3, [r4, #4]
 800a996:	bf08      	it	eq
 800a998:	f8c8 1000 	streq.w	r1, [r8]
 800a99c:	5162      	str	r2, [r4, r5]
 800a99e:	604b      	str	r3, [r1, #4]
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	f000 f82f 	bl	800aa04 <__malloc_unlock>
 800a9a6:	f104 000b 	add.w	r0, r4, #11
 800a9aa:	1d23      	adds	r3, r4, #4
 800a9ac:	f020 0007 	bic.w	r0, r0, #7
 800a9b0:	1ac2      	subs	r2, r0, r3
 800a9b2:	bf1c      	itt	ne
 800a9b4:	1a1b      	subne	r3, r3, r0
 800a9b6:	50a3      	strne	r3, [r4, r2]
 800a9b8:	e7af      	b.n	800a91a <_malloc_r+0x22>
 800a9ba:	6862      	ldr	r2, [r4, #4]
 800a9bc:	42a3      	cmp	r3, r4
 800a9be:	bf0c      	ite	eq
 800a9c0:	f8c8 2000 	streq.w	r2, [r8]
 800a9c4:	605a      	strne	r2, [r3, #4]
 800a9c6:	e7eb      	b.n	800a9a0 <_malloc_r+0xa8>
 800a9c8:	4623      	mov	r3, r4
 800a9ca:	6864      	ldr	r4, [r4, #4]
 800a9cc:	e7ae      	b.n	800a92c <_malloc_r+0x34>
 800a9ce:	463c      	mov	r4, r7
 800a9d0:	687f      	ldr	r7, [r7, #4]
 800a9d2:	e7b6      	b.n	800a942 <_malloc_r+0x4a>
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	42a3      	cmp	r3, r4
 800a9da:	d1fb      	bne.n	800a9d4 <_malloc_r+0xdc>
 800a9dc:	2300      	movs	r3, #0
 800a9de:	6053      	str	r3, [r2, #4]
 800a9e0:	e7de      	b.n	800a9a0 <_malloc_r+0xa8>
 800a9e2:	230c      	movs	r3, #12
 800a9e4:	6033      	str	r3, [r6, #0]
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	f000 f80c 	bl	800aa04 <__malloc_unlock>
 800a9ec:	e794      	b.n	800a918 <_malloc_r+0x20>
 800a9ee:	6005      	str	r5, [r0, #0]
 800a9f0:	e7d6      	b.n	800a9a0 <_malloc_r+0xa8>
 800a9f2:	bf00      	nop
 800a9f4:	2000212c 	.word	0x2000212c

0800a9f8 <__malloc_lock>:
 800a9f8:	4801      	ldr	r0, [pc, #4]	@ (800aa00 <__malloc_lock+0x8>)
 800a9fa:	f7ff b8ba 	b.w	8009b72 <__retarget_lock_acquire_recursive>
 800a9fe:	bf00      	nop
 800aa00:	20002124 	.word	0x20002124

0800aa04 <__malloc_unlock>:
 800aa04:	4801      	ldr	r0, [pc, #4]	@ (800aa0c <__malloc_unlock+0x8>)
 800aa06:	f7ff b8b5 	b.w	8009b74 <__retarget_lock_release_recursive>
 800aa0a:	bf00      	nop
 800aa0c:	20002124 	.word	0x20002124

0800aa10 <_Balloc>:
 800aa10:	b570      	push	{r4, r5, r6, lr}
 800aa12:	69c6      	ldr	r6, [r0, #28]
 800aa14:	4604      	mov	r4, r0
 800aa16:	460d      	mov	r5, r1
 800aa18:	b976      	cbnz	r6, 800aa38 <_Balloc+0x28>
 800aa1a:	2010      	movs	r0, #16
 800aa1c:	f7ff ff42 	bl	800a8a4 <malloc>
 800aa20:	4602      	mov	r2, r0
 800aa22:	61e0      	str	r0, [r4, #28]
 800aa24:	b920      	cbnz	r0, 800aa30 <_Balloc+0x20>
 800aa26:	4b18      	ldr	r3, [pc, #96]	@ (800aa88 <_Balloc+0x78>)
 800aa28:	4818      	ldr	r0, [pc, #96]	@ (800aa8c <_Balloc+0x7c>)
 800aa2a:	216b      	movs	r1, #107	@ 0x6b
 800aa2c:	f000 fdae 	bl	800b58c <__assert_func>
 800aa30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa34:	6006      	str	r6, [r0, #0]
 800aa36:	60c6      	str	r6, [r0, #12]
 800aa38:	69e6      	ldr	r6, [r4, #28]
 800aa3a:	68f3      	ldr	r3, [r6, #12]
 800aa3c:	b183      	cbz	r3, 800aa60 <_Balloc+0x50>
 800aa3e:	69e3      	ldr	r3, [r4, #28]
 800aa40:	68db      	ldr	r3, [r3, #12]
 800aa42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa46:	b9b8      	cbnz	r0, 800aa78 <_Balloc+0x68>
 800aa48:	2101      	movs	r1, #1
 800aa4a:	fa01 f605 	lsl.w	r6, r1, r5
 800aa4e:	1d72      	adds	r2, r6, #5
 800aa50:	0092      	lsls	r2, r2, #2
 800aa52:	4620      	mov	r0, r4
 800aa54:	f000 fdb8 	bl	800b5c8 <_calloc_r>
 800aa58:	b160      	cbz	r0, 800aa74 <_Balloc+0x64>
 800aa5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa5e:	e00e      	b.n	800aa7e <_Balloc+0x6e>
 800aa60:	2221      	movs	r2, #33	@ 0x21
 800aa62:	2104      	movs	r1, #4
 800aa64:	4620      	mov	r0, r4
 800aa66:	f000 fdaf 	bl	800b5c8 <_calloc_r>
 800aa6a:	69e3      	ldr	r3, [r4, #28]
 800aa6c:	60f0      	str	r0, [r6, #12]
 800aa6e:	68db      	ldr	r3, [r3, #12]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d1e4      	bne.n	800aa3e <_Balloc+0x2e>
 800aa74:	2000      	movs	r0, #0
 800aa76:	bd70      	pop	{r4, r5, r6, pc}
 800aa78:	6802      	ldr	r2, [r0, #0]
 800aa7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa7e:	2300      	movs	r3, #0
 800aa80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa84:	e7f7      	b.n	800aa76 <_Balloc+0x66>
 800aa86:	bf00      	nop
 800aa88:	0800bcc1 	.word	0x0800bcc1
 800aa8c:	0800bd41 	.word	0x0800bd41

0800aa90 <_Bfree>:
 800aa90:	b570      	push	{r4, r5, r6, lr}
 800aa92:	69c6      	ldr	r6, [r0, #28]
 800aa94:	4605      	mov	r5, r0
 800aa96:	460c      	mov	r4, r1
 800aa98:	b976      	cbnz	r6, 800aab8 <_Bfree+0x28>
 800aa9a:	2010      	movs	r0, #16
 800aa9c:	f7ff ff02 	bl	800a8a4 <malloc>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	61e8      	str	r0, [r5, #28]
 800aaa4:	b920      	cbnz	r0, 800aab0 <_Bfree+0x20>
 800aaa6:	4b09      	ldr	r3, [pc, #36]	@ (800aacc <_Bfree+0x3c>)
 800aaa8:	4809      	ldr	r0, [pc, #36]	@ (800aad0 <_Bfree+0x40>)
 800aaaa:	218f      	movs	r1, #143	@ 0x8f
 800aaac:	f000 fd6e 	bl	800b58c <__assert_func>
 800aab0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aab4:	6006      	str	r6, [r0, #0]
 800aab6:	60c6      	str	r6, [r0, #12]
 800aab8:	b13c      	cbz	r4, 800aaca <_Bfree+0x3a>
 800aaba:	69eb      	ldr	r3, [r5, #28]
 800aabc:	6862      	ldr	r2, [r4, #4]
 800aabe:	68db      	ldr	r3, [r3, #12]
 800aac0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aac4:	6021      	str	r1, [r4, #0]
 800aac6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aaca:	bd70      	pop	{r4, r5, r6, pc}
 800aacc:	0800bcc1 	.word	0x0800bcc1
 800aad0:	0800bd41 	.word	0x0800bd41

0800aad4 <__multadd>:
 800aad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aad8:	690d      	ldr	r5, [r1, #16]
 800aada:	4607      	mov	r7, r0
 800aadc:	460c      	mov	r4, r1
 800aade:	461e      	mov	r6, r3
 800aae0:	f101 0c14 	add.w	ip, r1, #20
 800aae4:	2000      	movs	r0, #0
 800aae6:	f8dc 3000 	ldr.w	r3, [ip]
 800aaea:	b299      	uxth	r1, r3
 800aaec:	fb02 6101 	mla	r1, r2, r1, r6
 800aaf0:	0c1e      	lsrs	r6, r3, #16
 800aaf2:	0c0b      	lsrs	r3, r1, #16
 800aaf4:	fb02 3306 	mla	r3, r2, r6, r3
 800aaf8:	b289      	uxth	r1, r1
 800aafa:	3001      	adds	r0, #1
 800aafc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ab00:	4285      	cmp	r5, r0
 800ab02:	f84c 1b04 	str.w	r1, [ip], #4
 800ab06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab0a:	dcec      	bgt.n	800aae6 <__multadd+0x12>
 800ab0c:	b30e      	cbz	r6, 800ab52 <__multadd+0x7e>
 800ab0e:	68a3      	ldr	r3, [r4, #8]
 800ab10:	42ab      	cmp	r3, r5
 800ab12:	dc19      	bgt.n	800ab48 <__multadd+0x74>
 800ab14:	6861      	ldr	r1, [r4, #4]
 800ab16:	4638      	mov	r0, r7
 800ab18:	3101      	adds	r1, #1
 800ab1a:	f7ff ff79 	bl	800aa10 <_Balloc>
 800ab1e:	4680      	mov	r8, r0
 800ab20:	b928      	cbnz	r0, 800ab2e <__multadd+0x5a>
 800ab22:	4602      	mov	r2, r0
 800ab24:	4b0c      	ldr	r3, [pc, #48]	@ (800ab58 <__multadd+0x84>)
 800ab26:	480d      	ldr	r0, [pc, #52]	@ (800ab5c <__multadd+0x88>)
 800ab28:	21ba      	movs	r1, #186	@ 0xba
 800ab2a:	f000 fd2f 	bl	800b58c <__assert_func>
 800ab2e:	6922      	ldr	r2, [r4, #16]
 800ab30:	3202      	adds	r2, #2
 800ab32:	f104 010c 	add.w	r1, r4, #12
 800ab36:	0092      	lsls	r2, r2, #2
 800ab38:	300c      	adds	r0, #12
 800ab3a:	f000 fd19 	bl	800b570 <memcpy>
 800ab3e:	4621      	mov	r1, r4
 800ab40:	4638      	mov	r0, r7
 800ab42:	f7ff ffa5 	bl	800aa90 <_Bfree>
 800ab46:	4644      	mov	r4, r8
 800ab48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab4c:	3501      	adds	r5, #1
 800ab4e:	615e      	str	r6, [r3, #20]
 800ab50:	6125      	str	r5, [r4, #16]
 800ab52:	4620      	mov	r0, r4
 800ab54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab58:	0800bd30 	.word	0x0800bd30
 800ab5c:	0800bd41 	.word	0x0800bd41

0800ab60 <__hi0bits>:
 800ab60:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ab64:	4603      	mov	r3, r0
 800ab66:	bf36      	itet	cc
 800ab68:	0403      	lslcc	r3, r0, #16
 800ab6a:	2000      	movcs	r0, #0
 800ab6c:	2010      	movcc	r0, #16
 800ab6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ab72:	bf3c      	itt	cc
 800ab74:	021b      	lslcc	r3, r3, #8
 800ab76:	3008      	addcc	r0, #8
 800ab78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab7c:	bf3c      	itt	cc
 800ab7e:	011b      	lslcc	r3, r3, #4
 800ab80:	3004      	addcc	r0, #4
 800ab82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab86:	bf3c      	itt	cc
 800ab88:	009b      	lslcc	r3, r3, #2
 800ab8a:	3002      	addcc	r0, #2
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	db05      	blt.n	800ab9c <__hi0bits+0x3c>
 800ab90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ab94:	f100 0001 	add.w	r0, r0, #1
 800ab98:	bf08      	it	eq
 800ab9a:	2020      	moveq	r0, #32
 800ab9c:	4770      	bx	lr

0800ab9e <__lo0bits>:
 800ab9e:	6803      	ldr	r3, [r0, #0]
 800aba0:	4602      	mov	r2, r0
 800aba2:	f013 0007 	ands.w	r0, r3, #7
 800aba6:	d00b      	beq.n	800abc0 <__lo0bits+0x22>
 800aba8:	07d9      	lsls	r1, r3, #31
 800abaa:	d421      	bmi.n	800abf0 <__lo0bits+0x52>
 800abac:	0798      	lsls	r0, r3, #30
 800abae:	bf49      	itett	mi
 800abb0:	085b      	lsrmi	r3, r3, #1
 800abb2:	089b      	lsrpl	r3, r3, #2
 800abb4:	2001      	movmi	r0, #1
 800abb6:	6013      	strmi	r3, [r2, #0]
 800abb8:	bf5c      	itt	pl
 800abba:	6013      	strpl	r3, [r2, #0]
 800abbc:	2002      	movpl	r0, #2
 800abbe:	4770      	bx	lr
 800abc0:	b299      	uxth	r1, r3
 800abc2:	b909      	cbnz	r1, 800abc8 <__lo0bits+0x2a>
 800abc4:	0c1b      	lsrs	r3, r3, #16
 800abc6:	2010      	movs	r0, #16
 800abc8:	b2d9      	uxtb	r1, r3
 800abca:	b909      	cbnz	r1, 800abd0 <__lo0bits+0x32>
 800abcc:	3008      	adds	r0, #8
 800abce:	0a1b      	lsrs	r3, r3, #8
 800abd0:	0719      	lsls	r1, r3, #28
 800abd2:	bf04      	itt	eq
 800abd4:	091b      	lsreq	r3, r3, #4
 800abd6:	3004      	addeq	r0, #4
 800abd8:	0799      	lsls	r1, r3, #30
 800abda:	bf04      	itt	eq
 800abdc:	089b      	lsreq	r3, r3, #2
 800abde:	3002      	addeq	r0, #2
 800abe0:	07d9      	lsls	r1, r3, #31
 800abe2:	d403      	bmi.n	800abec <__lo0bits+0x4e>
 800abe4:	085b      	lsrs	r3, r3, #1
 800abe6:	f100 0001 	add.w	r0, r0, #1
 800abea:	d003      	beq.n	800abf4 <__lo0bits+0x56>
 800abec:	6013      	str	r3, [r2, #0]
 800abee:	4770      	bx	lr
 800abf0:	2000      	movs	r0, #0
 800abf2:	4770      	bx	lr
 800abf4:	2020      	movs	r0, #32
 800abf6:	4770      	bx	lr

0800abf8 <__i2b>:
 800abf8:	b510      	push	{r4, lr}
 800abfa:	460c      	mov	r4, r1
 800abfc:	2101      	movs	r1, #1
 800abfe:	f7ff ff07 	bl	800aa10 <_Balloc>
 800ac02:	4602      	mov	r2, r0
 800ac04:	b928      	cbnz	r0, 800ac12 <__i2b+0x1a>
 800ac06:	4b05      	ldr	r3, [pc, #20]	@ (800ac1c <__i2b+0x24>)
 800ac08:	4805      	ldr	r0, [pc, #20]	@ (800ac20 <__i2b+0x28>)
 800ac0a:	f240 1145 	movw	r1, #325	@ 0x145
 800ac0e:	f000 fcbd 	bl	800b58c <__assert_func>
 800ac12:	2301      	movs	r3, #1
 800ac14:	6144      	str	r4, [r0, #20]
 800ac16:	6103      	str	r3, [r0, #16]
 800ac18:	bd10      	pop	{r4, pc}
 800ac1a:	bf00      	nop
 800ac1c:	0800bd30 	.word	0x0800bd30
 800ac20:	0800bd41 	.word	0x0800bd41

0800ac24 <__multiply>:
 800ac24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac28:	4614      	mov	r4, r2
 800ac2a:	690a      	ldr	r2, [r1, #16]
 800ac2c:	6923      	ldr	r3, [r4, #16]
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	bfa8      	it	ge
 800ac32:	4623      	movge	r3, r4
 800ac34:	460f      	mov	r7, r1
 800ac36:	bfa4      	itt	ge
 800ac38:	460c      	movge	r4, r1
 800ac3a:	461f      	movge	r7, r3
 800ac3c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ac40:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ac44:	68a3      	ldr	r3, [r4, #8]
 800ac46:	6861      	ldr	r1, [r4, #4]
 800ac48:	eb0a 0609 	add.w	r6, sl, r9
 800ac4c:	42b3      	cmp	r3, r6
 800ac4e:	b085      	sub	sp, #20
 800ac50:	bfb8      	it	lt
 800ac52:	3101      	addlt	r1, #1
 800ac54:	f7ff fedc 	bl	800aa10 <_Balloc>
 800ac58:	b930      	cbnz	r0, 800ac68 <__multiply+0x44>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	4b44      	ldr	r3, [pc, #272]	@ (800ad70 <__multiply+0x14c>)
 800ac5e:	4845      	ldr	r0, [pc, #276]	@ (800ad74 <__multiply+0x150>)
 800ac60:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ac64:	f000 fc92 	bl	800b58c <__assert_func>
 800ac68:	f100 0514 	add.w	r5, r0, #20
 800ac6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ac70:	462b      	mov	r3, r5
 800ac72:	2200      	movs	r2, #0
 800ac74:	4543      	cmp	r3, r8
 800ac76:	d321      	bcc.n	800acbc <__multiply+0x98>
 800ac78:	f107 0114 	add.w	r1, r7, #20
 800ac7c:	f104 0214 	add.w	r2, r4, #20
 800ac80:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ac84:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ac88:	9302      	str	r3, [sp, #8]
 800ac8a:	1b13      	subs	r3, r2, r4
 800ac8c:	3b15      	subs	r3, #21
 800ac8e:	f023 0303 	bic.w	r3, r3, #3
 800ac92:	3304      	adds	r3, #4
 800ac94:	f104 0715 	add.w	r7, r4, #21
 800ac98:	42ba      	cmp	r2, r7
 800ac9a:	bf38      	it	cc
 800ac9c:	2304      	movcc	r3, #4
 800ac9e:	9301      	str	r3, [sp, #4]
 800aca0:	9b02      	ldr	r3, [sp, #8]
 800aca2:	9103      	str	r1, [sp, #12]
 800aca4:	428b      	cmp	r3, r1
 800aca6:	d80c      	bhi.n	800acc2 <__multiply+0x9e>
 800aca8:	2e00      	cmp	r6, #0
 800acaa:	dd03      	ble.n	800acb4 <__multiply+0x90>
 800acac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d05b      	beq.n	800ad6c <__multiply+0x148>
 800acb4:	6106      	str	r6, [r0, #16]
 800acb6:	b005      	add	sp, #20
 800acb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acbc:	f843 2b04 	str.w	r2, [r3], #4
 800acc0:	e7d8      	b.n	800ac74 <__multiply+0x50>
 800acc2:	f8b1 a000 	ldrh.w	sl, [r1]
 800acc6:	f1ba 0f00 	cmp.w	sl, #0
 800acca:	d024      	beq.n	800ad16 <__multiply+0xf2>
 800accc:	f104 0e14 	add.w	lr, r4, #20
 800acd0:	46a9      	mov	r9, r5
 800acd2:	f04f 0c00 	mov.w	ip, #0
 800acd6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800acda:	f8d9 3000 	ldr.w	r3, [r9]
 800acde:	fa1f fb87 	uxth.w	fp, r7
 800ace2:	b29b      	uxth	r3, r3
 800ace4:	fb0a 330b 	mla	r3, sl, fp, r3
 800ace8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800acec:	f8d9 7000 	ldr.w	r7, [r9]
 800acf0:	4463      	add	r3, ip
 800acf2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800acf6:	fb0a c70b 	mla	r7, sl, fp, ip
 800acfa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ad04:	4572      	cmp	r2, lr
 800ad06:	f849 3b04 	str.w	r3, [r9], #4
 800ad0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ad0e:	d8e2      	bhi.n	800acd6 <__multiply+0xb2>
 800ad10:	9b01      	ldr	r3, [sp, #4]
 800ad12:	f845 c003 	str.w	ip, [r5, r3]
 800ad16:	9b03      	ldr	r3, [sp, #12]
 800ad18:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ad1c:	3104      	adds	r1, #4
 800ad1e:	f1b9 0f00 	cmp.w	r9, #0
 800ad22:	d021      	beq.n	800ad68 <__multiply+0x144>
 800ad24:	682b      	ldr	r3, [r5, #0]
 800ad26:	f104 0c14 	add.w	ip, r4, #20
 800ad2a:	46ae      	mov	lr, r5
 800ad2c:	f04f 0a00 	mov.w	sl, #0
 800ad30:	f8bc b000 	ldrh.w	fp, [ip]
 800ad34:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ad38:	fb09 770b 	mla	r7, r9, fp, r7
 800ad3c:	4457      	add	r7, sl
 800ad3e:	b29b      	uxth	r3, r3
 800ad40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ad44:	f84e 3b04 	str.w	r3, [lr], #4
 800ad48:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ad4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad50:	f8be 3000 	ldrh.w	r3, [lr]
 800ad54:	fb09 330a 	mla	r3, r9, sl, r3
 800ad58:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ad5c:	4562      	cmp	r2, ip
 800ad5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad62:	d8e5      	bhi.n	800ad30 <__multiply+0x10c>
 800ad64:	9f01      	ldr	r7, [sp, #4]
 800ad66:	51eb      	str	r3, [r5, r7]
 800ad68:	3504      	adds	r5, #4
 800ad6a:	e799      	b.n	800aca0 <__multiply+0x7c>
 800ad6c:	3e01      	subs	r6, #1
 800ad6e:	e79b      	b.n	800aca8 <__multiply+0x84>
 800ad70:	0800bd30 	.word	0x0800bd30
 800ad74:	0800bd41 	.word	0x0800bd41

0800ad78 <__pow5mult>:
 800ad78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad7c:	4615      	mov	r5, r2
 800ad7e:	f012 0203 	ands.w	r2, r2, #3
 800ad82:	4607      	mov	r7, r0
 800ad84:	460e      	mov	r6, r1
 800ad86:	d007      	beq.n	800ad98 <__pow5mult+0x20>
 800ad88:	4c25      	ldr	r4, [pc, #148]	@ (800ae20 <__pow5mult+0xa8>)
 800ad8a:	3a01      	subs	r2, #1
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad92:	f7ff fe9f 	bl	800aad4 <__multadd>
 800ad96:	4606      	mov	r6, r0
 800ad98:	10ad      	asrs	r5, r5, #2
 800ad9a:	d03d      	beq.n	800ae18 <__pow5mult+0xa0>
 800ad9c:	69fc      	ldr	r4, [r7, #28]
 800ad9e:	b97c      	cbnz	r4, 800adc0 <__pow5mult+0x48>
 800ada0:	2010      	movs	r0, #16
 800ada2:	f7ff fd7f 	bl	800a8a4 <malloc>
 800ada6:	4602      	mov	r2, r0
 800ada8:	61f8      	str	r0, [r7, #28]
 800adaa:	b928      	cbnz	r0, 800adb8 <__pow5mult+0x40>
 800adac:	4b1d      	ldr	r3, [pc, #116]	@ (800ae24 <__pow5mult+0xac>)
 800adae:	481e      	ldr	r0, [pc, #120]	@ (800ae28 <__pow5mult+0xb0>)
 800adb0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800adb4:	f000 fbea 	bl	800b58c <__assert_func>
 800adb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800adbc:	6004      	str	r4, [r0, #0]
 800adbe:	60c4      	str	r4, [r0, #12]
 800adc0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800adc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800adc8:	b94c      	cbnz	r4, 800adde <__pow5mult+0x66>
 800adca:	f240 2171 	movw	r1, #625	@ 0x271
 800adce:	4638      	mov	r0, r7
 800add0:	f7ff ff12 	bl	800abf8 <__i2b>
 800add4:	2300      	movs	r3, #0
 800add6:	f8c8 0008 	str.w	r0, [r8, #8]
 800adda:	4604      	mov	r4, r0
 800addc:	6003      	str	r3, [r0, #0]
 800adde:	f04f 0900 	mov.w	r9, #0
 800ade2:	07eb      	lsls	r3, r5, #31
 800ade4:	d50a      	bpl.n	800adfc <__pow5mult+0x84>
 800ade6:	4631      	mov	r1, r6
 800ade8:	4622      	mov	r2, r4
 800adea:	4638      	mov	r0, r7
 800adec:	f7ff ff1a 	bl	800ac24 <__multiply>
 800adf0:	4631      	mov	r1, r6
 800adf2:	4680      	mov	r8, r0
 800adf4:	4638      	mov	r0, r7
 800adf6:	f7ff fe4b 	bl	800aa90 <_Bfree>
 800adfa:	4646      	mov	r6, r8
 800adfc:	106d      	asrs	r5, r5, #1
 800adfe:	d00b      	beq.n	800ae18 <__pow5mult+0xa0>
 800ae00:	6820      	ldr	r0, [r4, #0]
 800ae02:	b938      	cbnz	r0, 800ae14 <__pow5mult+0x9c>
 800ae04:	4622      	mov	r2, r4
 800ae06:	4621      	mov	r1, r4
 800ae08:	4638      	mov	r0, r7
 800ae0a:	f7ff ff0b 	bl	800ac24 <__multiply>
 800ae0e:	6020      	str	r0, [r4, #0]
 800ae10:	f8c0 9000 	str.w	r9, [r0]
 800ae14:	4604      	mov	r4, r0
 800ae16:	e7e4      	b.n	800ade2 <__pow5mult+0x6a>
 800ae18:	4630      	mov	r0, r6
 800ae1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae1e:	bf00      	nop
 800ae20:	0800bd9c 	.word	0x0800bd9c
 800ae24:	0800bcc1 	.word	0x0800bcc1
 800ae28:	0800bd41 	.word	0x0800bd41

0800ae2c <__lshift>:
 800ae2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae30:	460c      	mov	r4, r1
 800ae32:	6849      	ldr	r1, [r1, #4]
 800ae34:	6923      	ldr	r3, [r4, #16]
 800ae36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae3a:	68a3      	ldr	r3, [r4, #8]
 800ae3c:	4607      	mov	r7, r0
 800ae3e:	4691      	mov	r9, r2
 800ae40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae44:	f108 0601 	add.w	r6, r8, #1
 800ae48:	42b3      	cmp	r3, r6
 800ae4a:	db0b      	blt.n	800ae64 <__lshift+0x38>
 800ae4c:	4638      	mov	r0, r7
 800ae4e:	f7ff fddf 	bl	800aa10 <_Balloc>
 800ae52:	4605      	mov	r5, r0
 800ae54:	b948      	cbnz	r0, 800ae6a <__lshift+0x3e>
 800ae56:	4602      	mov	r2, r0
 800ae58:	4b28      	ldr	r3, [pc, #160]	@ (800aefc <__lshift+0xd0>)
 800ae5a:	4829      	ldr	r0, [pc, #164]	@ (800af00 <__lshift+0xd4>)
 800ae5c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ae60:	f000 fb94 	bl	800b58c <__assert_func>
 800ae64:	3101      	adds	r1, #1
 800ae66:	005b      	lsls	r3, r3, #1
 800ae68:	e7ee      	b.n	800ae48 <__lshift+0x1c>
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	f100 0114 	add.w	r1, r0, #20
 800ae70:	f100 0210 	add.w	r2, r0, #16
 800ae74:	4618      	mov	r0, r3
 800ae76:	4553      	cmp	r3, sl
 800ae78:	db33      	blt.n	800aee2 <__lshift+0xb6>
 800ae7a:	6920      	ldr	r0, [r4, #16]
 800ae7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae80:	f104 0314 	add.w	r3, r4, #20
 800ae84:	f019 091f 	ands.w	r9, r9, #31
 800ae88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ae90:	d02b      	beq.n	800aeea <__lshift+0xbe>
 800ae92:	f1c9 0e20 	rsb	lr, r9, #32
 800ae96:	468a      	mov	sl, r1
 800ae98:	2200      	movs	r2, #0
 800ae9a:	6818      	ldr	r0, [r3, #0]
 800ae9c:	fa00 f009 	lsl.w	r0, r0, r9
 800aea0:	4310      	orrs	r0, r2
 800aea2:	f84a 0b04 	str.w	r0, [sl], #4
 800aea6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeaa:	459c      	cmp	ip, r3
 800aeac:	fa22 f20e 	lsr.w	r2, r2, lr
 800aeb0:	d8f3      	bhi.n	800ae9a <__lshift+0x6e>
 800aeb2:	ebac 0304 	sub.w	r3, ip, r4
 800aeb6:	3b15      	subs	r3, #21
 800aeb8:	f023 0303 	bic.w	r3, r3, #3
 800aebc:	3304      	adds	r3, #4
 800aebe:	f104 0015 	add.w	r0, r4, #21
 800aec2:	4584      	cmp	ip, r0
 800aec4:	bf38      	it	cc
 800aec6:	2304      	movcc	r3, #4
 800aec8:	50ca      	str	r2, [r1, r3]
 800aeca:	b10a      	cbz	r2, 800aed0 <__lshift+0xa4>
 800aecc:	f108 0602 	add.w	r6, r8, #2
 800aed0:	3e01      	subs	r6, #1
 800aed2:	4638      	mov	r0, r7
 800aed4:	612e      	str	r6, [r5, #16]
 800aed6:	4621      	mov	r1, r4
 800aed8:	f7ff fdda 	bl	800aa90 <_Bfree>
 800aedc:	4628      	mov	r0, r5
 800aede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aee2:	f842 0f04 	str.w	r0, [r2, #4]!
 800aee6:	3301      	adds	r3, #1
 800aee8:	e7c5      	b.n	800ae76 <__lshift+0x4a>
 800aeea:	3904      	subs	r1, #4
 800aeec:	f853 2b04 	ldr.w	r2, [r3], #4
 800aef0:	f841 2f04 	str.w	r2, [r1, #4]!
 800aef4:	459c      	cmp	ip, r3
 800aef6:	d8f9      	bhi.n	800aeec <__lshift+0xc0>
 800aef8:	e7ea      	b.n	800aed0 <__lshift+0xa4>
 800aefa:	bf00      	nop
 800aefc:	0800bd30 	.word	0x0800bd30
 800af00:	0800bd41 	.word	0x0800bd41

0800af04 <__mcmp>:
 800af04:	690a      	ldr	r2, [r1, #16]
 800af06:	4603      	mov	r3, r0
 800af08:	6900      	ldr	r0, [r0, #16]
 800af0a:	1a80      	subs	r0, r0, r2
 800af0c:	b530      	push	{r4, r5, lr}
 800af0e:	d10e      	bne.n	800af2e <__mcmp+0x2a>
 800af10:	3314      	adds	r3, #20
 800af12:	3114      	adds	r1, #20
 800af14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800af18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800af1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800af20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800af24:	4295      	cmp	r5, r2
 800af26:	d003      	beq.n	800af30 <__mcmp+0x2c>
 800af28:	d205      	bcs.n	800af36 <__mcmp+0x32>
 800af2a:	f04f 30ff 	mov.w	r0, #4294967295
 800af2e:	bd30      	pop	{r4, r5, pc}
 800af30:	42a3      	cmp	r3, r4
 800af32:	d3f3      	bcc.n	800af1c <__mcmp+0x18>
 800af34:	e7fb      	b.n	800af2e <__mcmp+0x2a>
 800af36:	2001      	movs	r0, #1
 800af38:	e7f9      	b.n	800af2e <__mcmp+0x2a>
	...

0800af3c <__mdiff>:
 800af3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af40:	4689      	mov	r9, r1
 800af42:	4606      	mov	r6, r0
 800af44:	4611      	mov	r1, r2
 800af46:	4648      	mov	r0, r9
 800af48:	4614      	mov	r4, r2
 800af4a:	f7ff ffdb 	bl	800af04 <__mcmp>
 800af4e:	1e05      	subs	r5, r0, #0
 800af50:	d112      	bne.n	800af78 <__mdiff+0x3c>
 800af52:	4629      	mov	r1, r5
 800af54:	4630      	mov	r0, r6
 800af56:	f7ff fd5b 	bl	800aa10 <_Balloc>
 800af5a:	4602      	mov	r2, r0
 800af5c:	b928      	cbnz	r0, 800af6a <__mdiff+0x2e>
 800af5e:	4b3f      	ldr	r3, [pc, #252]	@ (800b05c <__mdiff+0x120>)
 800af60:	f240 2137 	movw	r1, #567	@ 0x237
 800af64:	483e      	ldr	r0, [pc, #248]	@ (800b060 <__mdiff+0x124>)
 800af66:	f000 fb11 	bl	800b58c <__assert_func>
 800af6a:	2301      	movs	r3, #1
 800af6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800af70:	4610      	mov	r0, r2
 800af72:	b003      	add	sp, #12
 800af74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af78:	bfbc      	itt	lt
 800af7a:	464b      	movlt	r3, r9
 800af7c:	46a1      	movlt	r9, r4
 800af7e:	4630      	mov	r0, r6
 800af80:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800af84:	bfba      	itte	lt
 800af86:	461c      	movlt	r4, r3
 800af88:	2501      	movlt	r5, #1
 800af8a:	2500      	movge	r5, #0
 800af8c:	f7ff fd40 	bl	800aa10 <_Balloc>
 800af90:	4602      	mov	r2, r0
 800af92:	b918      	cbnz	r0, 800af9c <__mdiff+0x60>
 800af94:	4b31      	ldr	r3, [pc, #196]	@ (800b05c <__mdiff+0x120>)
 800af96:	f240 2145 	movw	r1, #581	@ 0x245
 800af9a:	e7e3      	b.n	800af64 <__mdiff+0x28>
 800af9c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800afa0:	6926      	ldr	r6, [r4, #16]
 800afa2:	60c5      	str	r5, [r0, #12]
 800afa4:	f109 0310 	add.w	r3, r9, #16
 800afa8:	f109 0514 	add.w	r5, r9, #20
 800afac:	f104 0e14 	add.w	lr, r4, #20
 800afb0:	f100 0b14 	add.w	fp, r0, #20
 800afb4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800afb8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800afbc:	9301      	str	r3, [sp, #4]
 800afbe:	46d9      	mov	r9, fp
 800afc0:	f04f 0c00 	mov.w	ip, #0
 800afc4:	9b01      	ldr	r3, [sp, #4]
 800afc6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800afca:	f853 af04 	ldr.w	sl, [r3, #4]!
 800afce:	9301      	str	r3, [sp, #4]
 800afd0:	fa1f f38a 	uxth.w	r3, sl
 800afd4:	4619      	mov	r1, r3
 800afd6:	b283      	uxth	r3, r0
 800afd8:	1acb      	subs	r3, r1, r3
 800afda:	0c00      	lsrs	r0, r0, #16
 800afdc:	4463      	add	r3, ip
 800afde:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800afe2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800afe6:	b29b      	uxth	r3, r3
 800afe8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800afec:	4576      	cmp	r6, lr
 800afee:	f849 3b04 	str.w	r3, [r9], #4
 800aff2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aff6:	d8e5      	bhi.n	800afc4 <__mdiff+0x88>
 800aff8:	1b33      	subs	r3, r6, r4
 800affa:	3b15      	subs	r3, #21
 800affc:	f023 0303 	bic.w	r3, r3, #3
 800b000:	3415      	adds	r4, #21
 800b002:	3304      	adds	r3, #4
 800b004:	42a6      	cmp	r6, r4
 800b006:	bf38      	it	cc
 800b008:	2304      	movcc	r3, #4
 800b00a:	441d      	add	r5, r3
 800b00c:	445b      	add	r3, fp
 800b00e:	461e      	mov	r6, r3
 800b010:	462c      	mov	r4, r5
 800b012:	4544      	cmp	r4, r8
 800b014:	d30e      	bcc.n	800b034 <__mdiff+0xf8>
 800b016:	f108 0103 	add.w	r1, r8, #3
 800b01a:	1b49      	subs	r1, r1, r5
 800b01c:	f021 0103 	bic.w	r1, r1, #3
 800b020:	3d03      	subs	r5, #3
 800b022:	45a8      	cmp	r8, r5
 800b024:	bf38      	it	cc
 800b026:	2100      	movcc	r1, #0
 800b028:	440b      	add	r3, r1
 800b02a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b02e:	b191      	cbz	r1, 800b056 <__mdiff+0x11a>
 800b030:	6117      	str	r7, [r2, #16]
 800b032:	e79d      	b.n	800af70 <__mdiff+0x34>
 800b034:	f854 1b04 	ldr.w	r1, [r4], #4
 800b038:	46e6      	mov	lr, ip
 800b03a:	0c08      	lsrs	r0, r1, #16
 800b03c:	fa1c fc81 	uxtah	ip, ip, r1
 800b040:	4471      	add	r1, lr
 800b042:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b046:	b289      	uxth	r1, r1
 800b048:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b04c:	f846 1b04 	str.w	r1, [r6], #4
 800b050:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b054:	e7dd      	b.n	800b012 <__mdiff+0xd6>
 800b056:	3f01      	subs	r7, #1
 800b058:	e7e7      	b.n	800b02a <__mdiff+0xee>
 800b05a:	bf00      	nop
 800b05c:	0800bd30 	.word	0x0800bd30
 800b060:	0800bd41 	.word	0x0800bd41

0800b064 <__d2b>:
 800b064:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b068:	460f      	mov	r7, r1
 800b06a:	2101      	movs	r1, #1
 800b06c:	ec59 8b10 	vmov	r8, r9, d0
 800b070:	4616      	mov	r6, r2
 800b072:	f7ff fccd 	bl	800aa10 <_Balloc>
 800b076:	4604      	mov	r4, r0
 800b078:	b930      	cbnz	r0, 800b088 <__d2b+0x24>
 800b07a:	4602      	mov	r2, r0
 800b07c:	4b23      	ldr	r3, [pc, #140]	@ (800b10c <__d2b+0xa8>)
 800b07e:	4824      	ldr	r0, [pc, #144]	@ (800b110 <__d2b+0xac>)
 800b080:	f240 310f 	movw	r1, #783	@ 0x30f
 800b084:	f000 fa82 	bl	800b58c <__assert_func>
 800b088:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b08c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b090:	b10d      	cbz	r5, 800b096 <__d2b+0x32>
 800b092:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b096:	9301      	str	r3, [sp, #4]
 800b098:	f1b8 0300 	subs.w	r3, r8, #0
 800b09c:	d023      	beq.n	800b0e6 <__d2b+0x82>
 800b09e:	4668      	mov	r0, sp
 800b0a0:	9300      	str	r3, [sp, #0]
 800b0a2:	f7ff fd7c 	bl	800ab9e <__lo0bits>
 800b0a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b0aa:	b1d0      	cbz	r0, 800b0e2 <__d2b+0x7e>
 800b0ac:	f1c0 0320 	rsb	r3, r0, #32
 800b0b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b0b4:	430b      	orrs	r3, r1
 800b0b6:	40c2      	lsrs	r2, r0
 800b0b8:	6163      	str	r3, [r4, #20]
 800b0ba:	9201      	str	r2, [sp, #4]
 800b0bc:	9b01      	ldr	r3, [sp, #4]
 800b0be:	61a3      	str	r3, [r4, #24]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	bf0c      	ite	eq
 800b0c4:	2201      	moveq	r2, #1
 800b0c6:	2202      	movne	r2, #2
 800b0c8:	6122      	str	r2, [r4, #16]
 800b0ca:	b1a5      	cbz	r5, 800b0f6 <__d2b+0x92>
 800b0cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b0d0:	4405      	add	r5, r0
 800b0d2:	603d      	str	r5, [r7, #0]
 800b0d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b0d8:	6030      	str	r0, [r6, #0]
 800b0da:	4620      	mov	r0, r4
 800b0dc:	b003      	add	sp, #12
 800b0de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0e2:	6161      	str	r1, [r4, #20]
 800b0e4:	e7ea      	b.n	800b0bc <__d2b+0x58>
 800b0e6:	a801      	add	r0, sp, #4
 800b0e8:	f7ff fd59 	bl	800ab9e <__lo0bits>
 800b0ec:	9b01      	ldr	r3, [sp, #4]
 800b0ee:	6163      	str	r3, [r4, #20]
 800b0f0:	3020      	adds	r0, #32
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	e7e8      	b.n	800b0c8 <__d2b+0x64>
 800b0f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b0fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b0fe:	6038      	str	r0, [r7, #0]
 800b100:	6918      	ldr	r0, [r3, #16]
 800b102:	f7ff fd2d 	bl	800ab60 <__hi0bits>
 800b106:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b10a:	e7e5      	b.n	800b0d8 <__d2b+0x74>
 800b10c:	0800bd30 	.word	0x0800bd30
 800b110:	0800bd41 	.word	0x0800bd41

0800b114 <__ssputs_r>:
 800b114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b118:	688e      	ldr	r6, [r1, #8]
 800b11a:	461f      	mov	r7, r3
 800b11c:	42be      	cmp	r6, r7
 800b11e:	680b      	ldr	r3, [r1, #0]
 800b120:	4682      	mov	sl, r0
 800b122:	460c      	mov	r4, r1
 800b124:	4690      	mov	r8, r2
 800b126:	d82d      	bhi.n	800b184 <__ssputs_r+0x70>
 800b128:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b12c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b130:	d026      	beq.n	800b180 <__ssputs_r+0x6c>
 800b132:	6965      	ldr	r5, [r4, #20]
 800b134:	6909      	ldr	r1, [r1, #16]
 800b136:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b13a:	eba3 0901 	sub.w	r9, r3, r1
 800b13e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b142:	1c7b      	adds	r3, r7, #1
 800b144:	444b      	add	r3, r9
 800b146:	106d      	asrs	r5, r5, #1
 800b148:	429d      	cmp	r5, r3
 800b14a:	bf38      	it	cc
 800b14c:	461d      	movcc	r5, r3
 800b14e:	0553      	lsls	r3, r2, #21
 800b150:	d527      	bpl.n	800b1a2 <__ssputs_r+0x8e>
 800b152:	4629      	mov	r1, r5
 800b154:	f7ff fbd0 	bl	800a8f8 <_malloc_r>
 800b158:	4606      	mov	r6, r0
 800b15a:	b360      	cbz	r0, 800b1b6 <__ssputs_r+0xa2>
 800b15c:	6921      	ldr	r1, [r4, #16]
 800b15e:	464a      	mov	r2, r9
 800b160:	f000 fa06 	bl	800b570 <memcpy>
 800b164:	89a3      	ldrh	r3, [r4, #12]
 800b166:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b16a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b16e:	81a3      	strh	r3, [r4, #12]
 800b170:	6126      	str	r6, [r4, #16]
 800b172:	6165      	str	r5, [r4, #20]
 800b174:	444e      	add	r6, r9
 800b176:	eba5 0509 	sub.w	r5, r5, r9
 800b17a:	6026      	str	r6, [r4, #0]
 800b17c:	60a5      	str	r5, [r4, #8]
 800b17e:	463e      	mov	r6, r7
 800b180:	42be      	cmp	r6, r7
 800b182:	d900      	bls.n	800b186 <__ssputs_r+0x72>
 800b184:	463e      	mov	r6, r7
 800b186:	6820      	ldr	r0, [r4, #0]
 800b188:	4632      	mov	r2, r6
 800b18a:	4641      	mov	r1, r8
 800b18c:	f000 f9c6 	bl	800b51c <memmove>
 800b190:	68a3      	ldr	r3, [r4, #8]
 800b192:	1b9b      	subs	r3, r3, r6
 800b194:	60a3      	str	r3, [r4, #8]
 800b196:	6823      	ldr	r3, [r4, #0]
 800b198:	4433      	add	r3, r6
 800b19a:	6023      	str	r3, [r4, #0]
 800b19c:	2000      	movs	r0, #0
 800b19e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1a2:	462a      	mov	r2, r5
 800b1a4:	f000 fa36 	bl	800b614 <_realloc_r>
 800b1a8:	4606      	mov	r6, r0
 800b1aa:	2800      	cmp	r0, #0
 800b1ac:	d1e0      	bne.n	800b170 <__ssputs_r+0x5c>
 800b1ae:	6921      	ldr	r1, [r4, #16]
 800b1b0:	4650      	mov	r0, sl
 800b1b2:	f7ff fb2d 	bl	800a810 <_free_r>
 800b1b6:	230c      	movs	r3, #12
 800b1b8:	f8ca 3000 	str.w	r3, [sl]
 800b1bc:	89a3      	ldrh	r3, [r4, #12]
 800b1be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1c2:	81a3      	strh	r3, [r4, #12]
 800b1c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c8:	e7e9      	b.n	800b19e <__ssputs_r+0x8a>
	...

0800b1cc <_svfiprintf_r>:
 800b1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d0:	4698      	mov	r8, r3
 800b1d2:	898b      	ldrh	r3, [r1, #12]
 800b1d4:	061b      	lsls	r3, r3, #24
 800b1d6:	b09d      	sub	sp, #116	@ 0x74
 800b1d8:	4607      	mov	r7, r0
 800b1da:	460d      	mov	r5, r1
 800b1dc:	4614      	mov	r4, r2
 800b1de:	d510      	bpl.n	800b202 <_svfiprintf_r+0x36>
 800b1e0:	690b      	ldr	r3, [r1, #16]
 800b1e2:	b973      	cbnz	r3, 800b202 <_svfiprintf_r+0x36>
 800b1e4:	2140      	movs	r1, #64	@ 0x40
 800b1e6:	f7ff fb87 	bl	800a8f8 <_malloc_r>
 800b1ea:	6028      	str	r0, [r5, #0]
 800b1ec:	6128      	str	r0, [r5, #16]
 800b1ee:	b930      	cbnz	r0, 800b1fe <_svfiprintf_r+0x32>
 800b1f0:	230c      	movs	r3, #12
 800b1f2:	603b      	str	r3, [r7, #0]
 800b1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f8:	b01d      	add	sp, #116	@ 0x74
 800b1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1fe:	2340      	movs	r3, #64	@ 0x40
 800b200:	616b      	str	r3, [r5, #20]
 800b202:	2300      	movs	r3, #0
 800b204:	9309      	str	r3, [sp, #36]	@ 0x24
 800b206:	2320      	movs	r3, #32
 800b208:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b20c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b210:	2330      	movs	r3, #48	@ 0x30
 800b212:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b3b0 <_svfiprintf_r+0x1e4>
 800b216:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b21a:	f04f 0901 	mov.w	r9, #1
 800b21e:	4623      	mov	r3, r4
 800b220:	469a      	mov	sl, r3
 800b222:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b226:	b10a      	cbz	r2, 800b22c <_svfiprintf_r+0x60>
 800b228:	2a25      	cmp	r2, #37	@ 0x25
 800b22a:	d1f9      	bne.n	800b220 <_svfiprintf_r+0x54>
 800b22c:	ebba 0b04 	subs.w	fp, sl, r4
 800b230:	d00b      	beq.n	800b24a <_svfiprintf_r+0x7e>
 800b232:	465b      	mov	r3, fp
 800b234:	4622      	mov	r2, r4
 800b236:	4629      	mov	r1, r5
 800b238:	4638      	mov	r0, r7
 800b23a:	f7ff ff6b 	bl	800b114 <__ssputs_r>
 800b23e:	3001      	adds	r0, #1
 800b240:	f000 80a7 	beq.w	800b392 <_svfiprintf_r+0x1c6>
 800b244:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b246:	445a      	add	r2, fp
 800b248:	9209      	str	r2, [sp, #36]	@ 0x24
 800b24a:	f89a 3000 	ldrb.w	r3, [sl]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	f000 809f 	beq.w	800b392 <_svfiprintf_r+0x1c6>
 800b254:	2300      	movs	r3, #0
 800b256:	f04f 32ff 	mov.w	r2, #4294967295
 800b25a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b25e:	f10a 0a01 	add.w	sl, sl, #1
 800b262:	9304      	str	r3, [sp, #16]
 800b264:	9307      	str	r3, [sp, #28]
 800b266:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b26a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b26c:	4654      	mov	r4, sl
 800b26e:	2205      	movs	r2, #5
 800b270:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b274:	484e      	ldr	r0, [pc, #312]	@ (800b3b0 <_svfiprintf_r+0x1e4>)
 800b276:	f7f4 ffb3 	bl	80001e0 <memchr>
 800b27a:	9a04      	ldr	r2, [sp, #16]
 800b27c:	b9d8      	cbnz	r0, 800b2b6 <_svfiprintf_r+0xea>
 800b27e:	06d0      	lsls	r0, r2, #27
 800b280:	bf44      	itt	mi
 800b282:	2320      	movmi	r3, #32
 800b284:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b288:	0711      	lsls	r1, r2, #28
 800b28a:	bf44      	itt	mi
 800b28c:	232b      	movmi	r3, #43	@ 0x2b
 800b28e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b292:	f89a 3000 	ldrb.w	r3, [sl]
 800b296:	2b2a      	cmp	r3, #42	@ 0x2a
 800b298:	d015      	beq.n	800b2c6 <_svfiprintf_r+0xfa>
 800b29a:	9a07      	ldr	r2, [sp, #28]
 800b29c:	4654      	mov	r4, sl
 800b29e:	2000      	movs	r0, #0
 800b2a0:	f04f 0c0a 	mov.w	ip, #10
 800b2a4:	4621      	mov	r1, r4
 800b2a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2aa:	3b30      	subs	r3, #48	@ 0x30
 800b2ac:	2b09      	cmp	r3, #9
 800b2ae:	d94b      	bls.n	800b348 <_svfiprintf_r+0x17c>
 800b2b0:	b1b0      	cbz	r0, 800b2e0 <_svfiprintf_r+0x114>
 800b2b2:	9207      	str	r2, [sp, #28]
 800b2b4:	e014      	b.n	800b2e0 <_svfiprintf_r+0x114>
 800b2b6:	eba0 0308 	sub.w	r3, r0, r8
 800b2ba:	fa09 f303 	lsl.w	r3, r9, r3
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	9304      	str	r3, [sp, #16]
 800b2c2:	46a2      	mov	sl, r4
 800b2c4:	e7d2      	b.n	800b26c <_svfiprintf_r+0xa0>
 800b2c6:	9b03      	ldr	r3, [sp, #12]
 800b2c8:	1d19      	adds	r1, r3, #4
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	9103      	str	r1, [sp, #12]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	bfbb      	ittet	lt
 800b2d2:	425b      	neglt	r3, r3
 800b2d4:	f042 0202 	orrlt.w	r2, r2, #2
 800b2d8:	9307      	strge	r3, [sp, #28]
 800b2da:	9307      	strlt	r3, [sp, #28]
 800b2dc:	bfb8      	it	lt
 800b2de:	9204      	strlt	r2, [sp, #16]
 800b2e0:	7823      	ldrb	r3, [r4, #0]
 800b2e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2e4:	d10a      	bne.n	800b2fc <_svfiprintf_r+0x130>
 800b2e6:	7863      	ldrb	r3, [r4, #1]
 800b2e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2ea:	d132      	bne.n	800b352 <_svfiprintf_r+0x186>
 800b2ec:	9b03      	ldr	r3, [sp, #12]
 800b2ee:	1d1a      	adds	r2, r3, #4
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	9203      	str	r2, [sp, #12]
 800b2f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2f8:	3402      	adds	r4, #2
 800b2fa:	9305      	str	r3, [sp, #20]
 800b2fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b3c0 <_svfiprintf_r+0x1f4>
 800b300:	7821      	ldrb	r1, [r4, #0]
 800b302:	2203      	movs	r2, #3
 800b304:	4650      	mov	r0, sl
 800b306:	f7f4 ff6b 	bl	80001e0 <memchr>
 800b30a:	b138      	cbz	r0, 800b31c <_svfiprintf_r+0x150>
 800b30c:	9b04      	ldr	r3, [sp, #16]
 800b30e:	eba0 000a 	sub.w	r0, r0, sl
 800b312:	2240      	movs	r2, #64	@ 0x40
 800b314:	4082      	lsls	r2, r0
 800b316:	4313      	orrs	r3, r2
 800b318:	3401      	adds	r4, #1
 800b31a:	9304      	str	r3, [sp, #16]
 800b31c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b320:	4824      	ldr	r0, [pc, #144]	@ (800b3b4 <_svfiprintf_r+0x1e8>)
 800b322:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b326:	2206      	movs	r2, #6
 800b328:	f7f4 ff5a 	bl	80001e0 <memchr>
 800b32c:	2800      	cmp	r0, #0
 800b32e:	d036      	beq.n	800b39e <_svfiprintf_r+0x1d2>
 800b330:	4b21      	ldr	r3, [pc, #132]	@ (800b3b8 <_svfiprintf_r+0x1ec>)
 800b332:	bb1b      	cbnz	r3, 800b37c <_svfiprintf_r+0x1b0>
 800b334:	9b03      	ldr	r3, [sp, #12]
 800b336:	3307      	adds	r3, #7
 800b338:	f023 0307 	bic.w	r3, r3, #7
 800b33c:	3308      	adds	r3, #8
 800b33e:	9303      	str	r3, [sp, #12]
 800b340:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b342:	4433      	add	r3, r6
 800b344:	9309      	str	r3, [sp, #36]	@ 0x24
 800b346:	e76a      	b.n	800b21e <_svfiprintf_r+0x52>
 800b348:	fb0c 3202 	mla	r2, ip, r2, r3
 800b34c:	460c      	mov	r4, r1
 800b34e:	2001      	movs	r0, #1
 800b350:	e7a8      	b.n	800b2a4 <_svfiprintf_r+0xd8>
 800b352:	2300      	movs	r3, #0
 800b354:	3401      	adds	r4, #1
 800b356:	9305      	str	r3, [sp, #20]
 800b358:	4619      	mov	r1, r3
 800b35a:	f04f 0c0a 	mov.w	ip, #10
 800b35e:	4620      	mov	r0, r4
 800b360:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b364:	3a30      	subs	r2, #48	@ 0x30
 800b366:	2a09      	cmp	r2, #9
 800b368:	d903      	bls.n	800b372 <_svfiprintf_r+0x1a6>
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d0c6      	beq.n	800b2fc <_svfiprintf_r+0x130>
 800b36e:	9105      	str	r1, [sp, #20]
 800b370:	e7c4      	b.n	800b2fc <_svfiprintf_r+0x130>
 800b372:	fb0c 2101 	mla	r1, ip, r1, r2
 800b376:	4604      	mov	r4, r0
 800b378:	2301      	movs	r3, #1
 800b37a:	e7f0      	b.n	800b35e <_svfiprintf_r+0x192>
 800b37c:	ab03      	add	r3, sp, #12
 800b37e:	9300      	str	r3, [sp, #0]
 800b380:	462a      	mov	r2, r5
 800b382:	4b0e      	ldr	r3, [pc, #56]	@ (800b3bc <_svfiprintf_r+0x1f0>)
 800b384:	a904      	add	r1, sp, #16
 800b386:	4638      	mov	r0, r7
 800b388:	f7fd fe98 	bl	80090bc <_printf_float>
 800b38c:	1c42      	adds	r2, r0, #1
 800b38e:	4606      	mov	r6, r0
 800b390:	d1d6      	bne.n	800b340 <_svfiprintf_r+0x174>
 800b392:	89ab      	ldrh	r3, [r5, #12]
 800b394:	065b      	lsls	r3, r3, #25
 800b396:	f53f af2d 	bmi.w	800b1f4 <_svfiprintf_r+0x28>
 800b39a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b39c:	e72c      	b.n	800b1f8 <_svfiprintf_r+0x2c>
 800b39e:	ab03      	add	r3, sp, #12
 800b3a0:	9300      	str	r3, [sp, #0]
 800b3a2:	462a      	mov	r2, r5
 800b3a4:	4b05      	ldr	r3, [pc, #20]	@ (800b3bc <_svfiprintf_r+0x1f0>)
 800b3a6:	a904      	add	r1, sp, #16
 800b3a8:	4638      	mov	r0, r7
 800b3aa:	f7fe f91f 	bl	80095ec <_printf_i>
 800b3ae:	e7ed      	b.n	800b38c <_svfiprintf_r+0x1c0>
 800b3b0:	0800be98 	.word	0x0800be98
 800b3b4:	0800bea2 	.word	0x0800bea2
 800b3b8:	080090bd 	.word	0x080090bd
 800b3bc:	0800b115 	.word	0x0800b115
 800b3c0:	0800be9e 	.word	0x0800be9e

0800b3c4 <__sflush_r>:
 800b3c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3cc:	0716      	lsls	r6, r2, #28
 800b3ce:	4605      	mov	r5, r0
 800b3d0:	460c      	mov	r4, r1
 800b3d2:	d454      	bmi.n	800b47e <__sflush_r+0xba>
 800b3d4:	684b      	ldr	r3, [r1, #4]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	dc02      	bgt.n	800b3e0 <__sflush_r+0x1c>
 800b3da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	dd48      	ble.n	800b472 <__sflush_r+0xae>
 800b3e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b3e2:	2e00      	cmp	r6, #0
 800b3e4:	d045      	beq.n	800b472 <__sflush_r+0xae>
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b3ec:	682f      	ldr	r7, [r5, #0]
 800b3ee:	6a21      	ldr	r1, [r4, #32]
 800b3f0:	602b      	str	r3, [r5, #0]
 800b3f2:	d030      	beq.n	800b456 <__sflush_r+0x92>
 800b3f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b3f6:	89a3      	ldrh	r3, [r4, #12]
 800b3f8:	0759      	lsls	r1, r3, #29
 800b3fa:	d505      	bpl.n	800b408 <__sflush_r+0x44>
 800b3fc:	6863      	ldr	r3, [r4, #4]
 800b3fe:	1ad2      	subs	r2, r2, r3
 800b400:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b402:	b10b      	cbz	r3, 800b408 <__sflush_r+0x44>
 800b404:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b406:	1ad2      	subs	r2, r2, r3
 800b408:	2300      	movs	r3, #0
 800b40a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b40c:	6a21      	ldr	r1, [r4, #32]
 800b40e:	4628      	mov	r0, r5
 800b410:	47b0      	blx	r6
 800b412:	1c43      	adds	r3, r0, #1
 800b414:	89a3      	ldrh	r3, [r4, #12]
 800b416:	d106      	bne.n	800b426 <__sflush_r+0x62>
 800b418:	6829      	ldr	r1, [r5, #0]
 800b41a:	291d      	cmp	r1, #29
 800b41c:	d82b      	bhi.n	800b476 <__sflush_r+0xb2>
 800b41e:	4a2a      	ldr	r2, [pc, #168]	@ (800b4c8 <__sflush_r+0x104>)
 800b420:	410a      	asrs	r2, r1
 800b422:	07d6      	lsls	r6, r2, #31
 800b424:	d427      	bmi.n	800b476 <__sflush_r+0xb2>
 800b426:	2200      	movs	r2, #0
 800b428:	6062      	str	r2, [r4, #4]
 800b42a:	04d9      	lsls	r1, r3, #19
 800b42c:	6922      	ldr	r2, [r4, #16]
 800b42e:	6022      	str	r2, [r4, #0]
 800b430:	d504      	bpl.n	800b43c <__sflush_r+0x78>
 800b432:	1c42      	adds	r2, r0, #1
 800b434:	d101      	bne.n	800b43a <__sflush_r+0x76>
 800b436:	682b      	ldr	r3, [r5, #0]
 800b438:	b903      	cbnz	r3, 800b43c <__sflush_r+0x78>
 800b43a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b43c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b43e:	602f      	str	r7, [r5, #0]
 800b440:	b1b9      	cbz	r1, 800b472 <__sflush_r+0xae>
 800b442:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b446:	4299      	cmp	r1, r3
 800b448:	d002      	beq.n	800b450 <__sflush_r+0x8c>
 800b44a:	4628      	mov	r0, r5
 800b44c:	f7ff f9e0 	bl	800a810 <_free_r>
 800b450:	2300      	movs	r3, #0
 800b452:	6363      	str	r3, [r4, #52]	@ 0x34
 800b454:	e00d      	b.n	800b472 <__sflush_r+0xae>
 800b456:	2301      	movs	r3, #1
 800b458:	4628      	mov	r0, r5
 800b45a:	47b0      	blx	r6
 800b45c:	4602      	mov	r2, r0
 800b45e:	1c50      	adds	r0, r2, #1
 800b460:	d1c9      	bne.n	800b3f6 <__sflush_r+0x32>
 800b462:	682b      	ldr	r3, [r5, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d0c6      	beq.n	800b3f6 <__sflush_r+0x32>
 800b468:	2b1d      	cmp	r3, #29
 800b46a:	d001      	beq.n	800b470 <__sflush_r+0xac>
 800b46c:	2b16      	cmp	r3, #22
 800b46e:	d11e      	bne.n	800b4ae <__sflush_r+0xea>
 800b470:	602f      	str	r7, [r5, #0]
 800b472:	2000      	movs	r0, #0
 800b474:	e022      	b.n	800b4bc <__sflush_r+0xf8>
 800b476:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b47a:	b21b      	sxth	r3, r3
 800b47c:	e01b      	b.n	800b4b6 <__sflush_r+0xf2>
 800b47e:	690f      	ldr	r7, [r1, #16]
 800b480:	2f00      	cmp	r7, #0
 800b482:	d0f6      	beq.n	800b472 <__sflush_r+0xae>
 800b484:	0793      	lsls	r3, r2, #30
 800b486:	680e      	ldr	r6, [r1, #0]
 800b488:	bf08      	it	eq
 800b48a:	694b      	ldreq	r3, [r1, #20]
 800b48c:	600f      	str	r7, [r1, #0]
 800b48e:	bf18      	it	ne
 800b490:	2300      	movne	r3, #0
 800b492:	eba6 0807 	sub.w	r8, r6, r7
 800b496:	608b      	str	r3, [r1, #8]
 800b498:	f1b8 0f00 	cmp.w	r8, #0
 800b49c:	dde9      	ble.n	800b472 <__sflush_r+0xae>
 800b49e:	6a21      	ldr	r1, [r4, #32]
 800b4a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b4a2:	4643      	mov	r3, r8
 800b4a4:	463a      	mov	r2, r7
 800b4a6:	4628      	mov	r0, r5
 800b4a8:	47b0      	blx	r6
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	dc08      	bgt.n	800b4c0 <__sflush_r+0xfc>
 800b4ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4b6:	81a3      	strh	r3, [r4, #12]
 800b4b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4c0:	4407      	add	r7, r0
 800b4c2:	eba8 0800 	sub.w	r8, r8, r0
 800b4c6:	e7e7      	b.n	800b498 <__sflush_r+0xd4>
 800b4c8:	dfbffffe 	.word	0xdfbffffe

0800b4cc <_fflush_r>:
 800b4cc:	b538      	push	{r3, r4, r5, lr}
 800b4ce:	690b      	ldr	r3, [r1, #16]
 800b4d0:	4605      	mov	r5, r0
 800b4d2:	460c      	mov	r4, r1
 800b4d4:	b913      	cbnz	r3, 800b4dc <_fflush_r+0x10>
 800b4d6:	2500      	movs	r5, #0
 800b4d8:	4628      	mov	r0, r5
 800b4da:	bd38      	pop	{r3, r4, r5, pc}
 800b4dc:	b118      	cbz	r0, 800b4e6 <_fflush_r+0x1a>
 800b4de:	6a03      	ldr	r3, [r0, #32]
 800b4e0:	b90b      	cbnz	r3, 800b4e6 <_fflush_r+0x1a>
 800b4e2:	f7fe fa2f 	bl	8009944 <__sinit>
 800b4e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d0f3      	beq.n	800b4d6 <_fflush_r+0xa>
 800b4ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b4f0:	07d0      	lsls	r0, r2, #31
 800b4f2:	d404      	bmi.n	800b4fe <_fflush_r+0x32>
 800b4f4:	0599      	lsls	r1, r3, #22
 800b4f6:	d402      	bmi.n	800b4fe <_fflush_r+0x32>
 800b4f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4fa:	f7fe fb3a 	bl	8009b72 <__retarget_lock_acquire_recursive>
 800b4fe:	4628      	mov	r0, r5
 800b500:	4621      	mov	r1, r4
 800b502:	f7ff ff5f 	bl	800b3c4 <__sflush_r>
 800b506:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b508:	07da      	lsls	r2, r3, #31
 800b50a:	4605      	mov	r5, r0
 800b50c:	d4e4      	bmi.n	800b4d8 <_fflush_r+0xc>
 800b50e:	89a3      	ldrh	r3, [r4, #12]
 800b510:	059b      	lsls	r3, r3, #22
 800b512:	d4e1      	bmi.n	800b4d8 <_fflush_r+0xc>
 800b514:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b516:	f7fe fb2d 	bl	8009b74 <__retarget_lock_release_recursive>
 800b51a:	e7dd      	b.n	800b4d8 <_fflush_r+0xc>

0800b51c <memmove>:
 800b51c:	4288      	cmp	r0, r1
 800b51e:	b510      	push	{r4, lr}
 800b520:	eb01 0402 	add.w	r4, r1, r2
 800b524:	d902      	bls.n	800b52c <memmove+0x10>
 800b526:	4284      	cmp	r4, r0
 800b528:	4623      	mov	r3, r4
 800b52a:	d807      	bhi.n	800b53c <memmove+0x20>
 800b52c:	1e43      	subs	r3, r0, #1
 800b52e:	42a1      	cmp	r1, r4
 800b530:	d008      	beq.n	800b544 <memmove+0x28>
 800b532:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b536:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b53a:	e7f8      	b.n	800b52e <memmove+0x12>
 800b53c:	4402      	add	r2, r0
 800b53e:	4601      	mov	r1, r0
 800b540:	428a      	cmp	r2, r1
 800b542:	d100      	bne.n	800b546 <memmove+0x2a>
 800b544:	bd10      	pop	{r4, pc}
 800b546:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b54a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b54e:	e7f7      	b.n	800b540 <memmove+0x24>

0800b550 <_sbrk_r>:
 800b550:	b538      	push	{r3, r4, r5, lr}
 800b552:	4d06      	ldr	r5, [pc, #24]	@ (800b56c <_sbrk_r+0x1c>)
 800b554:	2300      	movs	r3, #0
 800b556:	4604      	mov	r4, r0
 800b558:	4608      	mov	r0, r1
 800b55a:	602b      	str	r3, [r5, #0]
 800b55c:	f7f6 f9dc 	bl	8001918 <_sbrk>
 800b560:	1c43      	adds	r3, r0, #1
 800b562:	d102      	bne.n	800b56a <_sbrk_r+0x1a>
 800b564:	682b      	ldr	r3, [r5, #0]
 800b566:	b103      	cbz	r3, 800b56a <_sbrk_r+0x1a>
 800b568:	6023      	str	r3, [r4, #0]
 800b56a:	bd38      	pop	{r3, r4, r5, pc}
 800b56c:	20002120 	.word	0x20002120

0800b570 <memcpy>:
 800b570:	440a      	add	r2, r1
 800b572:	4291      	cmp	r1, r2
 800b574:	f100 33ff 	add.w	r3, r0, #4294967295
 800b578:	d100      	bne.n	800b57c <memcpy+0xc>
 800b57a:	4770      	bx	lr
 800b57c:	b510      	push	{r4, lr}
 800b57e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b582:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b586:	4291      	cmp	r1, r2
 800b588:	d1f9      	bne.n	800b57e <memcpy+0xe>
 800b58a:	bd10      	pop	{r4, pc}

0800b58c <__assert_func>:
 800b58c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b58e:	4614      	mov	r4, r2
 800b590:	461a      	mov	r2, r3
 800b592:	4b09      	ldr	r3, [pc, #36]	@ (800b5b8 <__assert_func+0x2c>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	4605      	mov	r5, r0
 800b598:	68d8      	ldr	r0, [r3, #12]
 800b59a:	b954      	cbnz	r4, 800b5b2 <__assert_func+0x26>
 800b59c:	4b07      	ldr	r3, [pc, #28]	@ (800b5bc <__assert_func+0x30>)
 800b59e:	461c      	mov	r4, r3
 800b5a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b5a4:	9100      	str	r1, [sp, #0]
 800b5a6:	462b      	mov	r3, r5
 800b5a8:	4905      	ldr	r1, [pc, #20]	@ (800b5c0 <__assert_func+0x34>)
 800b5aa:	f000 f86f 	bl	800b68c <fiprintf>
 800b5ae:	f000 f87f 	bl	800b6b0 <abort>
 800b5b2:	4b04      	ldr	r3, [pc, #16]	@ (800b5c4 <__assert_func+0x38>)
 800b5b4:	e7f4      	b.n	800b5a0 <__assert_func+0x14>
 800b5b6:	bf00      	nop
 800b5b8:	20000108 	.word	0x20000108
 800b5bc:	0800beee 	.word	0x0800beee
 800b5c0:	0800bec0 	.word	0x0800bec0
 800b5c4:	0800beb3 	.word	0x0800beb3

0800b5c8 <_calloc_r>:
 800b5c8:	b570      	push	{r4, r5, r6, lr}
 800b5ca:	fba1 5402 	umull	r5, r4, r1, r2
 800b5ce:	b93c      	cbnz	r4, 800b5e0 <_calloc_r+0x18>
 800b5d0:	4629      	mov	r1, r5
 800b5d2:	f7ff f991 	bl	800a8f8 <_malloc_r>
 800b5d6:	4606      	mov	r6, r0
 800b5d8:	b928      	cbnz	r0, 800b5e6 <_calloc_r+0x1e>
 800b5da:	2600      	movs	r6, #0
 800b5dc:	4630      	mov	r0, r6
 800b5de:	bd70      	pop	{r4, r5, r6, pc}
 800b5e0:	220c      	movs	r2, #12
 800b5e2:	6002      	str	r2, [r0, #0]
 800b5e4:	e7f9      	b.n	800b5da <_calloc_r+0x12>
 800b5e6:	462a      	mov	r2, r5
 800b5e8:	4621      	mov	r1, r4
 800b5ea:	f7fe fa44 	bl	8009a76 <memset>
 800b5ee:	e7f5      	b.n	800b5dc <_calloc_r+0x14>

0800b5f0 <__ascii_mbtowc>:
 800b5f0:	b082      	sub	sp, #8
 800b5f2:	b901      	cbnz	r1, 800b5f6 <__ascii_mbtowc+0x6>
 800b5f4:	a901      	add	r1, sp, #4
 800b5f6:	b142      	cbz	r2, 800b60a <__ascii_mbtowc+0x1a>
 800b5f8:	b14b      	cbz	r3, 800b60e <__ascii_mbtowc+0x1e>
 800b5fa:	7813      	ldrb	r3, [r2, #0]
 800b5fc:	600b      	str	r3, [r1, #0]
 800b5fe:	7812      	ldrb	r2, [r2, #0]
 800b600:	1e10      	subs	r0, r2, #0
 800b602:	bf18      	it	ne
 800b604:	2001      	movne	r0, #1
 800b606:	b002      	add	sp, #8
 800b608:	4770      	bx	lr
 800b60a:	4610      	mov	r0, r2
 800b60c:	e7fb      	b.n	800b606 <__ascii_mbtowc+0x16>
 800b60e:	f06f 0001 	mvn.w	r0, #1
 800b612:	e7f8      	b.n	800b606 <__ascii_mbtowc+0x16>

0800b614 <_realloc_r>:
 800b614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b618:	4680      	mov	r8, r0
 800b61a:	4615      	mov	r5, r2
 800b61c:	460c      	mov	r4, r1
 800b61e:	b921      	cbnz	r1, 800b62a <_realloc_r+0x16>
 800b620:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b624:	4611      	mov	r1, r2
 800b626:	f7ff b967 	b.w	800a8f8 <_malloc_r>
 800b62a:	b92a      	cbnz	r2, 800b638 <_realloc_r+0x24>
 800b62c:	f7ff f8f0 	bl	800a810 <_free_r>
 800b630:	2400      	movs	r4, #0
 800b632:	4620      	mov	r0, r4
 800b634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b638:	f000 f841 	bl	800b6be <_malloc_usable_size_r>
 800b63c:	4285      	cmp	r5, r0
 800b63e:	4606      	mov	r6, r0
 800b640:	d802      	bhi.n	800b648 <_realloc_r+0x34>
 800b642:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b646:	d8f4      	bhi.n	800b632 <_realloc_r+0x1e>
 800b648:	4629      	mov	r1, r5
 800b64a:	4640      	mov	r0, r8
 800b64c:	f7ff f954 	bl	800a8f8 <_malloc_r>
 800b650:	4607      	mov	r7, r0
 800b652:	2800      	cmp	r0, #0
 800b654:	d0ec      	beq.n	800b630 <_realloc_r+0x1c>
 800b656:	42b5      	cmp	r5, r6
 800b658:	462a      	mov	r2, r5
 800b65a:	4621      	mov	r1, r4
 800b65c:	bf28      	it	cs
 800b65e:	4632      	movcs	r2, r6
 800b660:	f7ff ff86 	bl	800b570 <memcpy>
 800b664:	4621      	mov	r1, r4
 800b666:	4640      	mov	r0, r8
 800b668:	f7ff f8d2 	bl	800a810 <_free_r>
 800b66c:	463c      	mov	r4, r7
 800b66e:	e7e0      	b.n	800b632 <_realloc_r+0x1e>

0800b670 <__ascii_wctomb>:
 800b670:	4603      	mov	r3, r0
 800b672:	4608      	mov	r0, r1
 800b674:	b141      	cbz	r1, 800b688 <__ascii_wctomb+0x18>
 800b676:	2aff      	cmp	r2, #255	@ 0xff
 800b678:	d904      	bls.n	800b684 <__ascii_wctomb+0x14>
 800b67a:	228a      	movs	r2, #138	@ 0x8a
 800b67c:	601a      	str	r2, [r3, #0]
 800b67e:	f04f 30ff 	mov.w	r0, #4294967295
 800b682:	4770      	bx	lr
 800b684:	700a      	strb	r2, [r1, #0]
 800b686:	2001      	movs	r0, #1
 800b688:	4770      	bx	lr
	...

0800b68c <fiprintf>:
 800b68c:	b40e      	push	{r1, r2, r3}
 800b68e:	b503      	push	{r0, r1, lr}
 800b690:	4601      	mov	r1, r0
 800b692:	ab03      	add	r3, sp, #12
 800b694:	4805      	ldr	r0, [pc, #20]	@ (800b6ac <fiprintf+0x20>)
 800b696:	f853 2b04 	ldr.w	r2, [r3], #4
 800b69a:	6800      	ldr	r0, [r0, #0]
 800b69c:	9301      	str	r3, [sp, #4]
 800b69e:	f000 f83f 	bl	800b720 <_vfiprintf_r>
 800b6a2:	b002      	add	sp, #8
 800b6a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6a8:	b003      	add	sp, #12
 800b6aa:	4770      	bx	lr
 800b6ac:	20000108 	.word	0x20000108

0800b6b0 <abort>:
 800b6b0:	b508      	push	{r3, lr}
 800b6b2:	2006      	movs	r0, #6
 800b6b4:	f000 fa08 	bl	800bac8 <raise>
 800b6b8:	2001      	movs	r0, #1
 800b6ba:	f7f6 f8b5 	bl	8001828 <_exit>

0800b6be <_malloc_usable_size_r>:
 800b6be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6c2:	1f18      	subs	r0, r3, #4
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	bfbc      	itt	lt
 800b6c8:	580b      	ldrlt	r3, [r1, r0]
 800b6ca:	18c0      	addlt	r0, r0, r3
 800b6cc:	4770      	bx	lr

0800b6ce <__sfputc_r>:
 800b6ce:	6893      	ldr	r3, [r2, #8]
 800b6d0:	3b01      	subs	r3, #1
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	b410      	push	{r4}
 800b6d6:	6093      	str	r3, [r2, #8]
 800b6d8:	da08      	bge.n	800b6ec <__sfputc_r+0x1e>
 800b6da:	6994      	ldr	r4, [r2, #24]
 800b6dc:	42a3      	cmp	r3, r4
 800b6de:	db01      	blt.n	800b6e4 <__sfputc_r+0x16>
 800b6e0:	290a      	cmp	r1, #10
 800b6e2:	d103      	bne.n	800b6ec <__sfputc_r+0x1e>
 800b6e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6e8:	f000 b932 	b.w	800b950 <__swbuf_r>
 800b6ec:	6813      	ldr	r3, [r2, #0]
 800b6ee:	1c58      	adds	r0, r3, #1
 800b6f0:	6010      	str	r0, [r2, #0]
 800b6f2:	7019      	strb	r1, [r3, #0]
 800b6f4:	4608      	mov	r0, r1
 800b6f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6fa:	4770      	bx	lr

0800b6fc <__sfputs_r>:
 800b6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6fe:	4606      	mov	r6, r0
 800b700:	460f      	mov	r7, r1
 800b702:	4614      	mov	r4, r2
 800b704:	18d5      	adds	r5, r2, r3
 800b706:	42ac      	cmp	r4, r5
 800b708:	d101      	bne.n	800b70e <__sfputs_r+0x12>
 800b70a:	2000      	movs	r0, #0
 800b70c:	e007      	b.n	800b71e <__sfputs_r+0x22>
 800b70e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b712:	463a      	mov	r2, r7
 800b714:	4630      	mov	r0, r6
 800b716:	f7ff ffda 	bl	800b6ce <__sfputc_r>
 800b71a:	1c43      	adds	r3, r0, #1
 800b71c:	d1f3      	bne.n	800b706 <__sfputs_r+0xa>
 800b71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b720 <_vfiprintf_r>:
 800b720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b724:	460d      	mov	r5, r1
 800b726:	b09d      	sub	sp, #116	@ 0x74
 800b728:	4614      	mov	r4, r2
 800b72a:	4698      	mov	r8, r3
 800b72c:	4606      	mov	r6, r0
 800b72e:	b118      	cbz	r0, 800b738 <_vfiprintf_r+0x18>
 800b730:	6a03      	ldr	r3, [r0, #32]
 800b732:	b90b      	cbnz	r3, 800b738 <_vfiprintf_r+0x18>
 800b734:	f7fe f906 	bl	8009944 <__sinit>
 800b738:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b73a:	07d9      	lsls	r1, r3, #31
 800b73c:	d405      	bmi.n	800b74a <_vfiprintf_r+0x2a>
 800b73e:	89ab      	ldrh	r3, [r5, #12]
 800b740:	059a      	lsls	r2, r3, #22
 800b742:	d402      	bmi.n	800b74a <_vfiprintf_r+0x2a>
 800b744:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b746:	f7fe fa14 	bl	8009b72 <__retarget_lock_acquire_recursive>
 800b74a:	89ab      	ldrh	r3, [r5, #12]
 800b74c:	071b      	lsls	r3, r3, #28
 800b74e:	d501      	bpl.n	800b754 <_vfiprintf_r+0x34>
 800b750:	692b      	ldr	r3, [r5, #16]
 800b752:	b99b      	cbnz	r3, 800b77c <_vfiprintf_r+0x5c>
 800b754:	4629      	mov	r1, r5
 800b756:	4630      	mov	r0, r6
 800b758:	f000 f938 	bl	800b9cc <__swsetup_r>
 800b75c:	b170      	cbz	r0, 800b77c <_vfiprintf_r+0x5c>
 800b75e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b760:	07dc      	lsls	r4, r3, #31
 800b762:	d504      	bpl.n	800b76e <_vfiprintf_r+0x4e>
 800b764:	f04f 30ff 	mov.w	r0, #4294967295
 800b768:	b01d      	add	sp, #116	@ 0x74
 800b76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b76e:	89ab      	ldrh	r3, [r5, #12]
 800b770:	0598      	lsls	r0, r3, #22
 800b772:	d4f7      	bmi.n	800b764 <_vfiprintf_r+0x44>
 800b774:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b776:	f7fe f9fd 	bl	8009b74 <__retarget_lock_release_recursive>
 800b77a:	e7f3      	b.n	800b764 <_vfiprintf_r+0x44>
 800b77c:	2300      	movs	r3, #0
 800b77e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b780:	2320      	movs	r3, #32
 800b782:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b786:	f8cd 800c 	str.w	r8, [sp, #12]
 800b78a:	2330      	movs	r3, #48	@ 0x30
 800b78c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b93c <_vfiprintf_r+0x21c>
 800b790:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b794:	f04f 0901 	mov.w	r9, #1
 800b798:	4623      	mov	r3, r4
 800b79a:	469a      	mov	sl, r3
 800b79c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7a0:	b10a      	cbz	r2, 800b7a6 <_vfiprintf_r+0x86>
 800b7a2:	2a25      	cmp	r2, #37	@ 0x25
 800b7a4:	d1f9      	bne.n	800b79a <_vfiprintf_r+0x7a>
 800b7a6:	ebba 0b04 	subs.w	fp, sl, r4
 800b7aa:	d00b      	beq.n	800b7c4 <_vfiprintf_r+0xa4>
 800b7ac:	465b      	mov	r3, fp
 800b7ae:	4622      	mov	r2, r4
 800b7b0:	4629      	mov	r1, r5
 800b7b2:	4630      	mov	r0, r6
 800b7b4:	f7ff ffa2 	bl	800b6fc <__sfputs_r>
 800b7b8:	3001      	adds	r0, #1
 800b7ba:	f000 80a7 	beq.w	800b90c <_vfiprintf_r+0x1ec>
 800b7be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7c0:	445a      	add	r2, fp
 800b7c2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7c4:	f89a 3000 	ldrb.w	r3, [sl]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	f000 809f 	beq.w	800b90c <_vfiprintf_r+0x1ec>
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b7d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7d8:	f10a 0a01 	add.w	sl, sl, #1
 800b7dc:	9304      	str	r3, [sp, #16]
 800b7de:	9307      	str	r3, [sp, #28]
 800b7e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b7e4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b7e6:	4654      	mov	r4, sl
 800b7e8:	2205      	movs	r2, #5
 800b7ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7ee:	4853      	ldr	r0, [pc, #332]	@ (800b93c <_vfiprintf_r+0x21c>)
 800b7f0:	f7f4 fcf6 	bl	80001e0 <memchr>
 800b7f4:	9a04      	ldr	r2, [sp, #16]
 800b7f6:	b9d8      	cbnz	r0, 800b830 <_vfiprintf_r+0x110>
 800b7f8:	06d1      	lsls	r1, r2, #27
 800b7fa:	bf44      	itt	mi
 800b7fc:	2320      	movmi	r3, #32
 800b7fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b802:	0713      	lsls	r3, r2, #28
 800b804:	bf44      	itt	mi
 800b806:	232b      	movmi	r3, #43	@ 0x2b
 800b808:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b80c:	f89a 3000 	ldrb.w	r3, [sl]
 800b810:	2b2a      	cmp	r3, #42	@ 0x2a
 800b812:	d015      	beq.n	800b840 <_vfiprintf_r+0x120>
 800b814:	9a07      	ldr	r2, [sp, #28]
 800b816:	4654      	mov	r4, sl
 800b818:	2000      	movs	r0, #0
 800b81a:	f04f 0c0a 	mov.w	ip, #10
 800b81e:	4621      	mov	r1, r4
 800b820:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b824:	3b30      	subs	r3, #48	@ 0x30
 800b826:	2b09      	cmp	r3, #9
 800b828:	d94b      	bls.n	800b8c2 <_vfiprintf_r+0x1a2>
 800b82a:	b1b0      	cbz	r0, 800b85a <_vfiprintf_r+0x13a>
 800b82c:	9207      	str	r2, [sp, #28]
 800b82e:	e014      	b.n	800b85a <_vfiprintf_r+0x13a>
 800b830:	eba0 0308 	sub.w	r3, r0, r8
 800b834:	fa09 f303 	lsl.w	r3, r9, r3
 800b838:	4313      	orrs	r3, r2
 800b83a:	9304      	str	r3, [sp, #16]
 800b83c:	46a2      	mov	sl, r4
 800b83e:	e7d2      	b.n	800b7e6 <_vfiprintf_r+0xc6>
 800b840:	9b03      	ldr	r3, [sp, #12]
 800b842:	1d19      	adds	r1, r3, #4
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	9103      	str	r1, [sp, #12]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	bfbb      	ittet	lt
 800b84c:	425b      	neglt	r3, r3
 800b84e:	f042 0202 	orrlt.w	r2, r2, #2
 800b852:	9307      	strge	r3, [sp, #28]
 800b854:	9307      	strlt	r3, [sp, #28]
 800b856:	bfb8      	it	lt
 800b858:	9204      	strlt	r2, [sp, #16]
 800b85a:	7823      	ldrb	r3, [r4, #0]
 800b85c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b85e:	d10a      	bne.n	800b876 <_vfiprintf_r+0x156>
 800b860:	7863      	ldrb	r3, [r4, #1]
 800b862:	2b2a      	cmp	r3, #42	@ 0x2a
 800b864:	d132      	bne.n	800b8cc <_vfiprintf_r+0x1ac>
 800b866:	9b03      	ldr	r3, [sp, #12]
 800b868:	1d1a      	adds	r2, r3, #4
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	9203      	str	r2, [sp, #12]
 800b86e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b872:	3402      	adds	r4, #2
 800b874:	9305      	str	r3, [sp, #20]
 800b876:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b94c <_vfiprintf_r+0x22c>
 800b87a:	7821      	ldrb	r1, [r4, #0]
 800b87c:	2203      	movs	r2, #3
 800b87e:	4650      	mov	r0, sl
 800b880:	f7f4 fcae 	bl	80001e0 <memchr>
 800b884:	b138      	cbz	r0, 800b896 <_vfiprintf_r+0x176>
 800b886:	9b04      	ldr	r3, [sp, #16]
 800b888:	eba0 000a 	sub.w	r0, r0, sl
 800b88c:	2240      	movs	r2, #64	@ 0x40
 800b88e:	4082      	lsls	r2, r0
 800b890:	4313      	orrs	r3, r2
 800b892:	3401      	adds	r4, #1
 800b894:	9304      	str	r3, [sp, #16]
 800b896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b89a:	4829      	ldr	r0, [pc, #164]	@ (800b940 <_vfiprintf_r+0x220>)
 800b89c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b8a0:	2206      	movs	r2, #6
 800b8a2:	f7f4 fc9d 	bl	80001e0 <memchr>
 800b8a6:	2800      	cmp	r0, #0
 800b8a8:	d03f      	beq.n	800b92a <_vfiprintf_r+0x20a>
 800b8aa:	4b26      	ldr	r3, [pc, #152]	@ (800b944 <_vfiprintf_r+0x224>)
 800b8ac:	bb1b      	cbnz	r3, 800b8f6 <_vfiprintf_r+0x1d6>
 800b8ae:	9b03      	ldr	r3, [sp, #12]
 800b8b0:	3307      	adds	r3, #7
 800b8b2:	f023 0307 	bic.w	r3, r3, #7
 800b8b6:	3308      	adds	r3, #8
 800b8b8:	9303      	str	r3, [sp, #12]
 800b8ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8bc:	443b      	add	r3, r7
 800b8be:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8c0:	e76a      	b.n	800b798 <_vfiprintf_r+0x78>
 800b8c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8c6:	460c      	mov	r4, r1
 800b8c8:	2001      	movs	r0, #1
 800b8ca:	e7a8      	b.n	800b81e <_vfiprintf_r+0xfe>
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	3401      	adds	r4, #1
 800b8d0:	9305      	str	r3, [sp, #20]
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	f04f 0c0a 	mov.w	ip, #10
 800b8d8:	4620      	mov	r0, r4
 800b8da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8de:	3a30      	subs	r2, #48	@ 0x30
 800b8e0:	2a09      	cmp	r2, #9
 800b8e2:	d903      	bls.n	800b8ec <_vfiprintf_r+0x1cc>
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d0c6      	beq.n	800b876 <_vfiprintf_r+0x156>
 800b8e8:	9105      	str	r1, [sp, #20]
 800b8ea:	e7c4      	b.n	800b876 <_vfiprintf_r+0x156>
 800b8ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8f0:	4604      	mov	r4, r0
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	e7f0      	b.n	800b8d8 <_vfiprintf_r+0x1b8>
 800b8f6:	ab03      	add	r3, sp, #12
 800b8f8:	9300      	str	r3, [sp, #0]
 800b8fa:	462a      	mov	r2, r5
 800b8fc:	4b12      	ldr	r3, [pc, #72]	@ (800b948 <_vfiprintf_r+0x228>)
 800b8fe:	a904      	add	r1, sp, #16
 800b900:	4630      	mov	r0, r6
 800b902:	f7fd fbdb 	bl	80090bc <_printf_float>
 800b906:	4607      	mov	r7, r0
 800b908:	1c78      	adds	r0, r7, #1
 800b90a:	d1d6      	bne.n	800b8ba <_vfiprintf_r+0x19a>
 800b90c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b90e:	07d9      	lsls	r1, r3, #31
 800b910:	d405      	bmi.n	800b91e <_vfiprintf_r+0x1fe>
 800b912:	89ab      	ldrh	r3, [r5, #12]
 800b914:	059a      	lsls	r2, r3, #22
 800b916:	d402      	bmi.n	800b91e <_vfiprintf_r+0x1fe>
 800b918:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b91a:	f7fe f92b 	bl	8009b74 <__retarget_lock_release_recursive>
 800b91e:	89ab      	ldrh	r3, [r5, #12]
 800b920:	065b      	lsls	r3, r3, #25
 800b922:	f53f af1f 	bmi.w	800b764 <_vfiprintf_r+0x44>
 800b926:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b928:	e71e      	b.n	800b768 <_vfiprintf_r+0x48>
 800b92a:	ab03      	add	r3, sp, #12
 800b92c:	9300      	str	r3, [sp, #0]
 800b92e:	462a      	mov	r2, r5
 800b930:	4b05      	ldr	r3, [pc, #20]	@ (800b948 <_vfiprintf_r+0x228>)
 800b932:	a904      	add	r1, sp, #16
 800b934:	4630      	mov	r0, r6
 800b936:	f7fd fe59 	bl	80095ec <_printf_i>
 800b93a:	e7e4      	b.n	800b906 <_vfiprintf_r+0x1e6>
 800b93c:	0800be98 	.word	0x0800be98
 800b940:	0800bea2 	.word	0x0800bea2
 800b944:	080090bd 	.word	0x080090bd
 800b948:	0800b6fd 	.word	0x0800b6fd
 800b94c:	0800be9e 	.word	0x0800be9e

0800b950 <__swbuf_r>:
 800b950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b952:	460e      	mov	r6, r1
 800b954:	4614      	mov	r4, r2
 800b956:	4605      	mov	r5, r0
 800b958:	b118      	cbz	r0, 800b962 <__swbuf_r+0x12>
 800b95a:	6a03      	ldr	r3, [r0, #32]
 800b95c:	b90b      	cbnz	r3, 800b962 <__swbuf_r+0x12>
 800b95e:	f7fd fff1 	bl	8009944 <__sinit>
 800b962:	69a3      	ldr	r3, [r4, #24]
 800b964:	60a3      	str	r3, [r4, #8]
 800b966:	89a3      	ldrh	r3, [r4, #12]
 800b968:	071a      	lsls	r2, r3, #28
 800b96a:	d501      	bpl.n	800b970 <__swbuf_r+0x20>
 800b96c:	6923      	ldr	r3, [r4, #16]
 800b96e:	b943      	cbnz	r3, 800b982 <__swbuf_r+0x32>
 800b970:	4621      	mov	r1, r4
 800b972:	4628      	mov	r0, r5
 800b974:	f000 f82a 	bl	800b9cc <__swsetup_r>
 800b978:	b118      	cbz	r0, 800b982 <__swbuf_r+0x32>
 800b97a:	f04f 37ff 	mov.w	r7, #4294967295
 800b97e:	4638      	mov	r0, r7
 800b980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b982:	6823      	ldr	r3, [r4, #0]
 800b984:	6922      	ldr	r2, [r4, #16]
 800b986:	1a98      	subs	r0, r3, r2
 800b988:	6963      	ldr	r3, [r4, #20]
 800b98a:	b2f6      	uxtb	r6, r6
 800b98c:	4283      	cmp	r3, r0
 800b98e:	4637      	mov	r7, r6
 800b990:	dc05      	bgt.n	800b99e <__swbuf_r+0x4e>
 800b992:	4621      	mov	r1, r4
 800b994:	4628      	mov	r0, r5
 800b996:	f7ff fd99 	bl	800b4cc <_fflush_r>
 800b99a:	2800      	cmp	r0, #0
 800b99c:	d1ed      	bne.n	800b97a <__swbuf_r+0x2a>
 800b99e:	68a3      	ldr	r3, [r4, #8]
 800b9a0:	3b01      	subs	r3, #1
 800b9a2:	60a3      	str	r3, [r4, #8]
 800b9a4:	6823      	ldr	r3, [r4, #0]
 800b9a6:	1c5a      	adds	r2, r3, #1
 800b9a8:	6022      	str	r2, [r4, #0]
 800b9aa:	701e      	strb	r6, [r3, #0]
 800b9ac:	6962      	ldr	r2, [r4, #20]
 800b9ae:	1c43      	adds	r3, r0, #1
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d004      	beq.n	800b9be <__swbuf_r+0x6e>
 800b9b4:	89a3      	ldrh	r3, [r4, #12]
 800b9b6:	07db      	lsls	r3, r3, #31
 800b9b8:	d5e1      	bpl.n	800b97e <__swbuf_r+0x2e>
 800b9ba:	2e0a      	cmp	r6, #10
 800b9bc:	d1df      	bne.n	800b97e <__swbuf_r+0x2e>
 800b9be:	4621      	mov	r1, r4
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	f7ff fd83 	bl	800b4cc <_fflush_r>
 800b9c6:	2800      	cmp	r0, #0
 800b9c8:	d0d9      	beq.n	800b97e <__swbuf_r+0x2e>
 800b9ca:	e7d6      	b.n	800b97a <__swbuf_r+0x2a>

0800b9cc <__swsetup_r>:
 800b9cc:	b538      	push	{r3, r4, r5, lr}
 800b9ce:	4b29      	ldr	r3, [pc, #164]	@ (800ba74 <__swsetup_r+0xa8>)
 800b9d0:	4605      	mov	r5, r0
 800b9d2:	6818      	ldr	r0, [r3, #0]
 800b9d4:	460c      	mov	r4, r1
 800b9d6:	b118      	cbz	r0, 800b9e0 <__swsetup_r+0x14>
 800b9d8:	6a03      	ldr	r3, [r0, #32]
 800b9da:	b90b      	cbnz	r3, 800b9e0 <__swsetup_r+0x14>
 800b9dc:	f7fd ffb2 	bl	8009944 <__sinit>
 800b9e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9e4:	0719      	lsls	r1, r3, #28
 800b9e6:	d422      	bmi.n	800ba2e <__swsetup_r+0x62>
 800b9e8:	06da      	lsls	r2, r3, #27
 800b9ea:	d407      	bmi.n	800b9fc <__swsetup_r+0x30>
 800b9ec:	2209      	movs	r2, #9
 800b9ee:	602a      	str	r2, [r5, #0]
 800b9f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9f4:	81a3      	strh	r3, [r4, #12]
 800b9f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b9fa:	e033      	b.n	800ba64 <__swsetup_r+0x98>
 800b9fc:	0758      	lsls	r0, r3, #29
 800b9fe:	d512      	bpl.n	800ba26 <__swsetup_r+0x5a>
 800ba00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba02:	b141      	cbz	r1, 800ba16 <__swsetup_r+0x4a>
 800ba04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba08:	4299      	cmp	r1, r3
 800ba0a:	d002      	beq.n	800ba12 <__swsetup_r+0x46>
 800ba0c:	4628      	mov	r0, r5
 800ba0e:	f7fe feff 	bl	800a810 <_free_r>
 800ba12:	2300      	movs	r3, #0
 800ba14:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba16:	89a3      	ldrh	r3, [r4, #12]
 800ba18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ba1c:	81a3      	strh	r3, [r4, #12]
 800ba1e:	2300      	movs	r3, #0
 800ba20:	6063      	str	r3, [r4, #4]
 800ba22:	6923      	ldr	r3, [r4, #16]
 800ba24:	6023      	str	r3, [r4, #0]
 800ba26:	89a3      	ldrh	r3, [r4, #12]
 800ba28:	f043 0308 	orr.w	r3, r3, #8
 800ba2c:	81a3      	strh	r3, [r4, #12]
 800ba2e:	6923      	ldr	r3, [r4, #16]
 800ba30:	b94b      	cbnz	r3, 800ba46 <__swsetup_r+0x7a>
 800ba32:	89a3      	ldrh	r3, [r4, #12]
 800ba34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ba38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba3c:	d003      	beq.n	800ba46 <__swsetup_r+0x7a>
 800ba3e:	4621      	mov	r1, r4
 800ba40:	4628      	mov	r0, r5
 800ba42:	f000 f883 	bl	800bb4c <__smakebuf_r>
 800ba46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba4a:	f013 0201 	ands.w	r2, r3, #1
 800ba4e:	d00a      	beq.n	800ba66 <__swsetup_r+0x9a>
 800ba50:	2200      	movs	r2, #0
 800ba52:	60a2      	str	r2, [r4, #8]
 800ba54:	6962      	ldr	r2, [r4, #20]
 800ba56:	4252      	negs	r2, r2
 800ba58:	61a2      	str	r2, [r4, #24]
 800ba5a:	6922      	ldr	r2, [r4, #16]
 800ba5c:	b942      	cbnz	r2, 800ba70 <__swsetup_r+0xa4>
 800ba5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ba62:	d1c5      	bne.n	800b9f0 <__swsetup_r+0x24>
 800ba64:	bd38      	pop	{r3, r4, r5, pc}
 800ba66:	0799      	lsls	r1, r3, #30
 800ba68:	bf58      	it	pl
 800ba6a:	6962      	ldrpl	r2, [r4, #20]
 800ba6c:	60a2      	str	r2, [r4, #8]
 800ba6e:	e7f4      	b.n	800ba5a <__swsetup_r+0x8e>
 800ba70:	2000      	movs	r0, #0
 800ba72:	e7f7      	b.n	800ba64 <__swsetup_r+0x98>
 800ba74:	20000108 	.word	0x20000108

0800ba78 <_raise_r>:
 800ba78:	291f      	cmp	r1, #31
 800ba7a:	b538      	push	{r3, r4, r5, lr}
 800ba7c:	4605      	mov	r5, r0
 800ba7e:	460c      	mov	r4, r1
 800ba80:	d904      	bls.n	800ba8c <_raise_r+0x14>
 800ba82:	2316      	movs	r3, #22
 800ba84:	6003      	str	r3, [r0, #0]
 800ba86:	f04f 30ff 	mov.w	r0, #4294967295
 800ba8a:	bd38      	pop	{r3, r4, r5, pc}
 800ba8c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ba8e:	b112      	cbz	r2, 800ba96 <_raise_r+0x1e>
 800ba90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba94:	b94b      	cbnz	r3, 800baaa <_raise_r+0x32>
 800ba96:	4628      	mov	r0, r5
 800ba98:	f000 f830 	bl	800bafc <_getpid_r>
 800ba9c:	4622      	mov	r2, r4
 800ba9e:	4601      	mov	r1, r0
 800baa0:	4628      	mov	r0, r5
 800baa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800baa6:	f000 b817 	b.w	800bad8 <_kill_r>
 800baaa:	2b01      	cmp	r3, #1
 800baac:	d00a      	beq.n	800bac4 <_raise_r+0x4c>
 800baae:	1c59      	adds	r1, r3, #1
 800bab0:	d103      	bne.n	800baba <_raise_r+0x42>
 800bab2:	2316      	movs	r3, #22
 800bab4:	6003      	str	r3, [r0, #0]
 800bab6:	2001      	movs	r0, #1
 800bab8:	e7e7      	b.n	800ba8a <_raise_r+0x12>
 800baba:	2100      	movs	r1, #0
 800babc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bac0:	4620      	mov	r0, r4
 800bac2:	4798      	blx	r3
 800bac4:	2000      	movs	r0, #0
 800bac6:	e7e0      	b.n	800ba8a <_raise_r+0x12>

0800bac8 <raise>:
 800bac8:	4b02      	ldr	r3, [pc, #8]	@ (800bad4 <raise+0xc>)
 800baca:	4601      	mov	r1, r0
 800bacc:	6818      	ldr	r0, [r3, #0]
 800bace:	f7ff bfd3 	b.w	800ba78 <_raise_r>
 800bad2:	bf00      	nop
 800bad4:	20000108 	.word	0x20000108

0800bad8 <_kill_r>:
 800bad8:	b538      	push	{r3, r4, r5, lr}
 800bada:	4d07      	ldr	r5, [pc, #28]	@ (800baf8 <_kill_r+0x20>)
 800badc:	2300      	movs	r3, #0
 800bade:	4604      	mov	r4, r0
 800bae0:	4608      	mov	r0, r1
 800bae2:	4611      	mov	r1, r2
 800bae4:	602b      	str	r3, [r5, #0]
 800bae6:	f7f5 fe8f 	bl	8001808 <_kill>
 800baea:	1c43      	adds	r3, r0, #1
 800baec:	d102      	bne.n	800baf4 <_kill_r+0x1c>
 800baee:	682b      	ldr	r3, [r5, #0]
 800baf0:	b103      	cbz	r3, 800baf4 <_kill_r+0x1c>
 800baf2:	6023      	str	r3, [r4, #0]
 800baf4:	bd38      	pop	{r3, r4, r5, pc}
 800baf6:	bf00      	nop
 800baf8:	20002120 	.word	0x20002120

0800bafc <_getpid_r>:
 800bafc:	f7f5 be7c 	b.w	80017f8 <_getpid>

0800bb00 <__swhatbuf_r>:
 800bb00:	b570      	push	{r4, r5, r6, lr}
 800bb02:	460c      	mov	r4, r1
 800bb04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb08:	2900      	cmp	r1, #0
 800bb0a:	b096      	sub	sp, #88	@ 0x58
 800bb0c:	4615      	mov	r5, r2
 800bb0e:	461e      	mov	r6, r3
 800bb10:	da0d      	bge.n	800bb2e <__swhatbuf_r+0x2e>
 800bb12:	89a3      	ldrh	r3, [r4, #12]
 800bb14:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bb18:	f04f 0100 	mov.w	r1, #0
 800bb1c:	bf14      	ite	ne
 800bb1e:	2340      	movne	r3, #64	@ 0x40
 800bb20:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bb24:	2000      	movs	r0, #0
 800bb26:	6031      	str	r1, [r6, #0]
 800bb28:	602b      	str	r3, [r5, #0]
 800bb2a:	b016      	add	sp, #88	@ 0x58
 800bb2c:	bd70      	pop	{r4, r5, r6, pc}
 800bb2e:	466a      	mov	r2, sp
 800bb30:	f000 f848 	bl	800bbc4 <_fstat_r>
 800bb34:	2800      	cmp	r0, #0
 800bb36:	dbec      	blt.n	800bb12 <__swhatbuf_r+0x12>
 800bb38:	9901      	ldr	r1, [sp, #4]
 800bb3a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bb3e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bb42:	4259      	negs	r1, r3
 800bb44:	4159      	adcs	r1, r3
 800bb46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb4a:	e7eb      	b.n	800bb24 <__swhatbuf_r+0x24>

0800bb4c <__smakebuf_r>:
 800bb4c:	898b      	ldrh	r3, [r1, #12]
 800bb4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb50:	079d      	lsls	r5, r3, #30
 800bb52:	4606      	mov	r6, r0
 800bb54:	460c      	mov	r4, r1
 800bb56:	d507      	bpl.n	800bb68 <__smakebuf_r+0x1c>
 800bb58:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bb5c:	6023      	str	r3, [r4, #0]
 800bb5e:	6123      	str	r3, [r4, #16]
 800bb60:	2301      	movs	r3, #1
 800bb62:	6163      	str	r3, [r4, #20]
 800bb64:	b003      	add	sp, #12
 800bb66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb68:	ab01      	add	r3, sp, #4
 800bb6a:	466a      	mov	r2, sp
 800bb6c:	f7ff ffc8 	bl	800bb00 <__swhatbuf_r>
 800bb70:	9f00      	ldr	r7, [sp, #0]
 800bb72:	4605      	mov	r5, r0
 800bb74:	4639      	mov	r1, r7
 800bb76:	4630      	mov	r0, r6
 800bb78:	f7fe febe 	bl	800a8f8 <_malloc_r>
 800bb7c:	b948      	cbnz	r0, 800bb92 <__smakebuf_r+0x46>
 800bb7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb82:	059a      	lsls	r2, r3, #22
 800bb84:	d4ee      	bmi.n	800bb64 <__smakebuf_r+0x18>
 800bb86:	f023 0303 	bic.w	r3, r3, #3
 800bb8a:	f043 0302 	orr.w	r3, r3, #2
 800bb8e:	81a3      	strh	r3, [r4, #12]
 800bb90:	e7e2      	b.n	800bb58 <__smakebuf_r+0xc>
 800bb92:	89a3      	ldrh	r3, [r4, #12]
 800bb94:	6020      	str	r0, [r4, #0]
 800bb96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb9a:	81a3      	strh	r3, [r4, #12]
 800bb9c:	9b01      	ldr	r3, [sp, #4]
 800bb9e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bba2:	b15b      	cbz	r3, 800bbbc <__smakebuf_r+0x70>
 800bba4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bba8:	4630      	mov	r0, r6
 800bbaa:	f000 f81d 	bl	800bbe8 <_isatty_r>
 800bbae:	b128      	cbz	r0, 800bbbc <__smakebuf_r+0x70>
 800bbb0:	89a3      	ldrh	r3, [r4, #12]
 800bbb2:	f023 0303 	bic.w	r3, r3, #3
 800bbb6:	f043 0301 	orr.w	r3, r3, #1
 800bbba:	81a3      	strh	r3, [r4, #12]
 800bbbc:	89a3      	ldrh	r3, [r4, #12]
 800bbbe:	431d      	orrs	r5, r3
 800bbc0:	81a5      	strh	r5, [r4, #12]
 800bbc2:	e7cf      	b.n	800bb64 <__smakebuf_r+0x18>

0800bbc4 <_fstat_r>:
 800bbc4:	b538      	push	{r3, r4, r5, lr}
 800bbc6:	4d07      	ldr	r5, [pc, #28]	@ (800bbe4 <_fstat_r+0x20>)
 800bbc8:	2300      	movs	r3, #0
 800bbca:	4604      	mov	r4, r0
 800bbcc:	4608      	mov	r0, r1
 800bbce:	4611      	mov	r1, r2
 800bbd0:	602b      	str	r3, [r5, #0]
 800bbd2:	f7f5 fe79 	bl	80018c8 <_fstat>
 800bbd6:	1c43      	adds	r3, r0, #1
 800bbd8:	d102      	bne.n	800bbe0 <_fstat_r+0x1c>
 800bbda:	682b      	ldr	r3, [r5, #0]
 800bbdc:	b103      	cbz	r3, 800bbe0 <_fstat_r+0x1c>
 800bbde:	6023      	str	r3, [r4, #0]
 800bbe0:	bd38      	pop	{r3, r4, r5, pc}
 800bbe2:	bf00      	nop
 800bbe4:	20002120 	.word	0x20002120

0800bbe8 <_isatty_r>:
 800bbe8:	b538      	push	{r3, r4, r5, lr}
 800bbea:	4d06      	ldr	r5, [pc, #24]	@ (800bc04 <_isatty_r+0x1c>)
 800bbec:	2300      	movs	r3, #0
 800bbee:	4604      	mov	r4, r0
 800bbf0:	4608      	mov	r0, r1
 800bbf2:	602b      	str	r3, [r5, #0]
 800bbf4:	f7f5 fe78 	bl	80018e8 <_isatty>
 800bbf8:	1c43      	adds	r3, r0, #1
 800bbfa:	d102      	bne.n	800bc02 <_isatty_r+0x1a>
 800bbfc:	682b      	ldr	r3, [r5, #0]
 800bbfe:	b103      	cbz	r3, 800bc02 <_isatty_r+0x1a>
 800bc00:	6023      	str	r3, [r4, #0]
 800bc02:	bd38      	pop	{r3, r4, r5, pc}
 800bc04:	20002120 	.word	0x20002120

0800bc08 <_init>:
 800bc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc0a:	bf00      	nop
 800bc0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc0e:	bc08      	pop	{r3}
 800bc10:	469e      	mov	lr, r3
 800bc12:	4770      	bx	lr

0800bc14 <_fini>:
 800bc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc16:	bf00      	nop
 800bc18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc1a:	bc08      	pop	{r3}
 800bc1c:	469e      	mov	lr, r3
 800bc1e:	4770      	bx	lr
